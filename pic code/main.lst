CCS PCM C Compiler, Version 5.007, 61971               25-май-22 05:25

               Filename:   C:\Users\ј€на “леуленова\Desktop\Intelligent Control\piic\main.lst

               ROM used:   6396 words (78%)
                           Largest free fragment is 1736
               RAM used:   40 (11%) at main() level
                           139 (38%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  18
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   737
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
002F:  BCF    0A.0
0030:  BCF    0A.1
0031:  BCF    0A.2
0032:  ADDLW  36
0033:  BTFSC  03.0
0034:  INCF   0A,F
0035:  MOVWF  02
0036:  RETLW  2D
0037:  RETLW  2D
0038:  RETLW  2D
0039:  RETLW  2D
003A:  RETLW  2D
003B:  RETLW  2C
003C:  RETLW  2B
003D:  RETLW  2A
003E:  RETLW  28
003F:  RETLW  27
0040:  RETLW  26
0041:  RETLW  25
0042:  RETLW  23
0043:  RETLW  22
0044:  RETLW  21
0045:  RETLW  1F
0046:  RETLW  1E
0047:  RETLW  1C
0048:  RETLW  1B
0049:  RETLW  19
004A:  RETLW  18
004B:  RETLW  16
004C:  RETLW  14
004D:  RETLW  13
004E:  RETLW  11
004F:  RETLW  12
0050:  RETLW  12
0051:  RETLW  12
0052:  RETLW  12
0053:  RETLW  12
0054:  RETLW  13
0055:  RETLW  13
0056:  RETLW  13
0057:  RETLW  13
0058:  RETLW  13
0059:  RETLW  13
005A:  RETLW  13
005B:  RETLW  13
005C:  RETLW  13
005D:  RETLW  12
005E:  RETLW  12
005F:  RETLW  2A
0060:  RETLW  2A
0061:  RETLW  2A
0062:  RETLW  2A
0063:  RETLW  2A
0064:  RETLW  31
0065:  RETLW  37
0066:  RETLW  39
0067:  RETLW  39
0068:  RETLW  38
0069:  RETLW  37
006A:  RETLW  36
006B:  RETLW  35
006C:  RETLW  34
006D:  RETLW  33
006E:  RETLW  32
006F:  RETLW  30
0070:  RETLW  2F
0071:  RETLW  2E
0072:  RETLW  2C
0073:  RETLW  2B
0074:  RETLW  2A
0075:  RETLW  29
0076:  RETLW  28
0077:  RETLW  27
0078:  RETLW  28
0079:  RETLW  29
007A:  RETLW  2A
007B:  RETLW  2B
007C:  RETLW  2C
007D:  RETLW  2D
007E:  RETLW  2E
007F:  RETLW  2F
0080:  RETLW  31
0081:  RETLW  33
0082:  RETLW  31
0083:  RETLW  2F
0084:  RETLW  2E
0085:  RETLW  2D
0086:  RETLW  2C
0087:  RETLW  2B
0088:  RETLW  28
0089:  RETLW  28
008A:  RETLW  28
008B:  RETLW  28
008C:  RETLW  28
008D:  RETLW  2F
008E:  RETLW  34
008F:  RETLW  39
0090:  RETLW  3D
0091:  RETLW  41
0092:  RETLW  40
0093:  RETLW  3F
0094:  RETLW  3F
0095:  RETLW  3E
0096:  RETLW  3D
0097:  RETLW  3C
0098:  RETLW  3B
0099:  RETLW  3A
009A:  RETLW  39
009B:  RETLW  37
009C:  RETLW  36
009D:  RETLW  35
009E:  RETLW  34
009F:  RETLW  33
00A0:  RETLW  33
00A1:  RETLW  33
00A2:  RETLW  34
00A3:  RETLW  35
00A4:  RETLW  36
00A5:  RETLW  37
00A6:  RETLW  39
00A7:  RETLW  3A
00A8:  RETLW  3B
00A9:  RETLW  3D
00AA:  RETLW  3F
00AB:  RETLW  3D
00AC:  RETLW  3B
00AD:  RETLW  3A
00AE:  RETLW  39
00AF:  RETLW  37
00B0:  RETLW  36
00B1:  RETLW  25
00B2:  RETLW  25
00B3:  RETLW  25
00B4:  RETLW  25
00B5:  RETLW  25
00B6:  RETLW  2C
00B7:  RETLW  32
00B8:  RETLW  37
00B9:  RETLW  3A
00BA:  RETLW  3E
00BB:  RETLW  41
00BC:  RETLW  44
00BD:  RETLW  44
00BE:  RETLW  44
00BF:  RETLW  43
00C0:  RETLW  42
00C1:  RETLW  41
00C2:  RETLW  40
00C3:  RETLW  3F
00C4:  RETLW  3E
00C5:  RETLW  3D
00C6:  RETLW  3D
00C7:  RETLW  3D
00C8:  RETLW  3D
00C9:  RETLW  3D
00CA:  RETLW  3D
00CB:  RETLW  3D
00CC:  RETLW  3D
00CD:  RETLW  3D
00CE:  RETLW  3E
00CF:  RETLW  3F
00D0:  RETLW  41
00D1:  RETLW  42
00D2:  RETLW  43
00D3:  RETLW  45
00D4:  RETLW  43
00D5:  RETLW  42
00D6:  RETLW  41
00D7:  RETLW  3F
00D8:  RETLW  3E
00D9:  RETLW  3D
00DA:  RETLW  22
00DB:  RETLW  22
00DC:  RETLW  22
00DD:  RETLW  22
00DE:  RETLW  22
00DF:  RETLW  2A
00E0:  RETLW  30
00E1:  RETLW  35
00E2:  RETLW  39
00E3:  RETLW  3C
00E4:  RETLW  3F
00E5:  RETLW  41
00E6:  RETLW  43
00E7:  RETLW  45
00E8:  RETLW  47
00E9:  RETLW  46
00EA:  RETLW  45
00EB:  RETLW  45
00EC:  RETLW  46
00ED:  RETLW  46
00EE:  RETLW  46
00EF:  RETLW  46
00F0:  RETLW  46
00F1:  RETLW  46
00F2:  RETLW  46
00F3:  RETLW  46
00F4:  RETLW  46
00F5:  RETLW  46
00F6:  RETLW  46
00F7:  RETLW  46
00F8:  RETLW  46
00F9:  RETLW  46
00FA:  RETLW  46
00FB:  RETLW  47
00FC:  RETLW  49
00FD:  RETLW  47
00FE:  RETLW  46
00FF:  RETLW  46
0100:  RETLW  46
0101:  RETLW  46
0102:  RETLW  46
0103:  RETLW  1D
0104:  RETLW  1D
0105:  RETLW  1D
0106:  RETLW  1D
0107:  RETLW  1D
0108:  RETLW  26
0109:  RETLW  2D
010A:  RETLW  32
010B:  RETLW  37
010C:  RETLW  3A
010D:  RETLW  3D
010E:  RETLW  3F
010F:  RETLW  42
0110:  RETLW  45
0111:  RETLW  48
0112:  RETLW  4A
0113:  RETLW  4D
0114:  RETLW  4D
0115:  RETLW  4E
0116:  RETLW  4E
0117:  RETLW  4E
0118:  RETLW  4E
0119:  RETLW  4E
011A:  RETLW  4E
011B:  RETLW  4E
011C:  RETLW  4E
011D:  RETLW  4E
011E:  RETLW  4E
011F:  RETLW  4E
0120:  RETLW  4E
0121:  RETLW  4E
0122:  RETLW  4E
0123:  RETLW  4E
0124:  RETLW  4D
0125:  RETLW  4C
0126:  RETLW  4D
0127:  RETLW  4E
0128:  RETLW  4E
0129:  RETLW  4E
012A:  RETLW  4E
012B:  RETLW  4E
012C:  BSF    0A.0
012D:  BCF    0A.1
012E:  BCF    0A.2
012F:  ADDLW  33
0130:  BTFSC  03.0
0131:  INCF   0A,F
0132:  MOVWF  02
0133:  RETLW  18
0134:  RETLW  18
0135:  RETLW  18
0136:  RETLW  18
0137:  RETLW  18
0138:  RETLW  22
0139:  RETLW  29
013A:  RETLW  2F
013B:  RETLW  34
013C:  RETLW  37
013D:  RETLW  3C
013E:  RETLW  3F
013F:  RETLW  43
0140:  RETLW  46
0141:  RETLW  49
0142:  RETLW  4B
0143:  RETLW  4E
0144:  RETLW  50
0145:  RETLW  52
0146:  RETLW  54
0147:  RETLW  56
0148:  RETLW  56
0149:  RETLW  56
014A:  RETLW  56
014B:  RETLW  56
014C:  RETLW  56
014D:  RETLW  56
014E:  RETLW  56
014F:  RETLW  56
0150:  RETLW  56
0151:  RETLW  56
0152:  RETLW  55
0153:  RETLW  55
0154:  RETLW  54
0155:  RETLW  54
0156:  RETLW  54
0157:  RETLW  55
0158:  RETLW  55
0159:  RETLW  56
015A:  RETLW  56
015B:  RETLW  56
015C:  RETLW  12
015D:  RETLW  12
015E:  RETLW  12
015F:  RETLW  12
0160:  RETLW  12
0161:  RETLW  1D
0162:  RETLW  26
0163:  RETLW  2D
0164:  RETLW  33
0165:  RETLW  37
0166:  RETLW  3C
0167:  RETLW  3F
0168:  RETLW  43
0169:  RETLW  46
016A:  RETLW  49
016B:  RETLW  4B
016C:  RETLW  4E
016D:  RETLW  50
016E:  RETLW  52
016F:  RETLW  54
0170:  RETLW  56
0171:  RETLW  58
0172:  RETLW  5A
0173:  RETLW  5C
0174:  RETLW  5E
0175:  RETLW  5E
0176:  RETLW  5E
0177:  RETLW  5E
0178:  RETLW  5E
0179:  RETLW  5E
017A:  RETLW  5E
017B:  RETLW  5E
017C:  RETLW  5E
017D:  RETLW  5E
017E:  RETLW  5F
017F:  RETLW  5E
0180:  RETLW  5E
0181:  RETLW  5E
0182:  RETLW  5E
0183:  RETLW  5E
0184:  RETLW  5E
0185:  RETLW  11
0186:  RETLW  11
0187:  RETLW  11
0188:  RETLW  11
0189:  RETLW  11
018A:  RETLW  1D
018B:  RETLW  25
018C:  RETLW  2D
018D:  RETLW  33
018E:  RETLW  37
018F:  RETLW  3C
0190:  RETLW  3F
0191:  RETLW  43
0192:  RETLW  46
0193:  RETLW  49
0194:  RETLW  4B
0195:  RETLW  4E
0196:  RETLW  50
0197:  RETLW  52
0198:  RETLW  54
0199:  RETLW  56
019A:  RETLW  58
019B:  RETLW  5A
019C:  RETLW  5C
019D:  RETLW  5E
019E:  RETLW  5E
019F:  RETLW  5E
01A0:  RETLW  5E
01A1:  RETLW  5E
01A2:  RETLW  5E
01A3:  RETLW  5E
01A4:  RETLW  5E
01A5:  RETLW  5E
01A6:  RETLW  5E
01A7:  RETLW  5F
01A8:  RETLW  5E
01A9:  RETLW  5E
01AA:  RETLW  5E
01AB:  RETLW  5E
01AC:  RETLW  5E
01AD:  RETLW  5E
01AE:  RETLW  11
01AF:  RETLW  11
01B0:  RETLW  11
01B1:  RETLW  11
01B2:  RETLW  11
01B3:  RETLW  1D
01B4:  RETLW  25
01B5:  RETLW  2D
01B6:  RETLW  33
01B7:  RETLW  37
01B8:  RETLW  3C
01B9:  RETLW  3F
01BA:  RETLW  43
01BB:  RETLW  46
01BC:  RETLW  49
01BD:  RETLW  4B
01BE:  RETLW  4E
01BF:  RETLW  50
01C0:  RETLW  52
01C1:  RETLW  54
01C2:  RETLW  56
01C3:  RETLW  58
01C4:  RETLW  5A
01C5:  RETLW  5C
01C6:  RETLW  5E
01C7:  RETLW  5E
01C8:  RETLW  5E
01C9:  RETLW  5E
01CA:  RETLW  5E
01CB:  RETLW  5E
01CC:  RETLW  5E
01CD:  RETLW  5E
01CE:  RETLW  5E
01CF:  RETLW  5E
01D0:  RETLW  5F
01D1:  RETLW  5E
01D2:  RETLW  5E
01D3:  RETLW  5E
01D4:  RETLW  5E
01D5:  RETLW  5E
01D6:  RETLW  5E
01D7:  RETLW  11
01D8:  RETLW  11
01D9:  RETLW  11
01DA:  RETLW  11
01DB:  RETLW  11
01DC:  RETLW  1D
01DD:  RETLW  25
01DE:  RETLW  2D
01DF:  RETLW  33
01E0:  RETLW  37
01E1:  RETLW  3C
01E2:  RETLW  3F
01E3:  RETLW  43
01E4:  RETLW  46
01E5:  RETLW  49
01E6:  RETLW  4B
01E7:  RETLW  4E
01E8:  RETLW  50
01E9:  RETLW  52
01EA:  RETLW  54
01EB:  RETLW  56
01EC:  RETLW  58
01ED:  RETLW  5A
01EE:  RETLW  5C
01EF:  RETLW  5E
01F0:  RETLW  5E
01F1:  RETLW  5E
01F2:  RETLW  5E
01F3:  RETLW  5E
01F4:  RETLW  5E
01F5:  RETLW  5E
01F6:  RETLW  5E
01F7:  RETLW  5E
01F8:  RETLW  5E
01F9:  RETLW  5F
01FA:  RETLW  5E
01FB:  RETLW  5E
01FC:  RETLW  5E
01FD:  RETLW  5E
01FE:  RETLW  5E
01FF:  RETLW  5E
0200:  RETLW  27
0201:  RETLW  27
0202:  RETLW  27
0203:  RETLW  27
0204:  RETLW  27
0205:  RETLW  38
0206:  RETLW  46
0207:  RETLW  4E
0208:  RETLW  51
0209:  RETLW  54
020A:  RETLW  56
020B:  RETLW  58
020C:  RETLW  5A
020D:  RETLW  5C
020E:  RETLW  5E
020F:  RETLW  5F
0210:  RETLW  61
0211:  RETLW  63
0212:  RETLW  64
0213:  RETLW  66
0214:  RETLW  68
0215:  RETLW  69
0216:  RETLW  6B
0217:  RETLW  6D
0218:  RETLW  6E
0219:  RETLW  6F
021A:  RETLW  6F
021B:  RETLW  70
021C:  RETLW  70
021D:  RETLW  71
021E:  RETLW  71
021F:  RETLW  72
0220:  RETLW  73
0221:  RETLW  74
0222:  RETLW  76
0223:  RETLW  74
0224:  RETLW  73
0225:  RETLW  72
0226:  RETLW  71
0227:  RETLW  71
0228:  RETLW  70
0229:  BCF    0A.0
022A:  BSF    0A.1
022B:  BCF    0A.2
022C:  ADDLW  30
022D:  BTFSC  03.0
022E:  INCF   0A,F
022F:  MOVWF  02
0230:  RETLW  33
0231:  RETLW  33
0232:  RETLW  33
0233:  RETLW  33
0234:  RETLW  33
0235:  RETLW  3F
0236:  RETLW  4B
0237:  RETLW  55
0238:  RETLW  5F
0239:  RETLW  67
023A:  RETLW  68
023B:  RETLW  6A
023C:  RETLW  6B
023D:  RETLW  6C
023E:  RETLW  6D
023F:  RETLW  6E
0240:  RETLW  6F
0241:  RETLW  71
0242:  RETLW  72
0243:  RETLW  73
0244:  RETLW  75
0245:  RETLW  76
0246:  RETLW  78
0247:  RETLW  79
0248:  RETLW  7B
0249:  RETLW  7B
024A:  RETLW  7C
024B:  RETLW  7C
024C:  RETLW  7D
024D:  RETLW  7E
024E:  RETLW  7F
024F:  RETLW  80
0250:  RETLW  81
0251:  RETLW  83
0252:  RETLW  85
0253:  RETLW  83
0254:  RETLW  81
0255:  RETLW  80
0256:  RETLW  7F
0257:  RETLW  7E
0258:  RETLW  7D
0259:  RETLW  3C
025A:  RETLW  3C
025B:  RETLW  3C
025C:  RETLW  3C
025D:  RETLW  3C
025E:  RETLW  45
025F:  RETLW  4E
0260:  RETLW  56
0261:  RETLW  5F
0262:  RETLW  66
0263:  RETLW  6D
0264:  RETLW  73
0265:  RETLW  77
0266:  RETLW  77
0267:  RETLW  78
0268:  RETLW  79
0269:  RETLW  7A
026A:  RETLW  7B
026B:  RETLW  7C
026C:  RETLW  7D
026D:  RETLW  7E
026E:  RETLW  80
026F:  RETLW  81
0270:  RETLW  83
0271:  RETLW  85
0272:  RETLW  85
0273:  RETLW  85
0274:  RETLW  86
0275:  RETLW  86
0276:  RETLW  87
0277:  RETLW  89
0278:  RETLW  8A
0279:  RETLW  8B
027A:  RETLW  8D
027B:  RETLW  8F
027C:  RETLW  8D
027D:  RETLW  8B
027E:  RETLW  8A
027F:  RETLW  88
0280:  RETLW  87
0281:  RETLW  85
0282:  RETLW  42
0283:  RETLW  42
0284:  RETLW  42
0285:  RETLW  42
0286:  RETLW  42
0287:  RETLW  4B
0288:  RETLW  53
0289:  RETLW  5A
028A:  RETLW  60
028B:  RETLW  65
028C:  RETLW  6C
028D:  RETLW  71
028E:  RETLW  77
028F:  RETLW  7C
0290:  RETLW  81
0291:  RETLW  81
0292:  RETLW  82
0293:  RETLW  83
0294:  RETLW  84
0295:  RETLW  85
0296:  RETLW  87
0297:  RETLW  89
0298:  RETLW  8B
0299:  RETLW  8D
029A:  RETLW  8F
029B:  RETLW  8F
029C:  RETLW  8F
029D:  RETLW  8F
029E:  RETLW  8F
029F:  RETLW  8F
02A0:  RETLW  90
02A1:  RETLW  91
02A2:  RETLW  92
02A3:  RETLW  94
02A4:  RETLW  96
02A5:  RETLW  94
02A6:  RETLW  92
02A7:  RETLW  91
02A8:  RETLW  8F
02A9:  RETLW  8E
02AA:  RETLW  8E
02AB:  RETLW  48
02AC:  RETLW  48
02AD:  RETLW  48
02AE:  RETLW  48
02AF:  RETLW  48
02B0:  RETLW  50
02B1:  RETLW  57
02B2:  RETLW  5D
02B3:  RETLW  63
02B4:  RETLW  68
02B5:  RETLW  6D
02B6:  RETLW  71
02B7:  RETLW  75
02B8:  RETLW  7B
02B9:  RETLW  81
02BA:  RETLW  84
02BB:  RETLW  87
02BC:  RETLW  89
02BD:  RETLW  8B
02BE:  RETLW  8D
02BF:  RETLW  8F
02C0:  RETLW  91
02C1:  RETLW  93
02C2:  RETLW  95
02C3:  RETLW  97
02C4:  RETLW  97
02C5:  RETLW  97
02C6:  RETLW  97
02C7:  RETLW  97
02C8:  RETLW  97
02C9:  RETLW  97
02CA:  RETLW  97
02CB:  RETLW  97
02CC:  RETLW  97
02CD:  RETLW  96
02CE:  RETLW  97
02CF:  RETLW  97
02D0:  RETLW  97
02D1:  RETLW  97
02D2:  RETLW  97
02D3:  RETLW  97
02D4:  RETLW  4D
02D5:  RETLW  4D
02D6:  RETLW  4D
02D7:  RETLW  4D
02D8:  RETLW  4D
02D9:  RETLW  54
02DA:  RETLW  5B
02DB:  RETLW  61
02DC:  RETLW  66
02DD:  RETLW  6B
02DE:  RETLW  70
02DF:  RETLW  74
02E0:  RETLW  78
02E1:  RETLW  7D
02E2:  RETLW  81
02E3:  RETLW  85
02E4:  RETLW  89
02E5:  RETLW  8E
02E6:  RETLW  91
02E7:  RETLW  95
02E8:  RETLW  97
02E9:  RETLW  9A
02EA:  RETLW  9C
02EB:  RETLW  9E
02EC:  RETLW  A0
02ED:  RETLW  A0
02EE:  RETLW  A0
02EF:  RETLW  A0
02F0:  RETLW  A0
02F1:  RETLW  A0
02F2:  RETLW  9E
02F3:  RETLW  9D
02F4:  RETLW  9B
02F5:  RETLW  98
02F6:  RETLW  96
02F7:  RETLW  99
02F8:  RETLW  9B
02F9:  RETLW  9D
02FA:  RETLW  9F
02FB:  RETLW  A1
02FC:  RETLW  A1
02FD:  RETLW  51
02FE:  RETLW  51
02FF:  RETLW  51
0300:  RETLW  51
0301:  RETLW  51
0302:  RETLW  58
0303:  RETLW  5E
0304:  RETLW  64
0305:  RETLW  6A
0306:  RETLW  6F
0307:  RETLW  74
0308:  RETLW  78
0309:  RETLW  7D
030A:  RETLW  81
030B:  RETLW  85
030C:  RETLW  89
030D:  RETLW  8D
030E:  RETLW  91
030F:  RETLW  96
0310:  RETLW  9A
0311:  RETLW  9E
0312:  RETLW  A2
0313:  RETLW  A5
0314:  RETLW  A7
0315:  RETLW  A9
0316:  RETLW  A9
0317:  RETLW  A9
0318:  RETLW  A9
0319:  RETLW  A7
031A:  RETLW  A6
031B:  RETLW  A4
031C:  RETLW  A2
031D:  RETLW  A1
031E:  RETLW  9E
031F:  RETLW  9C
0320:  RETLW  9F
0321:  RETLW  A1
0322:  RETLW  A3
0323:  RETLW  A6
0324:  RETLW  A8
0325:  RETLW  A9
0326:  BSF    0A.0
0327:  BSF    0A.1
0328:  BCF    0A.2
0329:  ADDLW  2D
032A:  BTFSC  03.0
032B:  INCF   0A,F
032C:  MOVWF  02
032D:  RETLW  55
032E:  RETLW  55
032F:  RETLW  55
0330:  RETLW  55
0331:  RETLW  55
0332:  RETLW  5C
0333:  RETLW  62
0334:  RETLW  68
0335:  RETLW  6E
0336:  RETLW  73
0337:  RETLW  78
0338:  RETLW  7D
0339:  RETLW  82
033A:  RETLW  86
033B:  RETLW  8A
033C:  RETLW  8F
033D:  RETLW  93
033E:  RETLW  97
033F:  RETLW  9B
0340:  RETLW  9F
0341:  RETLW  A4
0342:  RETLW  A8
0343:  RETLW  AC
0344:  RETLW  B0
0345:  RETLW  B3
0346:  RETLW  B2
0347:  RETLW  B1
0348:  RETLW  B0
0349:  RETLW  AE
034A:  RETLW  AD
034B:  RETLW  AC
034C:  RETLW  AA
034D:  RETLW  A8
034E:  RETLW  A7
034F:  RETLW  A5
0350:  RETLW  A7
0351:  RETLW  AA
0352:  RETLW  AC
0353:  RETLW  AF
0354:  RETLW  B1
0355:  RETLW  B3
0356:  RETLW  5A
0357:  RETLW  5A
0358:  RETLW  5A
0359:  RETLW  5A
035A:  RETLW  5A
035B:  RETLW  61
035C:  RETLW  67
035D:  RETLW  6D
035E:  RETLW  73
035F:  RETLW  78
0360:  RETLW  7E
0361:  RETLW  82
0362:  RETLW  87
0363:  RETLW  8C
0364:  RETLW  90
0365:  RETLW  95
0366:  RETLW  99
0367:  RETLW  9D
0368:  RETLW  A2
0369:  RETLW  A6
036A:  RETLW  AB
036B:  RETLW  B0
036C:  RETLW  B4
036D:  RETLW  B8
036E:  RETLW  BC
036F:  RETLW  BB
0370:  RETLW  BA
0371:  RETLW  B9
0372:  RETLW  B8
0373:  RETLW  B7
0374:  RETLW  B6
0375:  RETLW  B4
0376:  RETLW  B3
0377:  RETLW  B2
0378:  RETLW  B0
0379:  RETLW  B3
037A:  RETLW  B5
037B:  RETLW  B8
037C:  RETLW  BB
037D:  RETLW  BD
037E:  RETLW  C0
037F:  RETLW  5E
0380:  RETLW  5E
0381:  RETLW  5E
0382:  RETLW  5E
0383:  RETLW  5E
0384:  RETLW  65
0385:  RETLW  6C
0386:  RETLW  72
0387:  RETLW  78
0388:  RETLW  7E
0389:  RETLW  83
038A:  RETLW  88
038B:  RETLW  8D
038C:  RETLW  92
038D:  RETLW  96
038E:  RETLW  9B
038F:  RETLW  9F
0390:  RETLW  A4
0391:  RETLW  A8
0392:  RETLW  AD
0393:  RETLW  B2
0394:  RETLW  B7
0395:  RETLW  BC
0396:  RETLW  C2
0397:  RETLW  C8
0398:  RETLW  C7
0399:  RETLW  C6
039A:  RETLW  C5
039B:  RETLW  C5
039C:  RETLW  C4
039D:  RETLW  C3
039E:  RETLW  C3
039F:  RETLW  C2
03A0:  RETLW  C1
03A1:  RETLW  C1
03A2:  RETLW  C3
03A3:  RETLW  C6
03A4:  RETLW  C9
03A5:  RETLW  CB
03A6:  RETLW  CE
03A7:  RETLW  D1
03A8:  RETLW  5E
03A9:  RETLW  5E
03AA:  RETLW  5E
03AB:  RETLW  5E
03AC:  RETLW  5E
03AD:  RETLW  65
03AE:  RETLW  6C
03AF:  RETLW  72
03B0:  RETLW  78
03B1:  RETLW  7E
03B2:  RETLW  83
03B3:  RETLW  88
03B4:  RETLW  8D
03B5:  RETLW  92
03B6:  RETLW  96
03B7:  RETLW  9B
03B8:  RETLW  9F
03B9:  RETLW  A4
03BA:  RETLW  A8
03BB:  RETLW  AD
03BC:  RETLW  B2
03BD:  RETLW  B7
03BE:  RETLW  BC
03BF:  RETLW  C2
03C0:  RETLW  C8
03C1:  RETLW  C7
03C2:  RETLW  C6
03C3:  RETLW  C5
03C4:  RETLW  C5
03C5:  RETLW  C4
03C6:  RETLW  C3
03C7:  RETLW  C3
03C8:  RETLW  C2
03C9:  RETLW  C1
03CA:  RETLW  C1
03CB:  RETLW  C3
03CC:  RETLW  C6
03CD:  RETLW  C9
03CE:  RETLW  CB
03CF:  RETLW  CE
03D0:  RETLW  D1
03D1:  RETLW  5E
03D2:  RETLW  5E
03D3:  RETLW  5E
03D4:  RETLW  5E
03D5:  RETLW  5E
03D6:  RETLW  65
03D7:  RETLW  6C
03D8:  RETLW  72
03D9:  RETLW  78
03DA:  RETLW  7E
03DB:  RETLW  83
03DC:  RETLW  88
03DD:  RETLW  8D
03DE:  RETLW  92
03DF:  RETLW  96
03E0:  RETLW  9B
03E1:  RETLW  9F
03E2:  RETLW  A4
03E3:  RETLW  A8
03E4:  RETLW  AD
03E5:  RETLW  B2
03E6:  RETLW  B7
03E7:  RETLW  BC
03E8:  RETLW  C2
03E9:  RETLW  C8
03EA:  RETLW  C7
03EB:  RETLW  C6
03EC:  RETLW  C5
03ED:  RETLW  C5
03EE:  RETLW  C4
03EF:  RETLW  C3
03F0:  RETLW  C3
03F1:  RETLW  C2
03F2:  RETLW  C1
03F3:  RETLW  C1
03F4:  RETLW  C3
03F5:  RETLW  C6
03F6:  RETLW  C9
03F7:  RETLW  CB
03F8:  RETLW  CE
03F9:  RETLW  D1
03FA:  RETLW  5E
03FB:  RETLW  5E
03FC:  RETLW  5E
03FD:  RETLW  5E
03FE:  RETLW  5E
03FF:  RETLW  65
0400:  RETLW  6C
0401:  RETLW  72
0402:  RETLW  78
0403:  RETLW  7E
0404:  RETLW  83
0405:  RETLW  88
0406:  RETLW  8D
0407:  RETLW  92
0408:  RETLW  96
0409:  RETLW  9B
040A:  RETLW  9F
040B:  RETLW  A4
040C:  RETLW  A8
040D:  RETLW  AD
040E:  RETLW  B2
040F:  RETLW  B7
0410:  RETLW  BC
0411:  RETLW  C2
0412:  RETLW  C8
0413:  RETLW  C7
0414:  RETLW  C6
0415:  RETLW  C5
0416:  RETLW  C5
0417:  RETLW  C4
0418:  RETLW  C3
0419:  RETLW  C3
041A:  RETLW  C2
041B:  RETLW  C1
041C:  RETLW  C1
041D:  RETLW  C3
041E:  RETLW  C6
041F:  RETLW  C9
0420:  RETLW  CB
0421:  RETLW  CE
0422:  RETLW  D1
0423:  BCF    0A.0
0424:  BCF    0A.1
0425:  BSF    0A.2
0426:  ADDLW  2A
0427:  BTFSC  03.0
0428:  INCF   0A,F
0429:  MOVWF  02
042A:  RETLW  5E
042B:  RETLW  5E
042C:  RETLW  5E
042D:  RETLW  5E
042E:  RETLW  5E
042F:  RETLW  65
0430:  RETLW  6C
0431:  RETLW  72
0432:  RETLW  78
0433:  RETLW  7E
0434:  RETLW  83
0435:  RETLW  88
0436:  RETLW  8D
0437:  RETLW  92
0438:  RETLW  96
0439:  RETLW  9B
043A:  RETLW  9F
043B:  RETLW  A4
043C:  RETLW  A8
043D:  RETLW  AD
043E:  RETLW  B2
043F:  RETLW  B7
0440:  RETLW  BC
0441:  RETLW  C2
0442:  RETLW  C8
0443:  RETLW  C7
0444:  RETLW  C6
0445:  RETLW  C5
0446:  RETLW  C5
0447:  RETLW  C4
0448:  RETLW  C3
0449:  RETLW  C3
044A:  RETLW  C2
044B:  RETLW  C1
044C:  RETLW  C1
044D:  RETLW  C3
044E:  RETLW  C6
044F:  RETLW  C9
0450:  RETLW  CB
0451:  RETLW  CE
0452:  RETLW  D1
0453:  RETLW  5E
0454:  RETLW  5E
0455:  RETLW  5E
0456:  RETLW  5E
0457:  RETLW  5E
0458:  RETLW  65
0459:  RETLW  6C
045A:  RETLW  72
045B:  RETLW  78
045C:  RETLW  7E
045D:  RETLW  83
045E:  RETLW  88
045F:  RETLW  8D
0460:  RETLW  92
0461:  RETLW  96
0462:  RETLW  9B
0463:  RETLW  9F
0464:  RETLW  A4
0465:  RETLW  A8
0466:  RETLW  AD
0467:  RETLW  B2
0468:  RETLW  B7
0469:  RETLW  BC
046A:  RETLW  C2
046B:  RETLW  C8
046C:  RETLW  C7
046D:  RETLW  C6
046E:  RETLW  C5
046F:  RETLW  C5
0470:  RETLW  C4
0471:  RETLW  C3
0472:  RETLW  C3
0473:  RETLW  C2
0474:  RETLW  C1
0475:  RETLW  C1
0476:  RETLW  C3
0477:  RETLW  C6
0478:  RETLW  C9
0479:  RETLW  CB
047A:  RETLW  CE
047B:  RETLW  D1
047C:  RETLW  5E
047D:  RETLW  5E
047E:  RETLW  5E
047F:  RETLW  5E
0480:  RETLW  5E
0481:  RETLW  65
0482:  RETLW  6C
0483:  RETLW  72
0484:  RETLW  78
0485:  RETLW  7E
0486:  RETLW  83
0487:  RETLW  88
0488:  RETLW  8D
0489:  RETLW  92
048A:  RETLW  96
048B:  RETLW  9B
048C:  RETLW  9F
048D:  RETLW  A4
048E:  RETLW  A8
048F:  RETLW  AD
0490:  RETLW  B2
0491:  RETLW  B7
0492:  RETLW  BC
0493:  RETLW  C2
0494:  RETLW  C8
0495:  RETLW  C7
0496:  RETLW  C6
0497:  RETLW  C5
0498:  RETLW  C5
0499:  RETLW  C4
049A:  RETLW  C3
049B:  RETLW  C3
049C:  RETLW  C2
049D:  RETLW  C1
049E:  RETLW  C1
049F:  RETLW  C3
04A0:  RETLW  C6
04A1:  RETLW  C9
04A2:  RETLW  CB
04A3:  RETLW  CE
04A4:  RETLW  D1
04A5:  RETLW  5E
04A6:  RETLW  5E
04A7:  RETLW  5E
04A8:  RETLW  5E
04A9:  RETLW  5E
04AA:  RETLW  65
04AB:  RETLW  6C
04AC:  RETLW  72
04AD:  RETLW  78
04AE:  RETLW  7E
04AF:  RETLW  83
04B0:  RETLW  88
04B1:  RETLW  8D
04B2:  RETLW  92
04B3:  RETLW  96
04B4:  RETLW  9B
04B5:  RETLW  9F
04B6:  RETLW  A4
04B7:  RETLW  A8
04B8:  RETLW  AD
04B9:  RETLW  B2
04BA:  RETLW  B7
04BB:  RETLW  BC
04BC:  RETLW  C2
04BD:  RETLW  C8
04BE:  RETLW  C7
04BF:  RETLW  C6
04C0:  RETLW  C5
04C1:  RETLW  C5
04C2:  RETLW  C4
04C3:  RETLW  C3
04C4:  RETLW  C3
04C5:  RETLW  C2
04C6:  RETLW  C1
04C7:  RETLW  C1
04C8:  RETLW  C3
04C9:  RETLW  C6
04CA:  RETLW  C9
04CB:  RETLW  CB
04CC:  RETLW  CE
04CD:  RETLW  D1
04CE:  RETLW  5E
04CF:  RETLW  5E
04D0:  RETLW  5E
04D1:  RETLW  5E
04D2:  RETLW  5E
04D3:  RETLW  65
04D4:  RETLW  6C
04D5:  RETLW  72
04D6:  RETLW  78
04D7:  RETLW  7E
04D8:  RETLW  83
04D9:  RETLW  88
04DA:  RETLW  8D
04DB:  RETLW  92
04DC:  RETLW  96
04DD:  RETLW  9B
04DE:  RETLW  9F
04DF:  RETLW  A4
04E0:  RETLW  A8
04E1:  RETLW  AD
04E2:  RETLW  B2
04E3:  RETLW  B7
04E4:  RETLW  BC
04E5:  RETLW  C2
04E6:  RETLW  C8
04E7:  RETLW  C7
04E8:  RETLW  C6
04E9:  RETLW  C5
04EA:  RETLW  C5
04EB:  RETLW  C4
04EC:  RETLW  C3
04ED:  RETLW  C3
04EE:  RETLW  C2
04EF:  RETLW  C1
04F0:  RETLW  C1
04F1:  RETLW  C3
04F2:  RETLW  C6
04F3:  RETLW  C9
04F4:  RETLW  CB
04F5:  RETLW  CE
04F6:  RETLW  D1
04F7:  RETLW  5E
04F8:  RETLW  5E
04F9:  RETLW  5E
04FA:  RETLW  5E
04FB:  RETLW  5E
04FC:  RETLW  65
04FD:  RETLW  6C
04FE:  RETLW  72
04FF:  RETLW  78
0500:  RETLW  7E
0501:  RETLW  83
0502:  RETLW  88
0503:  RETLW  8D
0504:  RETLW  92
0505:  RETLW  96
0506:  RETLW  9B
0507:  RETLW  9F
0508:  RETLW  A4
0509:  RETLW  A8
050A:  RETLW  AD
050B:  RETLW  B2
050C:  RETLW  B7
050D:  RETLW  BC
050E:  RETLW  C2
050F:  RETLW  C8
0510:  RETLW  C7
0511:  RETLW  C6
0512:  RETLW  C5
0513:  RETLW  C5
0514:  RETLW  C4
0515:  RETLW  C3
0516:  RETLW  C3
0517:  RETLW  C2
0518:  RETLW  C1
0519:  RETLW  C1
051A:  RETLW  C3
051B:  RETLW  C6
051C:  RETLW  C9
051D:  RETLW  CB
051E:  RETLW  CE
051F:  RETLW  D1
0520:  BSF    0A.0
0521:  BCF    0A.1
0522:  BSF    0A.2
0523:  ADDWF  02,F
0524:  RETLW  5E
0525:  RETLW  5E
0526:  RETLW  5E
0527:  RETLW  5E
0528:  RETLW  5E
0529:  RETLW  65
052A:  RETLW  6C
052B:  RETLW  72
052C:  RETLW  78
052D:  RETLW  7E
052E:  RETLW  83
052F:  RETLW  88
0530:  RETLW  8D
0531:  RETLW  92
0532:  RETLW  96
0533:  RETLW  9B
0534:  RETLW  9F
0535:  RETLW  A4
0536:  RETLW  A8
0537:  RETLW  AD
0538:  RETLW  B2
0539:  RETLW  B7
053A:  RETLW  BC
053B:  RETLW  C2
053C:  RETLW  C8
053D:  RETLW  C7
053E:  RETLW  C6
053F:  RETLW  C5
0540:  RETLW  C5
0541:  RETLW  C4
0542:  RETLW  C3
0543:  RETLW  C3
0544:  RETLW  C2
0545:  RETLW  C1
0546:  RETLW  C1
0547:  RETLW  C3
0548:  RETLW  C6
0549:  RETLW  C9
054A:  RETLW  CB
054B:  RETLW  CE
054C:  RETLW  D1
054D:  RETLW  5E
054E:  RETLW  5E
054F:  RETLW  5E
0550:  RETLW  5E
0551:  RETLW  5E
0552:  RETLW  65
0553:  RETLW  6C
0554:  RETLW  72
0555:  RETLW  78
0556:  RETLW  7E
0557:  RETLW  83
0558:  RETLW  88
0559:  RETLW  8D
055A:  RETLW  92
055B:  RETLW  96
055C:  RETLW  9B
055D:  RETLW  9F
055E:  RETLW  A4
055F:  RETLW  A8
0560:  RETLW  AD
0561:  RETLW  B2
0562:  RETLW  B7
0563:  RETLW  BC
0564:  RETLW  C2
0565:  RETLW  C8
0566:  RETLW  C7
0567:  RETLW  C6
0568:  RETLW  C5
0569:  RETLW  C5
056A:  RETLW  C4
056B:  RETLW  C3
056C:  RETLW  C3
056D:  RETLW  C2
056E:  RETLW  C1
056F:  RETLW  C1
0570:  RETLW  C3
0571:  RETLW  C6
0572:  RETLW  C9
0573:  RETLW  CB
0574:  RETLW  CE
0575:  RETLW  D1
0576:  RETLW  5E
0577:  RETLW  5E
0578:  RETLW  5E
0579:  RETLW  5E
057A:  RETLW  5E
057B:  RETLW  65
057C:  RETLW  6C
057D:  RETLW  72
057E:  RETLW  78
057F:  RETLW  7E
0580:  RETLW  83
0581:  RETLW  88
0582:  RETLW  8D
0583:  RETLW  92
0584:  RETLW  96
0585:  RETLW  9B
0586:  RETLW  9F
0587:  RETLW  A4
0588:  RETLW  A8
0589:  RETLW  AD
058A:  RETLW  B2
058B:  RETLW  B7
058C:  RETLW  BC
058D:  RETLW  C2
058E:  RETLW  C8
058F:  RETLW  C7
0590:  RETLW  C6
0591:  RETLW  C5
0592:  RETLW  C5
0593:  RETLW  C4
0594:  RETLW  C3
0595:  RETLW  C3
0596:  RETLW  C2
0597:  RETLW  C1
0598:  RETLW  C1
0599:  RETLW  C3
059A:  RETLW  C6
059B:  RETLW  C9
059C:  RETLW  CB
059D:  RETLW  CE
059E:  RETLW  D1
059F:  RETLW  5E
05A0:  RETLW  5E
05A1:  RETLW  5E
05A2:  RETLW  5E
05A3:  RETLW  5E
05A4:  RETLW  65
05A5:  RETLW  6C
05A6:  RETLW  72
05A7:  RETLW  78
05A8:  RETLW  7E
05A9:  RETLW  83
05AA:  RETLW  88
05AB:  RETLW  8D
05AC:  RETLW  92
05AD:  RETLW  96
05AE:  RETLW  9B
05AF:  RETLW  9F
05B0:  RETLW  A4
05B1:  RETLW  A8
05B2:  RETLW  AD
05B3:  RETLW  B2
05B4:  RETLW  B7
05B5:  RETLW  BC
05B6:  RETLW  C2
05B7:  RETLW  C8
05B8:  RETLW  C7
05B9:  RETLW  C6
05BA:  RETLW  C5
05BB:  RETLW  C5
05BC:  RETLW  C4
05BD:  RETLW  C3
05BE:  RETLW  C3
05BF:  RETLW  C2
05C0:  RETLW  C1
05C1:  RETLW  C1
05C2:  RETLW  C3
05C3:  RETLW  C6
05C4:  RETLW  C9
05C5:  RETLW  CB
05C6:  RETLW  CE
05C7:  RETLW  D1
05C8:  RETLW  5E
05C9:  RETLW  5E
05CA:  RETLW  5E
05CB:  RETLW  5E
05CC:  RETLW  5E
05CD:  RETLW  65
05CE:  RETLW  6C
05CF:  RETLW  72
05D0:  RETLW  78
05D1:  RETLW  7E
05D2:  RETLW  83
05D3:  RETLW  88
05D4:  RETLW  8D
05D5:  RETLW  92
05D6:  RETLW  96
05D7:  RETLW  9B
05D8:  RETLW  9F
05D9:  RETLW  A4
05DA:  RETLW  A8
05DB:  RETLW  AD
05DC:  RETLW  B2
05DD:  RETLW  B7
05DE:  RETLW  BC
05DF:  RETLW  C2
05E0:  RETLW  C8
05E1:  RETLW  C7
05E2:  RETLW  C6
05E3:  RETLW  C5
05E4:  RETLW  C5
05E5:  RETLW  C4
05E6:  RETLW  C3
05E7:  RETLW  C3
05E8:  RETLW  C2
05E9:  RETLW  C1
05EA:  RETLW  C1
05EB:  RETLW  C3
05EC:  RETLW  C6
05ED:  RETLW  C9
05EE:  RETLW  CB
05EF:  RETLW  CE
05F0:  RETLW  D1
05F1:  MOVLW  80
05F2:  BTFSS  03.1
05F3:  GOTO   5F7
05F4:  BSF    03.5
05F5:  XORWF  40,F
05F6:  BCF    03.5
05F7:  BSF    03.5
05F8:  CLRF   45
05F9:  CLRF   46
05FA:  MOVF   3C,W
05FB:  MOVWF  44
05FC:  MOVF   40,W
05FD:  XORWF  44,F
05FE:  MOVF   3B,W
05FF:  BTFSC  03.2
0600:  GOTO   6E5
0601:  MOVWF  43
0602:  MOVWF  77
0603:  MOVF   3F,W
0604:  BTFSC  03.2
0605:  GOTO   6EE
0606:  SUBWF  43,F
0607:  BTFSC  03.2
0608:  GOTO   68A
0609:  BTFSS  03.0
060A:  GOTO   648
060B:  MOVF   40,W
060C:  MOVWF  49
060D:  BSF    49.7
060E:  MOVF   41,W
060F:  MOVWF  48
0610:  MOVF   42,W
0611:  MOVWF  47
0612:  CLRF   46
0613:  BCF    03.0
0614:  RRF    49,F
0615:  RRF    48,F
0616:  RRF    47,F
0617:  RRF    46,F
0618:  DECFSZ 43,F
0619:  GOTO   612
061A:  BTFSS  44.7
061B:  GOTO   61F
061C:  BSF    45.0
061D:  GOTO   702
061E:  BCF    45.0
061F:  BCF    43.0
0620:  BSF    45.4
0621:  MOVLW  BE
0622:  MOVWF  04
0623:  BCF    03.7
0624:  GOTO   717
0625:  BCF    45.4
0626:  BTFSC  44.7
0627:  GOTO   632
0628:  BTFSS  43.0
0629:  GOTO   63D
062A:  RRF    49,F
062B:  RRF    48,F
062C:  RRF    47,F
062D:  RRF    46,F
062E:  INCF   77,F
062F:  BTFSC  03.2
0630:  GOTO   6FD
0631:  GOTO   63D
0632:  BTFSC  49.7
0633:  GOTO   640
0634:  BCF    03.0
0635:  RLF    46,F
0636:  RLF    47,F
0637:  RLF    48,F
0638:  RLF    49,F
0639:  DECF   77,F
063A:  BTFSC  03.2
063B:  GOTO   6FD
063C:  GOTO   632
063D:  BSF    45.6
063E:  GOTO   6AA
063F:  BCF    45.6
0640:  MOVF   3C,W
0641:  MOVWF  44
0642:  BTFSS  44.7
0643:  GOTO   646
0644:  BSF    49.7
0645:  GOTO   6F6
0646:  BCF    49.7
0647:  GOTO   6F6
0648:  MOVF   3F,W
0649:  MOVWF  43
064A:  MOVWF  77
064B:  MOVF   3B,W
064C:  SUBWF  43,F
064D:  MOVF   3C,W
064E:  MOVWF  49
064F:  BSF    49.7
0650:  MOVF   3D,W
0651:  MOVWF  48
0652:  MOVF   3E,W
0653:  MOVWF  47
0654:  CLRF   46
0655:  BCF    03.0
0656:  RRF    49,F
0657:  RRF    48,F
0658:  RRF    47,F
0659:  RRF    46,F
065A:  DECFSZ 43,F
065B:  GOTO   654
065C:  BTFSS  44.7
065D:  GOTO   661
065E:  BSF    45.1
065F:  GOTO   702
0660:  BCF    45.1
0661:  BCF    43.0
0662:  BSF    45.5
0663:  MOVLW  C2
0664:  MOVWF  04
0665:  BCF    03.7
0666:  GOTO   717
0667:  BCF    45.5
0668:  BTFSC  44.7
0669:  GOTO   674
066A:  BTFSS  43.0
066B:  GOTO   67F
066C:  RRF    49,F
066D:  RRF    48,F
066E:  RRF    47,F
066F:  RRF    46,F
0670:  INCF   77,F
0671:  BTFSC  03.2
0672:  GOTO   6FD
0673:  GOTO   67F
0674:  BTFSC  49.7
0675:  GOTO   682
0676:  BCF    03.0
0677:  RLF    46,F
0678:  RLF    47,F
0679:  RLF    48,F
067A:  RLF    49,F
067B:  DECF   77,F
067C:  BTFSC  03.2
067D:  GOTO   6FD
067E:  GOTO   674
067F:  BSF    45.7
0680:  GOTO   6AA
0681:  BCF    45.7
0682:  MOVF   40,W
0683:  MOVWF  44
0684:  BTFSS  44.7
0685:  GOTO   688
0686:  BSF    49.7
0687:  GOTO   6F6
0688:  BCF    49.7
0689:  GOTO   6F6
068A:  MOVF   40,W
068B:  MOVWF  49
068C:  BSF    49.7
068D:  MOVF   41,W
068E:  MOVWF  48
068F:  MOVF   42,W
0690:  MOVWF  47
0691:  BTFSS  44.7
0692:  GOTO   697
0693:  BCF    49.7
0694:  BSF    45.2
0695:  GOTO   702
0696:  BCF    45.2
0697:  CLRF   46
0698:  BCF    43.0
0699:  MOVLW  BE
069A:  MOVWF  04
069B:  BCF    03.7
069C:  GOTO   717
069D:  BTFSC  44.7
069E:  GOTO   6C0
069F:  MOVF   3C,W
06A0:  MOVWF  44
06A1:  BTFSS  43.0
06A2:  GOTO   6AA
06A3:  RRF    49,F
06A4:  RRF    48,F
06A5:  RRF    47,F
06A6:  RRF    46,F
06A7:  INCF   77,F
06A8:  BTFSC  03.2
06A9:  GOTO   6FD
06AA:  BTFSS  46.7
06AB:  GOTO   6BB
06AC:  INCF   47,F
06AD:  BTFSS  03.2
06AE:  GOTO   6BB
06AF:  INCF   48,F
06B0:  BTFSS  03.2
06B1:  GOTO   6BB
06B2:  INCF   49,F
06B3:  BTFSS  03.2
06B4:  GOTO   6BB
06B5:  RRF    49,F
06B6:  RRF    48,F
06B7:  RRF    47,F
06B8:  INCF   77,F
06B9:  BTFSC  03.2
06BA:  GOTO   6FD
06BB:  BTFSC  45.6
06BC:  GOTO   63F
06BD:  BTFSC  45.7
06BE:  GOTO   681
06BF:  GOTO   6DF
06C0:  MOVLW  80
06C1:  XORWF  49,F
06C2:  BTFSS  49.7
06C3:  GOTO   6C8
06C4:  GOTO   702
06C5:  MOVF   40,W
06C6:  MOVWF  44
06C7:  GOTO   6D5
06C8:  MOVF   3C,W
06C9:  MOVWF  44
06CA:  MOVF   49,F
06CB:  BTFSS  03.2
06CC:  GOTO   6D5
06CD:  MOVF   48,F
06CE:  BTFSS  03.2
06CF:  GOTO   6D5
06D0:  MOVF   47,F
06D1:  BTFSS  03.2
06D2:  GOTO   6D5
06D3:  CLRF   77
06D4:  GOTO   6F6
06D5:  BTFSC  49.7
06D6:  GOTO   6DF
06D7:  BCF    03.0
06D8:  RLF    46,F
06D9:  RLF    47,F
06DA:  RLF    48,F
06DB:  RLF    49,F
06DC:  DECFSZ 77,F
06DD:  GOTO   6D5
06DE:  GOTO   6FD
06DF:  BTFSS  44.7
06E0:  GOTO   6E3
06E1:  BSF    49.7
06E2:  GOTO   6F6
06E3:  BCF    49.7
06E4:  GOTO   6F6
06E5:  MOVF   3F,W
06E6:  MOVWF  77
06E7:  MOVF   40,W
06E8:  MOVWF  49
06E9:  MOVF   41,W
06EA:  MOVWF  48
06EB:  MOVF   42,W
06EC:  MOVWF  47
06ED:  GOTO   6F6
06EE:  MOVF   3B,W
06EF:  MOVWF  77
06F0:  MOVF   3C,W
06F1:  MOVWF  49
06F2:  MOVF   3D,W
06F3:  MOVWF  48
06F4:  MOVF   3E,W
06F5:  MOVWF  47
06F6:  MOVF   49,W
06F7:  MOVWF  78
06F8:  MOVF   48,W
06F9:  MOVWF  79
06FA:  MOVF   47,W
06FB:  MOVWF  7A
06FC:  GOTO   735
06FD:  CLRF   77
06FE:  CLRF   78
06FF:  CLRF   79
0700:  CLRF   7A
0701:  GOTO   735
0702:  CLRF   46
0703:  COMF   47,F
0704:  COMF   48,F
0705:  COMF   49,F
0706:  COMF   46,F
0707:  INCF   46,F
0708:  BTFSS  03.2
0709:  GOTO   710
070A:  INCF   47,F
070B:  BTFSS  03.2
070C:  GOTO   710
070D:  INCF   48,F
070E:  BTFSC  03.2
070F:  INCF   49,F
0710:  BTFSC  45.0
0711:  GOTO   61E
0712:  BTFSC  45.1
0713:  GOTO   660
0714:  BTFSC  45.2
0715:  GOTO   696
0716:  GOTO   6C5
0717:  MOVF   00,W
0718:  ADDWF  47,F
0719:  BTFSS  03.0
071A:  GOTO   721
071B:  INCF   48,F
071C:  BTFSS  03.2
071D:  GOTO   721
071E:  INCF   49,F
071F:  BTFSC  03.2
0720:  BSF    43.0
0721:  DECF   04,F
0722:  MOVF   00,W
0723:  ADDWF  48,F
0724:  BTFSS  03.0
0725:  GOTO   729
0726:  INCF   49,F
0727:  BTFSC  03.2
0728:  BSF    43.0
0729:  DECF   04,F
072A:  MOVF   00,W
072B:  BTFSS  00.7
072C:  XORLW  80
072D:  ADDWF  49,F
072E:  BTFSC  03.0
072F:  BSF    43.0
0730:  BTFSC  45.4
0731:  GOTO   625
0732:  BTFSC  45.5
0733:  GOTO   667
0734:  GOTO   69D
0735:  BCF    03.5
0736:  RETURN
*
077A:  DATA 54,1D
077B:  DATA A0,12
077C:  DATA 66,16
077D:  DATA 20,32
077E:  DATA 54,1D
077F:  DATA A0,12
0780:  DATA 66,16
0781:  DATA A0,37
0782:  DATA 75,3A
0783:  DATA BA,12
0784:  DATA 75,05
0785:  DATA 80,2C
*
079A:  MOVLW  8E
079B:  MOVWF  77
079C:  BSF    03.5
079D:  MOVF   29,W
079E:  MOVWF  78
079F:  MOVF   28,W
07A0:  MOVWF  79
07A1:  CLRF   7A
07A2:  MOVF   78,F
07A3:  BTFSS  03.2
07A4:  GOTO   7AF
07A5:  MOVF   79,W
07A6:  MOVWF  78
07A7:  CLRF   79
07A8:  MOVLW  08
07A9:  SUBWF  77,F
07AA:  MOVF   78,F
07AB:  BTFSS  03.2
07AC:  GOTO   7AF
07AD:  CLRF   77
07AE:  GOTO   7B7
07AF:  BCF    03.0
07B0:  BTFSC  78.7
07B1:  GOTO   7B6
07B2:  RLF    79,F
07B3:  RLF    78,F
07B4:  DECF   77,F
07B5:  GOTO   7AF
07B6:  BCF    78.7
07B7:  BCF    03.5
07B8:  RETURN
07B9:  MOVLW  8E
07BA:  MOVWF  77
07BB:  MOVF   7C,W
07BC:  MOVWF  78
07BD:  MOVF   7B,W
07BE:  MOVWF  79
07BF:  CLRF   7A
07C0:  BTFSS  7C.7
07C1:  GOTO   7C7
07C2:  COMF   78,F
07C3:  COMF   79,F
07C4:  INCF   79,F
07C5:  BTFSC  03.2
07C6:  INCF   78,F
07C7:  MOVF   78,F
07C8:  BTFSS  03.2
07C9:  GOTO   7D4
07CA:  MOVF   79,W
07CB:  MOVWF  78
07CC:  CLRF   79
07CD:  MOVLW  08
07CE:  SUBWF  77,F
07CF:  MOVF   78,F
07D0:  BTFSS  03.2
07D1:  GOTO   7D4
07D2:  CLRF   77
07D3:  GOTO   7DD
07D4:  BCF    03.0
07D5:  BTFSC  78.7
07D6:  GOTO   7DB
07D7:  RLF    79,F
07D8:  RLF    78,F
07D9:  DECF   77,F
07DA:  GOTO   7D4
07DB:  BTFSS  7C.7
07DC:  BCF    78.7
07DD:  RETURN
07DE:  MOVLW  8E
07DF:  MOVWF  77
07E0:  BSF    03.5
07E1:  MOVF   20,W
07E2:  SUBWF  77,F
07E3:  MOVF   21,W
07E4:  MOVWF  79
07E5:  MOVF   22,W
07E6:  MOVWF  78
07E7:  BSF    79.7
07E8:  MOVF   77,F
07E9:  BTFSC  03.2
07EA:  GOTO   7F6
07EB:  BCF    03.0
07EC:  MOVF   79,F
07ED:  BTFSS  03.2
07EE:  GOTO   7F2
07EF:  MOVF   78,F
07F0:  BTFSC  03.2
07F1:  GOTO   7F6
07F2:  RRF    79,F
07F3:  RRF    78,F
07F4:  DECFSZ 77,F
07F5:  GOTO   7EB
07F6:  BTFSS  21.7
07F7:  GOTO   7FD
07F8:  COMF   78,F
07F9:  COMF   79,F
07FA:  INCF   78,F
07FB:  BTFSC  03.2
07FC:  INCF   79,F
07FD:  BCF    03.5
07FE:  RETURN
*
0800:  BSF    03.5
0801:  MOVF   28,W
0802:  BTFSC  03.2
0803:  GOTO   071
0804:  MOVWF  30
0805:  MOVF   2C,W
0806:  BTFSC  03.2
0807:  GOTO   071
0808:  ADDWF  30,F
0809:  BTFSC  03.0
080A:  GOTO   012
080B:  MOVLW  7F
080C:  SUBWF  30,F
080D:  BTFSS  03.0
080E:  GOTO   071
080F:  BTFSC  03.2
0810:  GOTO   071
0811:  GOTO   016
0812:  MOVLW  81
0813:  ADDWF  30,F
0814:  BTFSC  03.0
0815:  GOTO   071
0816:  MOVF   30,W
0817:  MOVWF  77
0818:  CLRF   78
0819:  CLRF   79
081A:  CLRF   7A
081B:  MOVF   29,W
081C:  MOVWF  34
081D:  BSF    34.7
081E:  MOVF   2A,W
081F:  MOVWF  33
0820:  MOVF   2B,W
0821:  MOVWF  32
0822:  MOVLW  18
0823:  MOVWF  30
0824:  CLRF   31
0825:  BTFSS  32.0
0826:  GOTO   03F
0827:  MOVF   2F,W
0828:  ADDWF  7A,F
0829:  BTFSS  03.0
082A:  GOTO   031
082B:  INCF   79,F
082C:  BTFSS  03.2
082D:  GOTO   031
082E:  INCF   78,F
082F:  BTFSC  03.2
0830:  BSF    31.7
0831:  MOVF   2E,W
0832:  ADDWF  79,F
0833:  BTFSS  03.0
0834:  GOTO   038
0835:  INCF   78,F
0836:  BTFSC  03.2
0837:  BSF    31.7
0838:  MOVF   2D,W
0839:  MOVWF  2A
083A:  BSF    2A.7
083B:  MOVF   2A,W
083C:  ADDWF  78,F
083D:  BTFSC  03.0
083E:  BSF    31.7
083F:  RLF    31,F
0840:  RRF    78,F
0841:  RRF    79,F
0842:  RRF    7A,F
0843:  RRF    34,F
0844:  RRF    33,F
0845:  RRF    32,F
0846:  BCF    03.0
0847:  DECFSZ 30,F
0848:  GOTO   024
0849:  MOVLW  01
084A:  ADDWF  77,F
084B:  BTFSC  03.0
084C:  GOTO   071
084D:  BTFSC  78.7
084E:  GOTO   056
084F:  RLF    34,F
0850:  RLF    7A,F
0851:  RLF    79,F
0852:  RLF    78,F
0853:  DECF   77,F
0854:  BTFSC  03.2
0855:  GOTO   071
0856:  BTFSS  34.7
0857:  GOTO   067
0858:  INCF   7A,F
0859:  BTFSS  03.2
085A:  GOTO   067
085B:  INCF   79,F
085C:  BTFSS  03.2
085D:  GOTO   067
085E:  INCF   78,F
085F:  BTFSS  03.2
0860:  GOTO   067
0861:  RRF    78,F
0862:  RRF    79,F
0863:  RRF    7A,F
0864:  INCF   77,F
0865:  BTFSC  03.2
0866:  GOTO   071
0867:  MOVF   29,W
0868:  MOVWF  31
0869:  MOVF   2D,W
086A:  XORWF  31,F
086B:  BTFSS  31.7
086C:  GOTO   06F
086D:  BSF    78.7
086E:  GOTO   075
086F:  BCF    78.7
0870:  GOTO   075
0871:  CLRF   77
0872:  CLRF   78
0873:  CLRF   79
0874:  CLRF   7A
0875:  BCF    03.5
0876:  RETURN
0877:  BSF    03.5
0878:  MOVF   28,W
0879:  BTFSC  03.2
087A:  GOTO   13D
087B:  MOVWF  34
087C:  MOVF   2C,W
087D:  BTFSC  03.2
087E:  GOTO   13D
087F:  SUBWF  34,F
0880:  BTFSS  03.0
0881:  GOTO   087
0882:  MOVLW  7F
0883:  ADDWF  34,F
0884:  BTFSC  03.0
0885:  GOTO   13D
0886:  GOTO   08D
0887:  MOVLW  81
0888:  SUBWF  34,F
0889:  BTFSS  03.0
088A:  GOTO   13D
088B:  BTFSC  03.2
088C:  GOTO   13D
088D:  MOVF   34,W
088E:  MOVWF  77
088F:  CLRF   78
0890:  CLRF   79
0891:  CLRF   7A
0892:  CLRF   33
0893:  MOVF   29,W
0894:  MOVWF  32
0895:  BSF    32.7
0896:  MOVF   2A,W
0897:  MOVWF  31
0898:  MOVF   2B,W
0899:  MOVWF  30
089A:  MOVLW  19
089B:  MOVWF  34
089C:  MOVF   2F,W
089D:  SUBWF  30,F
089E:  BTFSC  03.0
089F:  GOTO   0B0
08A0:  MOVLW  01
08A1:  SUBWF  31,F
08A2:  BTFSC  03.0
08A3:  GOTO   0B0
08A4:  SUBWF  32,F
08A5:  BTFSC  03.0
08A6:  GOTO   0B0
08A7:  SUBWF  33,F
08A8:  BTFSC  03.0
08A9:  GOTO   0B0
08AA:  INCF   33,F
08AB:  INCF   32,F
08AC:  INCF   31,F
08AD:  MOVF   2F,W
08AE:  ADDWF  30,F
08AF:  GOTO   0E2
08B0:  MOVF   2E,W
08B1:  SUBWF  31,F
08B2:  BTFSC  03.0
08B3:  GOTO   0CB
08B4:  MOVLW  01
08B5:  SUBWF  32,F
08B6:  BTFSC  03.0
08B7:  GOTO   0CB
08B8:  SUBWF  33,F
08B9:  BTFSC  03.0
08BA:  GOTO   0CB
08BB:  INCF   33,F
08BC:  INCF   32,F
08BD:  MOVF   2E,W
08BE:  ADDWF  31,F
08BF:  MOVF   2F,W
08C0:  ADDWF  30,F
08C1:  BTFSS  03.0
08C2:  GOTO   0E2
08C3:  INCF   31,F
08C4:  BTFSS  03.2
08C5:  GOTO   0E2
08C6:  INCF   32,F
08C7:  BTFSS  03.2
08C8:  GOTO   0E2
08C9:  INCF   33,F
08CA:  GOTO   0E2
08CB:  MOVF   2D,W
08CC:  IORLW  80
08CD:  SUBWF  32,F
08CE:  BTFSC  03.0
08CF:  GOTO   0E1
08D0:  MOVLW  01
08D1:  SUBWF  33,F
08D2:  BTFSC  03.0
08D3:  GOTO   0E1
08D4:  INCF   33,F
08D5:  MOVF   2D,W
08D6:  IORLW  80
08D7:  ADDWF  32,F
08D8:  MOVF   2E,W
08D9:  ADDWF  31,F
08DA:  BTFSS  03.0
08DB:  GOTO   0BF
08DC:  INCF   32,F
08DD:  BTFSS  03.2
08DE:  GOTO   0BF
08DF:  INCF   33,F
08E0:  GOTO   0BF
08E1:  BSF    7A.0
08E2:  DECFSZ 34,F
08E3:  GOTO   0E5
08E4:  GOTO   0F0
08E5:  BCF    03.0
08E6:  RLF    30,F
08E7:  RLF    31,F
08E8:  RLF    32,F
08E9:  RLF    33,F
08EA:  BCF    03.0
08EB:  RLF    7A,F
08EC:  RLF    79,F
08ED:  RLF    78,F
08EE:  RLF    35,F
08EF:  GOTO   09C
08F0:  BTFSS  35.0
08F1:  GOTO   0F8
08F2:  BCF    03.0
08F3:  RRF    78,F
08F4:  RRF    79,F
08F5:  RRF    7A,F
08F6:  RRF    35,F
08F7:  GOTO   0FB
08F8:  DECF   77,F
08F9:  BTFSC  03.2
08FA:  GOTO   13D
08FB:  BTFSC  35.7
08FC:  GOTO   124
08FD:  BCF    03.0
08FE:  RLF    30,F
08FF:  RLF    31,F
0900:  RLF    32,F
0901:  RLF    33,F
0902:  MOVF   2F,W
0903:  SUBWF  30,F
0904:  BTFSC  03.0
0905:  GOTO   110
0906:  MOVLW  01
0907:  SUBWF  31,F
0908:  BTFSC  03.0
0909:  GOTO   110
090A:  SUBWF  32,F
090B:  BTFSC  03.0
090C:  GOTO   110
090D:  SUBWF  33,F
090E:  BTFSS  03.0
090F:  GOTO   133
0910:  MOVF   2E,W
0911:  SUBWF  31,F
0912:  BTFSC  03.0
0913:  GOTO   11B
0914:  MOVLW  01
0915:  SUBWF  32,F
0916:  BTFSC  03.0
0917:  GOTO   11B
0918:  SUBWF  33,F
0919:  BTFSS  03.0
091A:  GOTO   133
091B:  MOVF   2D,W
091C:  IORLW  80
091D:  SUBWF  32,F
091E:  BTFSC  03.0
091F:  GOTO   124
0920:  MOVLW  01
0921:  SUBWF  33,F
0922:  BTFSS  03.0
0923:  GOTO   133
0924:  INCF   7A,F
0925:  BTFSS  03.2
0926:  GOTO   133
0927:  INCF   79,F
0928:  BTFSS  03.2
0929:  GOTO   133
092A:  INCF   78,F
092B:  BTFSS  03.2
092C:  GOTO   133
092D:  INCF   77,F
092E:  BTFSC  03.2
092F:  GOTO   13D
0930:  RRF    78,F
0931:  RRF    79,F
0932:  RRF    7A,F
0933:  MOVF   29,W
0934:  MOVWF  34
0935:  MOVF   2D,W
0936:  XORWF  34,F
0937:  BTFSS  34.7
0938:  GOTO   13B
0939:  BSF    78.7
093A:  GOTO   141
093B:  BCF    78.7
093C:  GOTO   141
093D:  CLRF   77
093E:  CLRF   78
093F:  CLRF   79
0940:  CLRF   7A
0941:  BCF    03.5
0942:  RETURN
*
0A1E:  MOVF   7C,W
0A1F:  MOVWF  24
0A20:  MOVF   21,W
0A21:  XORWF  24,F
0A22:  BTFSS  24.7
0A23:  GOTO   229
0A24:  BCF    03.2
0A25:  BCF    03.0
0A26:  BTFSC  7C.7
0A27:  BSF    03.0
0A28:  GOTO   25C
0A29:  MOVF   7C,W
0A2A:  MOVWF  24
0A2B:  MOVF   20,W
0A2C:  MOVWF  25
0A2D:  MOVF   7B,W
0A2E:  SUBWF  25,F
0A2F:  BTFSC  03.2
0A30:  GOTO   237
0A31:  BTFSS  24.7
0A32:  GOTO   25C
0A33:  MOVF   03,W
0A34:  XORLW  01
0A35:  MOVWF  03
0A36:  GOTO   25C
0A37:  MOVF   21,W
0A38:  MOVWF  25
0A39:  MOVF   7C,W
0A3A:  SUBWF  25,F
0A3B:  BTFSC  03.2
0A3C:  GOTO   243
0A3D:  BTFSS  24.7
0A3E:  GOTO   25C
0A3F:  MOVF   03,W
0A40:  XORLW  01
0A41:  MOVWF  03
0A42:  GOTO   25C
0A43:  MOVF   22,W
0A44:  MOVWF  25
0A45:  MOVF   7D,W
0A46:  SUBWF  25,F
0A47:  BTFSC  03.2
0A48:  GOTO   24F
0A49:  BTFSS  24.7
0A4A:  GOTO   25C
0A4B:  MOVF   03,W
0A4C:  XORLW  01
0A4D:  MOVWF  03
0A4E:  GOTO   25C
0A4F:  MOVF   23,W
0A50:  MOVWF  25
0A51:  MOVF   7E,W
0A52:  SUBWF  25,F
0A53:  BTFSC  03.2
0A54:  GOTO   25B
0A55:  BTFSS  24.7
0A56:  GOTO   25C
0A57:  MOVF   03,W
0A58:  XORLW  01
0A59:  MOVWF  03
0A5A:  GOTO   25C
0A5B:  BCF    03.0
*
0D33:  MOVF   54,W
0D34:  CLRF   78
0D35:  SUBWF  53,W
0D36:  BTFSC  03.0
0D37:  GOTO   53B
0D38:  MOVF   53,W
0D39:  MOVWF  77
0D3A:  GOTO   547
0D3B:  CLRF   77
0D3C:  MOVLW  08
0D3D:  MOVWF  55
0D3E:  RLF    53,F
0D3F:  RLF    77,F
0D40:  MOVF   54,W
0D41:  SUBWF  77,W
0D42:  BTFSC  03.0
0D43:  MOVWF  77
0D44:  RLF    78,F
0D45:  DECFSZ 55,F
0D46:  GOTO   53E
0D47:  RETURN
*
0E0E:  CLRF   77
0E0F:  CLRF   78
0E10:  BSF    03.5
0E11:  MOVF   22,W
0E12:  BCF    03.0
0E13:  BTFSC  23.0
0E14:  ADDWF  77,F
0E15:  RRF    77,F
0E16:  RRF    78,F
0E17:  BTFSC  23.1
0E18:  ADDWF  77,F
0E19:  RRF    77,F
0E1A:  RRF    78,F
0E1B:  BTFSC  23.2
0E1C:  ADDWF  77,F
0E1D:  RRF    77,F
0E1E:  RRF    78,F
0E1F:  BTFSC  23.3
0E20:  ADDWF  77,F
0E21:  RRF    77,F
0E22:  RRF    78,F
0E23:  BTFSC  23.4
0E24:  ADDWF  77,F
0E25:  RRF    77,F
0E26:  RRF    78,F
0E27:  BTFSC  23.5
0E28:  ADDWF  77,F
0E29:  RRF    77,F
0E2A:  RRF    78,F
0E2B:  BTFSC  23.6
0E2C:  ADDWF  77,F
0E2D:  RRF    77,F
0E2E:  RRF    78,F
0E2F:  BTFSC  23.7
0E30:  ADDWF  77,F
0E31:  RRF    77,F
0E32:  RRF    78,F
0E33:  BCF    03.5
0E34:  RETURN
0E35:  BTFSC  03.1
0E36:  GOTO   63A
0E37:  MOVLW  5C
0E38:  MOVWF  04
0E39:  BCF    03.7
0E3A:  CLRF   77
0E3B:  CLRF   78
0E3C:  CLRF   79
0E3D:  CLRF   7A
0E3E:  CLRF   5C
0E3F:  CLRF   5D
0E40:  CLRF   5E
0E41:  CLRF   5F
0E42:  MOVF   5B,W
0E43:  IORWF  5A,W
0E44:  IORWF  59,W
0E45:  IORWF  58,W
0E46:  BTFSC  03.2
0E47:  GOTO   678
0E48:  MOVLW  20
0E49:  MOVWF  60
0E4A:  BCF    03.0
0E4B:  RLF    54,F
0E4C:  RLF    55,F
0E4D:  RLF    56,F
0E4E:  RLF    57,F
0E4F:  RLF    5C,F
0E50:  RLF    5D,F
0E51:  RLF    5E,F
0E52:  RLF    5F,F
0E53:  MOVF   5B,W
0E54:  SUBWF  5F,W
0E55:  BTFSS  03.2
0E56:  GOTO   661
0E57:  MOVF   5A,W
0E58:  SUBWF  5E,W
0E59:  BTFSS  03.2
0E5A:  GOTO   661
0E5B:  MOVF   59,W
0E5C:  SUBWF  5D,W
0E5D:  BTFSS  03.2
0E5E:  GOTO   661
0E5F:  MOVF   58,W
0E60:  SUBWF  5C,W
0E61:  BTFSS  03.0
0E62:  GOTO   672
0E63:  MOVF   58,W
0E64:  SUBWF  5C,F
0E65:  MOVF   59,W
0E66:  BTFSS  03.0
0E67:  INCFSZ 59,W
0E68:  SUBWF  5D,F
0E69:  MOVF   5A,W
0E6A:  BTFSS  03.0
0E6B:  INCFSZ 5A,W
0E6C:  SUBWF  5E,F
0E6D:  MOVF   5B,W
0E6E:  BTFSS  03.0
0E6F:  INCFSZ 5B,W
0E70:  SUBWF  5F,F
0E71:  BSF    03.0
0E72:  RLF    77,F
0E73:  RLF    78,F
0E74:  RLF    79,F
0E75:  RLF    7A,F
0E76:  DECFSZ 60,F
0E77:  GOTO   64A
0E78:  MOVF   5C,W
0E79:  MOVWF  00
0E7A:  INCF   04,F
0E7B:  MOVF   5D,W
0E7C:  MOVWF  00
0E7D:  INCF   04,F
0E7E:  MOVF   5E,W
0E7F:  MOVWF  00
0E80:  INCF   04,F
0E81:  MOVF   5F,W
0E82:  MOVWF  00
0E83:  RETURN
0E84:  MOVF   04,W
0E85:  MOVWF  4C
0E86:  MOVF   4B,W
0E87:  MOVWF  4E
0E88:  BTFSC  03.2
0E89:  GOTO   6AB
0E8A:  MOVF   4A,W
0E8B:  BSF    03.5
0E8C:  MOVWF  2B
0E8D:  BCF    03.5
0E8E:  MOVF   49,W
0E8F:  BSF    03.5
0E90:  MOVWF  2A
0E91:  BCF    03.5
0E92:  MOVF   48,W
0E93:  BSF    03.5
0E94:  MOVWF  29
0E95:  BCF    03.5
0E96:  MOVF   47,W
0E97:  BSF    03.5
0E98:  MOVWF  28
0E99:  CLRF   2F
0E9A:  CLRF   2E
0E9B:  MOVLW  20
0E9C:  MOVWF  2D
0E9D:  MOVLW  82
0E9E:  MOVWF  2C
0E9F:  BCF    03.5
0EA0:  CALL   000
0EA1:  MOVF   7A,W
0EA2:  MOVWF  4A
0EA3:  MOVF   79,W
0EA4:  MOVWF  49
0EA5:  MOVF   78,W
0EA6:  MOVWF  48
0EA7:  MOVF   77,W
0EA8:  MOVWF  47
0EA9:  DECFSZ 4E,F
0EAA:  GOTO   68A
0EAB:  MOVF   4A,W
0EAC:  MOVWF  57
0EAD:  MOVF   49,W
0EAE:  MOVWF  56
0EAF:  MOVF   48,W
0EB0:  MOVWF  55
0EB1:  MOVF   47,W
0EB2:  MOVWF  54
0EB3:  MOVF   54,W
0EB4:  SUBLW  B6
0EB5:  MOVWF  54
0EB6:  CLRF   7A
0EB7:  MOVF   55,W
0EB8:  MOVWF  58
0EB9:  BSF    55.7
0EBA:  BCF    03.0
0EBB:  RRF    55,F
0EBC:  RRF    56,F
0EBD:  RRF    57,F
0EBE:  RRF    7A,F
0EBF:  RRF    79,F
0EC0:  RRF    78,F
0EC1:  RRF    77,F
0EC2:  DECFSZ 54,F
0EC3:  GOTO   6BA
0EC4:  BTFSS  58.7
0EC5:  GOTO   6D1
0EC6:  COMF   77,F
0EC7:  COMF   78,F
0EC8:  COMF   79,F
0EC9:  COMF   7A,F
0ECA:  INCF   77,F
0ECB:  BTFSC  03.2
0ECC:  INCF   78,F
0ECD:  BTFSC  03.2
0ECE:  INCF   79,F
0ECF:  BTFSC  03.2
0ED0:  INCF   7A,F
0ED1:  MOVF   7A,W
0ED2:  MOVWF  4A
0ED3:  MOVF   79,W
0ED4:  MOVWF  49
0ED5:  MOVF   78,W
0ED6:  MOVWF  48
0ED7:  MOVF   77,W
0ED8:  MOVWF  47
0ED9:  BTFSS  4A.7
0EDA:  GOTO   6E8
0EDB:  DECF   4C,F
0EDC:  BSF    4C.5
0EDD:  COMF   47,F
0EDE:  COMF   48,F
0EDF:  COMF   49,F
0EE0:  COMF   4A,F
0EE1:  INCF   47,F
0EE2:  BTFSC  03.2
0EE3:  INCF   48,F
0EE4:  BTFSC  03.2
0EE5:  INCF   49,F
0EE6:  BTFSC  03.2
0EE7:  INCF   4A,F
0EE8:  MOVLW  3B
0EE9:  MOVWF  53
0EEA:  MOVLW  9A
0EEB:  MOVWF  52
0EEC:  MOVLW  CA
0EED:  MOVWF  51
0EEE:  CLRF   50
0EEF:  MOVLW  0A
0EF0:  MOVWF  4E
0EF1:  MOVF   4B,W
0EF2:  BTFSC  03.2
0EF3:  INCF   4C,F
0EF4:  BSF    03.1
0EF5:  MOVLW  47
0EF6:  MOVWF  04
0EF7:  BCF    03.7
0EF8:  MOVF   4A,W
0EF9:  MOVWF  57
0EFA:  MOVF   49,W
0EFB:  MOVWF  56
0EFC:  MOVF   48,W
0EFD:  MOVWF  55
0EFE:  MOVF   47,W
0EFF:  MOVWF  54
0F00:  MOVF   53,W
0F01:  MOVWF  5B
0F02:  MOVF   52,W
0F03:  MOVWF  5A
0F04:  MOVF   51,W
0F05:  MOVWF  59
0F06:  MOVF   50,W
0F07:  MOVWF  58
0F08:  CALL   635
0F09:  MOVF   78,W
0F0A:  MOVF   77,F
0F0B:  BTFSS  03.2
0F0C:  GOTO   720
0F0D:  INCF   4B,W
0F0E:  SUBWF  4E,W
0F0F:  BTFSC  03.2
0F10:  GOTO   720
0F11:  MOVF   4C,W
0F12:  BTFSC  03.2
0F13:  GOTO   722
0F14:  ANDLW  0F
0F15:  SUBWF  4E,W
0F16:  BTFSC  03.2
0F17:  GOTO   71A
0F18:  BTFSC  03.0
0F19:  GOTO   756
0F1A:  BTFSC  4C.7
0F1B:  GOTO   756
0F1C:  BTFSC  4C.6
0F1D:  GOTO   722
0F1E:  MOVLW  20
0F1F:  GOTO   751
0F20:  MOVLW  20
0F21:  ANDWF  4C,F
0F22:  BTFSS  4C.5
0F23:  GOTO   731
0F24:  BCF    4C.5
0F25:  MOVF   4B,W
0F26:  BTFSS  03.2
0F27:  DECF   4C,F
0F28:  MOVF   77,W
0F29:  MOVWF  4C
0F2A:  MOVLW  2D
0F2B:  BTFSS  0C.4
0F2C:  GOTO   72B
0F2D:  MOVWF  19
0F2E:  MOVF   4C,W
0F2F:  MOVWF  77
0F30:  CLRF   4C
0F31:  MOVF   4B,W
0F32:  SUBWF  4E,W
0F33:  BTFSS  03.2
0F34:  GOTO   740
0F35:  MOVF   77,W
0F36:  MOVWF  4C
0F37:  MOVLW  2E
0F38:  BTFSS  0C.4
0F39:  GOTO   738
0F3A:  MOVWF  19
0F3B:  MOVF   4C,W
0F3C:  MOVWF  77
0F3D:  MOVLW  20
0F3E:  ANDWF  4C,F
0F3F:  MOVLW  00
0F40:  MOVLW  30
0F41:  BTFSS  4C.5
0F42:  GOTO   751
0F43:  BCF    4C.5
0F44:  MOVF   4B,W
0F45:  BTFSS  03.2
0F46:  DECF   4C,F
0F47:  MOVF   77,W
0F48:  MOVWF  4C
0F49:  MOVLW  2D
0F4A:  BTFSS  0C.4
0F4B:  GOTO   74A
0F4C:  MOVWF  19
0F4D:  MOVF   4C,W
0F4E:  MOVWF  77
0F4F:  CLRF   4C
0F50:  MOVLW  30
0F51:  ADDWF  77,F
0F52:  MOVF   77,W
0F53:  BTFSS  0C.4
0F54:  GOTO   753
0F55:  MOVWF  19
0F56:  BCF    03.1
0F57:  MOVF   53,W
0F58:  MOVWF  57
0F59:  MOVF   52,W
0F5A:  MOVWF  56
0F5B:  MOVF   51,W
0F5C:  MOVWF  55
0F5D:  MOVF   50,W
0F5E:  MOVWF  54
0F5F:  CLRF   5B
0F60:  CLRF   5A
0F61:  CLRF   59
0F62:  MOVLW  0A
0F63:  MOVWF  58
0F64:  CALL   635
0F65:  MOVF   7A,W
0F66:  MOVWF  53
0F67:  MOVF   79,W
0F68:  MOVWF  52
0F69:  MOVF   78,W
0F6A:  MOVWF  51
0F6B:  MOVF   77,W
0F6C:  MOVWF  50
0F6D:  DECFSZ 4E,F
0F6E:  GOTO   6F4
0F6F:  RETURN
0F70:  MOVF   0B,W
0F71:  MOVWF  48
0F72:  BCF    0B.7
0F73:  BSF    03.5
0F74:  BSF    03.6
0F75:  BSF    0C.7
0F76:  BSF    0C.0
0F77:  NOP
0F78:  NOP
0F79:  BTFSC  03.0
0F7A:  GOTO   7A3
0F7B:  BCF    03.5
0F7C:  MOVF   0C,W
0F7D:  ANDLW  7F
0F7E:  BCF    03.6
0F7F:  MOVWF  49
0F80:  BSF    03.6
0F81:  MOVF   0D,W
0F82:  BCF    03.6
0F83:  MOVWF  4A
0F84:  BSF    03.6
0F85:  MOVF   0F,W
0F86:  BCF    03.6
0F87:  MOVWF  4B
0F88:  MOVF   49,W
0F89:  BTFSS  0C.4
0F8A:  GOTO   789
0F8B:  MOVWF  19
0F8C:  MOVF   4A,W
0F8D:  BSF    03.6
0F8E:  MOVWF  0D
0F8F:  BCF    03.6
0F90:  MOVF   4B,W
0F91:  BSF    03.6
0F92:  MOVWF  0F
0F93:  BSF    03.5
0F94:  BSF    0C.7
0F95:  BSF    0C.0
0F96:  NOP
0F97:  NOP
0F98:  BCF    03.5
0F99:  BCF    03.6
0F9A:  DECFSZ 47,F
0F9B:  GOTO   79D
0F9C:  GOTO   7A0
0F9D:  BSF    03.5
0F9E:  BSF    03.6
0F9F:  GOTO   7A3
0FA0:  GOTO   7C3
0FA1:  BSF    03.5
0FA2:  BSF    03.6
0FA3:  BCF    03.5
0FA4:  RLF    0C,W
0FA5:  RLF    0E,W
0FA6:  ANDLW  7F
0FA7:  BCF    03.6
0FA8:  MOVWF  49
0FA9:  BSF    03.6
0FAA:  MOVF   0D,W
0FAB:  BCF    03.6
0FAC:  MOVWF  4A
0FAD:  BSF    03.6
0FAE:  MOVF   0F,W
0FAF:  BCF    03.6
0FB0:  MOVWF  4B
0FB1:  MOVF   49,W
0FB2:  BTFSS  0C.4
0FB3:  GOTO   7B2
0FB4:  MOVWF  19
0FB5:  MOVF   4A,W
0FB6:  BSF    03.6
0FB7:  MOVWF  0D
0FB8:  BCF    03.6
0FB9:  MOVF   4B,W
0FBA:  BSF    03.6
0FBB:  MOVWF  0F
0FBC:  INCF   0D,F
0FBD:  BTFSC  03.2
0FBE:  INCF   0F,F
0FBF:  BCF    03.0
0FC0:  BCF    03.6
0FC1:  DECFSZ 47,F
0FC2:  GOTO   773
0FC3:  BTFSC  48.7
0FC4:  BSF    0B.7
0FC5:  RETURN
0FC6:  MOVF   78,W
0FC7:  MOVF   47,W
0FC8:  MOVWF  53
0FC9:  MOVLW  64
0FCA:  MOVWF  54
0FCB:  CALL   533
0FCC:  MOVF   77,W
0FCD:  MOVWF  47
0FCE:  MOVF   78,W
0FCF:  MOVLW  30
0FD0:  BTFSS  03.2
0FD1:  GOTO   7D9
0FD2:  BTFSS  48.1
0FD3:  GOTO   7E1
0FD4:  BTFSC  48.3
0FD5:  GOTO   7E1
0FD6:  BTFSC  48.4
0FD7:  MOVLW  20
0FD8:  GOTO   7DC
0FD9:  BCF    48.3
0FDA:  BCF    48.4
0FDB:  BSF    48.0
0FDC:  ADDWF  78,F
0FDD:  MOVF   78,W
0FDE:  BTFSS  0C.4
0FDF:  GOTO   7DE
0FE0:  MOVWF  19
0FE1:  MOVF   47,W
0FE2:  MOVWF  53
0FE3:  MOVLW  0A
0FE4:  MOVWF  54
0FE5:  CALL   533
0FE6:  MOVF   77,W
0FE7:  MOVWF  47
0FE8:  MOVF   78,W
0FE9:  MOVLW  30
0FEA:  BTFSS  03.2
0FEB:  GOTO   7F2
0FEC:  BTFSC  48.3
0FED:  GOTO   7F7
0FEE:  BTFSS  48.0
0FEF:  GOTO   7F7
0FF0:  BTFSC  48.4
0FF1:  MOVLW  20
0FF2:  ADDWF  78,F
0FF3:  MOVF   78,W
0FF4:  BTFSS  0C.4
0FF5:  GOTO   7F4
0FF6:  MOVWF  19
0FF7:  MOVLW  30
0FF8:  ADDWF  47,F
0FF9:  MOVF   47,W
0FFA:  BTFSS  0C.4
0FFB:  GOTO   7FA
0FFC:  MOVWF  19
0FFD:  BSF    0A.3
0FFE:  BSF    0A.4
0FFF:  GOTO   128 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
0A08:  MOVF   62,W
0A09:  MOVWF  66
0A0A:  MOVF   61,W
0A0B:  MOVWF  65
0A0C:  MOVF   60,W
0A0D:  MOVWF  64
0A0E:  MOVF   5F,W
0A0F:  MOVWF  63
....................  
....................    if (y != 1.0) 
0A10:  MOVF   66,W
0A11:  MOVWF  7E
0A12:  MOVF   65,W
0A13:  MOVWF  7D
0A14:  MOVF   64,W
0A15:  MOVWF  7C
0A16:  MOVF   63,W
0A17:  MOVWF  7B
0A18:  BSF    03.5
0A19:  CLRF   23
0A1A:  CLRF   22
0A1B:  CLRF   21
0A1C:  MOVLW  7F
0A1D:  MOVWF  20
*
0A5C:  BTFSC  03.2
0A5D:  GOTO   477
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
0A5E:  CLRF   7C
0A5F:  MOVLW  63
0A60:  MOVWF  7B
0A61:  MOVF   7B,W
0A62:  MOVWF  04
0A63:  BCF    03.7
0A64:  BTFSC  7C.0
0A65:  BSF    03.7
0A66:  MOVLW  7E
0A67:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
0A68:  BSF    03.1
0A69:  BCF    03.5
0A6A:  CLRF   27
0A6B:  BTFSC  0B.7
0A6C:  BSF    27.7
0A6D:  BCF    0B.7
0A6E:  MOVF   66,W
0A6F:  BSF    03.5
0A70:  MOVWF  3E
0A71:  BCF    03.5
0A72:  MOVF   65,W
0A73:  BSF    03.5
0A74:  MOVWF  3D
0A75:  BCF    03.5
0A76:  MOVF   64,W
0A77:  BSF    03.5
0A78:  MOVWF  3C
0A79:  BCF    03.5
0A7A:  MOVF   63,W
0A7B:  BSF    03.5
0A7C:  MOVWF  3B
0A7D:  CLRF   42
0A7E:  CLRF   41
0A7F:  CLRF   40
0A80:  MOVLW  7F
0A81:  MOVWF  3F
0A82:  BCF    0A.3
0A83:  BCF    03.5
0A84:  CALL   5F1
0A85:  BSF    0A.3
0A86:  BTFSC  27.7
0A87:  BSF    0B.7
0A88:  MOVF   7A,W
0A89:  MOVWF  7E
0A8A:  MOVF   79,W
0A8B:  MOVWF  7D
0A8C:  MOVF   78,W
0A8D:  MOVWF  7C
0A8E:  MOVF   77,W
0A8F:  MOVWF  7B
0A90:  BCF    03.1
0A91:  CLRF   27
0A92:  BTFSC  0B.7
0A93:  BSF    27.7
0A94:  BCF    0B.7
0A95:  MOVF   66,W
0A96:  BSF    03.5
0A97:  MOVWF  3E
0A98:  BCF    03.5
0A99:  MOVF   65,W
0A9A:  BSF    03.5
0A9B:  MOVWF  3D
0A9C:  BCF    03.5
0A9D:  MOVF   64,W
0A9E:  BSF    03.5
0A9F:  MOVWF  3C
0AA0:  BCF    03.5
0AA1:  MOVF   63,W
0AA2:  BSF    03.5
0AA3:  MOVWF  3B
0AA4:  CLRF   42
0AA5:  CLRF   41
0AA6:  CLRF   40
0AA7:  MOVLW  7F
0AA8:  MOVWF  3F
0AA9:  BCF    0A.3
0AAA:  BCF    03.5
0AAB:  CALL   5F1
0AAC:  BSF    0A.3
0AAD:  BTFSC  27.7
0AAE:  BSF    0B.7
0AAF:  MOVF   7E,W
0AB0:  BSF    03.5
0AB1:  MOVWF  2B
0AB2:  MOVF   7D,W
0AB3:  MOVWF  2A
0AB4:  MOVF   7C,W
0AB5:  MOVWF  29
0AB6:  MOVF   7B,W
0AB7:  MOVWF  28
0AB8:  MOVF   7A,W
0AB9:  MOVWF  2F
0ABA:  MOVF   79,W
0ABB:  MOVWF  2E
0ABC:  MOVF   78,W
0ABD:  MOVWF  2D
0ABE:  MOVF   77,W
0ABF:  MOVWF  2C
0AC0:  BCF    03.5
0AC1:  CALL   077
0AC2:  MOVF   7A,W
0AC3:  MOVWF  66
0AC4:  MOVF   79,W
0AC5:  MOVWF  65
0AC6:  MOVF   78,W
0AC7:  MOVWF  64
0AC8:  MOVF   77,W
0AC9:  MOVWF  63
....................  
....................       y2=y*y; 
0ACA:  MOVF   66,W
0ACB:  BSF    03.5
0ACC:  MOVWF  2B
0ACD:  BCF    03.5
0ACE:  MOVF   65,W
0ACF:  BSF    03.5
0AD0:  MOVWF  2A
0AD1:  BCF    03.5
0AD2:  MOVF   64,W
0AD3:  BSF    03.5
0AD4:  MOVWF  29
0AD5:  BCF    03.5
0AD6:  MOVF   63,W
0AD7:  BSF    03.5
0AD8:  MOVWF  28
0AD9:  BCF    03.5
0ADA:  MOVF   66,W
0ADB:  BSF    03.5
0ADC:  MOVWF  2F
0ADD:  BCF    03.5
0ADE:  MOVF   65,W
0ADF:  BSF    03.5
0AE0:  MOVWF  2E
0AE1:  BCF    03.5
0AE2:  MOVF   64,W
0AE3:  BSF    03.5
0AE4:  MOVWF  2D
0AE5:  BCF    03.5
0AE6:  MOVF   63,W
0AE7:  BSF    03.5
0AE8:  MOVWF  2C
0AE9:  BCF    03.5
0AEA:  CALL   000
0AEB:  MOVF   7A,W
0AEC:  MOVWF  72
0AED:  MOVF   79,W
0AEE:  MOVWF  71
0AEF:  MOVF   78,W
0AF0:  MOVWF  70
0AF1:  MOVF   77,W
0AF2:  MOVWF  6F
....................  
....................       res = pl[0]*y2 + pl[1]; 
0AF3:  MOVLW  99
0AF4:  BSF    03.5
0AF5:  MOVWF  2B
0AF6:  MOVLW  47
0AF7:  MOVWF  2A
0AF8:  MOVLW  8A
0AF9:  MOVWF  29
0AFA:  MOVLW  7F
0AFB:  MOVWF  28
0AFC:  MOVF   72,W
0AFD:  MOVWF  2F
0AFE:  MOVF   71,W
0AFF:  MOVWF  2E
0B00:  MOVF   70,W
0B01:  MOVWF  2D
0B02:  BCF    03.5
0B03:  MOVF   6F,W
0B04:  BSF    03.5
0B05:  MOVWF  2C
0B06:  BCF    03.5
0B07:  CALL   000
0B08:  MOVF   7A,W
0B09:  MOVWF  7E
0B0A:  MOVF   79,W
0B0B:  MOVWF  7D
0B0C:  MOVF   78,W
0B0D:  MOVWF  7C
0B0E:  MOVF   77,W
0B0F:  MOVWF  7B
0B10:  BCF    03.1
0B11:  CLRF   27
0B12:  BTFSC  0B.7
0B13:  BSF    27.7
0B14:  BCF    0B.7
0B15:  MOVF   7A,W
0B16:  BSF    03.5
0B17:  MOVWF  3E
0B18:  MOVF   79,W
0B19:  MOVWF  3D
0B1A:  MOVF   78,W
0B1B:  MOVWF  3C
0B1C:  MOVF   77,W
0B1D:  MOVWF  3B
0B1E:  CLRF   42
0B1F:  CLRF   41
0B20:  CLRF   40
0B21:  MOVLW  80
0B22:  MOVWF  3F
0B23:  BCF    0A.3
0B24:  BCF    03.5
0B25:  CALL   5F1
0B26:  BSF    0A.3
0B27:  BTFSC  27.7
0B28:  BSF    0B.7
0B29:  MOVF   7A,W
0B2A:  MOVWF  6A
0B2B:  MOVF   79,W
0B2C:  MOVWF  69
0B2D:  MOVF   78,W
0B2E:  MOVWF  68
0B2F:  MOVF   77,W
0B30:  MOVWF  67
....................  
....................       r = ql[0]*y2 + ql[1]; 
0B31:  MOVLW  4C
0B32:  BSF    03.5
0B33:  MOVWF  2B
0B34:  MOVLW  F3
0B35:  MOVWF  2A
0B36:  MOVLW  3A
0B37:  MOVWF  29
0B38:  MOVLW  7B
0B39:  MOVWF  28
0B3A:  MOVF   72,W
0B3B:  MOVWF  2F
0B3C:  MOVF   71,W
0B3D:  MOVWF  2E
0B3E:  MOVF   70,W
0B3F:  MOVWF  2D
0B40:  BCF    03.5
0B41:  MOVF   6F,W
0B42:  BSF    03.5
0B43:  MOVWF  2C
0B44:  BCF    03.5
0B45:  CALL   000
0B46:  MOVF   7A,W
0B47:  MOVWF  7E
0B48:  MOVF   79,W
0B49:  MOVWF  7D
0B4A:  MOVF   78,W
0B4B:  MOVWF  7C
0B4C:  MOVF   77,W
0B4D:  MOVWF  7B
0B4E:  BCF    03.1
0B4F:  CLRF   27
0B50:  BTFSC  0B.7
0B51:  BSF    27.7
0B52:  BCF    0B.7
0B53:  MOVF   7A,W
0B54:  BSF    03.5
0B55:  MOVWF  3E
0B56:  MOVF   79,W
0B57:  MOVWF  3D
0B58:  MOVF   78,W
0B59:  MOVWF  3C
0B5A:  MOVF   77,W
0B5B:  MOVWF  3B
0B5C:  MOVLW  2B
0B5D:  MOVWF  42
0B5E:  MOVLW  9D
0B5F:  MOVWF  41
0B60:  MOVLW  DF
0B61:  MOVWF  40
0B62:  MOVLW  7E
0B63:  MOVWF  3F
0B64:  BCF    0A.3
0B65:  BCF    03.5
0B66:  CALL   5F1
0B67:  BSF    0A.3
0B68:  BTFSC  27.7
0B69:  BSF    0B.7
0B6A:  MOVF   7A,W
0B6B:  MOVWF  6E
0B6C:  MOVF   79,W
0B6D:  MOVWF  6D
0B6E:  MOVF   78,W
0B6F:  MOVWF  6C
0B70:  MOVF   77,W
0B71:  MOVWF  6B
....................       r = r*y2 + 1.0; 
0B72:  MOVF   6E,W
0B73:  BSF    03.5
0B74:  MOVWF  2B
0B75:  BCF    03.5
0B76:  MOVF   6D,W
0B77:  BSF    03.5
0B78:  MOVWF  2A
0B79:  BCF    03.5
0B7A:  MOVF   6C,W
0B7B:  BSF    03.5
0B7C:  MOVWF  29
0B7D:  BCF    03.5
0B7E:  MOVF   6B,W
0B7F:  BSF    03.5
0B80:  MOVWF  28
0B81:  MOVF   72,W
0B82:  MOVWF  2F
0B83:  MOVF   71,W
0B84:  MOVWF  2E
0B85:  MOVF   70,W
0B86:  MOVWF  2D
0B87:  BCF    03.5
0B88:  MOVF   6F,W
0B89:  BSF    03.5
0B8A:  MOVWF  2C
0B8B:  BCF    03.5
0B8C:  CALL   000
0B8D:  MOVF   7A,W
0B8E:  MOVWF  7E
0B8F:  MOVF   79,W
0B90:  MOVWF  7D
0B91:  MOVF   78,W
0B92:  MOVWF  7C
0B93:  MOVF   77,W
0B94:  MOVWF  7B
0B95:  BCF    03.1
0B96:  CLRF   27
0B97:  BTFSC  0B.7
0B98:  BSF    27.7
0B99:  BCF    0B.7
0B9A:  MOVF   7A,W
0B9B:  BSF    03.5
0B9C:  MOVWF  3E
0B9D:  MOVF   79,W
0B9E:  MOVWF  3D
0B9F:  MOVF   78,W
0BA0:  MOVWF  3C
0BA1:  MOVF   77,W
0BA2:  MOVWF  3B
0BA3:  CLRF   42
0BA4:  CLRF   41
0BA5:  CLRF   40
0BA6:  MOVLW  7F
0BA7:  MOVWF  3F
0BA8:  BCF    0A.3
0BA9:  BCF    03.5
0BAA:  CALL   5F1
0BAB:  BSF    0A.3
0BAC:  BTFSC  27.7
0BAD:  BSF    0B.7
0BAE:  MOVF   7A,W
0BAF:  MOVWF  6E
0BB0:  MOVF   79,W
0BB1:  MOVWF  6D
0BB2:  MOVF   78,W
0BB3:  MOVWF  6C
0BB4:  MOVF   77,W
0BB5:  MOVWF  6B
....................  
....................       res = y*res/r; 
0BB6:  MOVF   66,W
0BB7:  BSF    03.5
0BB8:  MOVWF  2B
0BB9:  BCF    03.5
0BBA:  MOVF   65,W
0BBB:  BSF    03.5
0BBC:  MOVWF  2A
0BBD:  BCF    03.5
0BBE:  MOVF   64,W
0BBF:  BSF    03.5
0BC0:  MOVWF  29
0BC1:  BCF    03.5
0BC2:  MOVF   63,W
0BC3:  BSF    03.5
0BC4:  MOVWF  28
0BC5:  BCF    03.5
0BC6:  MOVF   6A,W
0BC7:  BSF    03.5
0BC8:  MOVWF  2F
0BC9:  BCF    03.5
0BCA:  MOVF   69,W
0BCB:  BSF    03.5
0BCC:  MOVWF  2E
0BCD:  BCF    03.5
0BCE:  MOVF   68,W
0BCF:  BSF    03.5
0BD0:  MOVWF  2D
0BD1:  BCF    03.5
0BD2:  MOVF   67,W
0BD3:  BSF    03.5
0BD4:  MOVWF  2C
0BD5:  BCF    03.5
0BD6:  CALL   000
0BD7:  MOVF   7A,W
0BD8:  MOVWF  7E
0BD9:  MOVF   79,W
0BDA:  MOVWF  7D
0BDB:  MOVF   78,W
0BDC:  MOVWF  7C
0BDD:  MOVF   77,W
0BDE:  MOVWF  7B
0BDF:  MOVF   7A,W
0BE0:  BSF    03.5
0BE1:  MOVWF  2B
0BE2:  MOVF   79,W
0BE3:  MOVWF  2A
0BE4:  MOVF   78,W
0BE5:  MOVWF  29
0BE6:  MOVF   77,W
0BE7:  MOVWF  28
0BE8:  BCF    03.5
0BE9:  MOVF   6E,W
0BEA:  BSF    03.5
0BEB:  MOVWF  2F
0BEC:  BCF    03.5
0BED:  MOVF   6D,W
0BEE:  BSF    03.5
0BEF:  MOVWF  2E
0BF0:  BCF    03.5
0BF1:  MOVF   6C,W
0BF2:  BSF    03.5
0BF3:  MOVWF  2D
0BF4:  BCF    03.5
0BF5:  MOVF   6B,W
0BF6:  BSF    03.5
0BF7:  MOVWF  2C
0BF8:  BCF    03.5
0BF9:  CALL   077
0BFA:  MOVF   7A,W
0BFB:  MOVWF  6A
0BFC:  MOVF   79,W
0BFD:  MOVWF  69
0BFE:  MOVF   78,W
0BFF:  MOVWF  68
0C00:  MOVF   77,W
0C01:  MOVWF  67
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
0C02:  CLRF   7C
0C03:  MOVLW  5F
0C04:  MOVWF  7B
0C05:  MOVF   7B,W
0C06:  MOVWF  04
0C07:  BCF    03.7
0C08:  BTFSC  7C.0
0C09:  BSF    03.7
0C0A:  MOVLW  7E
0C0B:  SUBWF  00,W
0C0C:  MOVWF  73
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
0C0D:  BTFSS  73.7
0C0E:  GOTO   422
....................          r = -(float32)-n; 
0C0F:  MOVF   73,W
0C10:  SUBLW  00
0C11:  CLRF   7C
0C12:  MOVWF  7B
0C13:  BTFSC  7B.7
0C14:  DECF   7C,F
0C15:  BCF    0A.3
0C16:  CALL   7B9
0C17:  BSF    0A.3
0C18:  MOVF   77,W
0C19:  MOVWF  6B
0C1A:  MOVF   78,W
0C1B:  XORLW  80
0C1C:  MOVWF  6C
0C1D:  MOVF   79,W
0C1E:  MOVWF  6D
0C1F:  MOVF   7A,W
0C20:  MOVWF  6E
0C21:  GOTO   432
....................       else 
....................          r = (float32)n; 
0C22:  CLRF   7C
0C23:  MOVF   73,W
0C24:  MOVWF  7B
0C25:  BTFSC  7B.7
0C26:  DECF   7C,F
0C27:  BCF    0A.3
0C28:  CALL   7B9
0C29:  BSF    0A.3
0C2A:  MOVF   7A,W
0C2B:  MOVWF  6E
0C2C:  MOVF   79,W
0C2D:  MOVWF  6D
0C2E:  MOVF   78,W
0C2F:  MOVWF  6C
0C30:  MOVF   77,W
0C31:  MOVWF  6B
....................  
....................       res += r*LN2; 
0C32:  MOVF   6E,W
0C33:  BSF    03.5
0C34:  MOVWF  2B
0C35:  BCF    03.5
0C36:  MOVF   6D,W
0C37:  BSF    03.5
0C38:  MOVWF  2A
0C39:  BCF    03.5
0C3A:  MOVF   6C,W
0C3B:  BSF    03.5
0C3C:  MOVWF  29
0C3D:  BCF    03.5
0C3E:  MOVF   6B,W
0C3F:  BSF    03.5
0C40:  MOVWF  28
0C41:  MOVLW  18
0C42:  MOVWF  2F
0C43:  MOVLW  72
0C44:  MOVWF  2E
0C45:  MOVLW  31
0C46:  MOVWF  2D
0C47:  MOVLW  7E
0C48:  MOVWF  2C
0C49:  BCF    03.5
0C4A:  CALL   000
0C4B:  BCF    03.1
0C4C:  CLRF   27
0C4D:  BTFSC  0B.7
0C4E:  BSF    27.7
0C4F:  BCF    0B.7
0C50:  MOVF   6A,W
0C51:  BSF    03.5
0C52:  MOVWF  3E
0C53:  BCF    03.5
0C54:  MOVF   69,W
0C55:  BSF    03.5
0C56:  MOVWF  3D
0C57:  BCF    03.5
0C58:  MOVF   68,W
0C59:  BSF    03.5
0C5A:  MOVWF  3C
0C5B:  BCF    03.5
0C5C:  MOVF   67,W
0C5D:  BSF    03.5
0C5E:  MOVWF  3B
0C5F:  MOVF   7A,W
0C60:  MOVWF  42
0C61:  MOVF   79,W
0C62:  MOVWF  41
0C63:  MOVF   78,W
0C64:  MOVWF  40
0C65:  MOVF   77,W
0C66:  MOVWF  3F
0C67:  BCF    0A.3
0C68:  BCF    03.5
0C69:  CALL   5F1
0C6A:  BSF    0A.3
0C6B:  BTFSC  27.7
0C6C:  BSF    0B.7
0C6D:  MOVF   7A,W
0C6E:  MOVWF  6A
0C6F:  MOVF   79,W
0C70:  MOVWF  69
0C71:  MOVF   78,W
0C72:  MOVWF  68
0C73:  MOVF   77,W
0C74:  MOVWF  67
....................    } 
0C75:  GOTO   47C
0C76:  BSF    03.5
....................  
....................    else 
....................       res = 0.0; 
0C77:  BCF    03.5
0C78:  CLRF   6A
0C79:  CLRF   69
0C7A:  CLRF   68
0C7B:  CLRF   67
....................  
....................    return(res); 
0C7C:  MOVF   67,W
0C7D:  MOVWF  77
0C7E:  MOVF   68,W
0C7F:  MOVWF  78
0C80:  MOVF   69,W
0C81:  MOVWF  79
0C82:  MOVF   6A,W
0C83:  MOVWF  7A
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #FUSES XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NODEBUG, NOCPD 
.................... #use delay(crystal=20000000) 
*
0786:  MOVLW  47
0787:  MOVWF  04
0788:  BCF    03.7
0789:  MOVF   00,W
078A:  BTFSC  03.2
078B:  GOTO   799
078C:  MOVLW  06
078D:  MOVWF  78
078E:  CLRF   77
078F:  DECFSZ 77,F
0790:  GOTO   78F
0791:  DECFSZ 78,F
0792:  GOTO   78E
0793:  MOVLW  7B
0794:  MOVWF  77
0795:  DECFSZ 77,F
0796:  GOTO   795
0797:  DECFSZ 00,F
0798:  GOTO   78C
0799:  RETURN
.................... #use rs232 (baud=9600,xmit=PIN_C6, rcv=PIN_C7, parity=N, stop=1)  
.................... //#include <lcd.c> 
....................  
.................... #define RT0 9830   //  
.................... #define B1 3000      // K 
.................... #define VCC 5    //Supply voltage 
.................... #define R 9880//R=10K 
....................  
.................... float temperature = 0.0f; 
.................... float prevTemperature = 0.0f; 
.................... float deltaTemperature = 0.0f; 
.................... int16 i = 0; 
.................... float T0 = 27 + 273.15; 
....................  
.................... unsigned int16 result_1; //variable for A0 value 
.................... //unsigned int16 result_2; //variable for A1 value 
....................  
.................... #int_timer0 
.................... void tmr_int() 
.................... { 
....................    set_timer0(207); 
*
0737:  MOVLW  CF
0738:  MOVWF  01
....................    i++;      
0739:  INCF   34,F
073A:  BTFSC  03.2
073B:  INCF   35,F
....................    if (i==400) 
073C:  MOVF   34,W
073D:  SUBLW  90
073E:  BTFSS  03.2
073F:  GOTO   776
0740:  DECFSZ 35,W
0741:  GOTO   776
....................    { 
....................       deltaTemperature = temperature - prevTemperature; 
0742:  BSF    03.1
0743:  MOVF   2B,W
0744:  BSF    03.5
0745:  MOVWF  3E
0746:  BCF    03.5
0747:  MOVF   2A,W
0748:  BSF    03.5
0749:  MOVWF  3D
074A:  BCF    03.5
074B:  MOVF   29,W
074C:  BSF    03.5
074D:  MOVWF  3C
074E:  BCF    03.5
074F:  MOVF   28,W
0750:  BSF    03.5
0751:  MOVWF  3B
0752:  BCF    03.5
0753:  MOVF   2F,W
0754:  BSF    03.5
0755:  MOVWF  42
0756:  BCF    03.5
0757:  MOVF   2E,W
0758:  BSF    03.5
0759:  MOVWF  41
075A:  BCF    03.5
075B:  MOVF   2D,W
075C:  BSF    03.5
075D:  MOVWF  40
075E:  BCF    03.5
075F:  MOVF   2C,W
0760:  BSF    03.5
0761:  MOVWF  3F
0762:  BCF    03.5
0763:  CALL   5F1
0764:  MOVF   7A,W
0765:  MOVWF  33
0766:  MOVF   79,W
0767:  MOVWF  32
0768:  MOVF   78,W
0769:  MOVWF  31
076A:  MOVF   77,W
076B:  MOVWF  30
....................       prevTemperature = temperature; 
076C:  MOVF   2B,W
076D:  MOVWF  2F
076E:  MOVF   2A,W
076F:  MOVWF  2E
0770:  MOVF   29,W
0771:  MOVWF  2D
0772:  MOVF   28,W
0773:  MOVWF  2C
....................       i = 0; 
0774:  CLRF   35
0775:  CLRF   34
....................    } 
0776:  BCF    0B.2
0777:  BCF    0A.3
0778:  BCF    0A.4
0779:  GOTO   01B
.................... } 
....................  
.................... const int8 oneTo6th[6][41] = { 
.................... 45,45,45,45,45,44,43,42,40,39,38,37,35,34,33,31,30,28,27,25,24,22,20,19,17,18,18,18,18,18,19,19,19,19,19,19,19,19,19,18,18 
.................... 42,42,42,42,42,49,55,57,57,56,55,54,53,52,51,50,48,47,46,44,43,42,41,40,39,40,41,42,43,44,45,46,47,49,51,49,47,46,45,44,43 
.................... 40,40,40,40,40,47,52,57,61,65,64,63,63,62,61,60,59,58,57,55,54,53,52,51,51,51,52,53,54,55,57,58,59,61,63,61,59,58,57,55,54 
.................... 37,37,37,37,37,44,50,55,58,62,65,68,68,68,67,66,65,64,63,62,61,61,61,61,61,61,61,61,61,62,63,65,66,67,69,67,66,65,63,62,61 
.................... 34,34,34,34,34,42,48,53,57,60,63,65,67,69,71,70,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,71,73,71,70,70,70,70,70 
.................... 29,29,29,29,29,38,45,50,55,58,61,63,66,69,72,74,77,77,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,77,76,77,78,78,78,78,78 
.................... }; 
....................  
.................... const int8 seventhTo12th[6][41] = { 
....................  
.................... 24,24,24,24,24,34,41,47,52,55,60,63,67,70,73,75,78,80,82,84,86,86,86,86,86,86,86,86,86,86,86,85,85,84,84,84,85,85,86,86,86 
.................... 18,18,18,18,18,29,38,45,51,55,60,63,67,70,73,75,78,80,82,84,86,88,90,92,94,94,94,94,94,94,94,94,94,94,95,94,94,94,94,94,94 
.................... 17,17,17,17,17,29,37,45,51,55,60,63,67,70,73,75,78,80,82,84,86,88,90,92,94,94,94,94,94,94,94,94,94,94,95,94,94,94,94,94,94 
.................... 17,17,17,17,17,29,37,45,51,55,60,63,67,70,73,75,78,80,82,84,86,88,90,92,94,94,94,94,94,94,94,94,94,94,95,94,94,94,94,94,94 
.................... 17,17,17,17,17,29,37,45,51,55,60,63,67,70,73,75,78,80,82,84,86,88,90,92,94,94,94,94,94,94,94,94,94,94,95,94,94,94,94,94,94 
.................... 39,39,39,39,39,56,70,78,81,84,86,88,90,92,94,95,97,99,100,102,104,105,107,109,110,111,111,112,112,113,113,114,115,116,118,116,115,114,113,113,112 
.................... }; 
....................  
.................... const int8 thirteenthTo18th[6][41] = { 
.................... 51,51,51,51,51,63,75,85,95,103,104,106,107,108,109,110,111,113,114,115,117,118,120,121,123,123,124,124,125,126,127,128,129,131,133,131,129,128,127,126,125 
.................... 60,60,60,60,60,69,78,86,95,102,109,115,119,119,120,121,122,123,124,125,126,128,129,131,133,133,133,134,134,135,137,138,139,141,143,141,139,138,136,135,133 
.................... 66,66,66,66,66,75,83,90,96,101,108,113,119,124,129,129,130,131,132,133,135,137,139,141,143,143,143,143,143,143,144,145,146,148,150,148,146,145,143,142,142 
.................... 72,72,72,72,72,80,87,93,99,104,109,113,117,123,129,132,135,137,139,141,143,145,147,149,151,151,151,151,151,151,151,151,151,151,150,151,151,151,151,151,151 
.................... 77,77,77,77,77,84,91,97,102,107,112,116,120,125,129,133,137,142,145,149,151,154,156,158,160,160,160,160,160,160,158,157,155,152,150,153,155,157,159,161,161 
.................... 81,81,81,81,81,88,94,100,106,111,116,120,125,129,133,137,141,145,150,154,158,162,165,167,169,169,169,169,167,166,164,162,161,158,156,159,161,163,166,168,169 
.................... }; 
....................  
.................... const int8 nineteenthTo24th[6][41] = { 
.................... 85,85,85,85,85,92,98,104,110,115,120,125,130,134,138,143,147,151,155,159,164,168,172,176,179,178,177,176,174,173,172,170,168,167,165,167,170,172,175,177,179 
.................... 90,90,90,90,90,97,103,109,115,120,126,130,135,140,144,149,153,157,162,166,171,176,180,184,188,187,186,185,184,183,182,180,179,178,176,179,181,184,187,189,192 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... }; 
....................  
.................... const int8 twentyfifthTo30th[6][41] = { 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... }; 
....................  
.................... const int8 thirtyfirstTo36th[6][41] = { 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... }; 
....................  
.................... const int8 thirtyseventhTo42nd[5][41] = { 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... 94,94,94,94,94,101,108,114,120,126,131,136,141,146,150,155,159,164,168,173,178,183,188,194,200,199,198,197,197,196,195,195,194,193,193,195,198,201,203,206,209 
.................... }; 
....................  
.................... const int8 fortythirdTo48th[6][41] = { 
.................... 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10, 
.................... 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10, 
.................... 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10, 
.................... 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10, 
.................... 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10, 
.................... 10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10 
.................... }; 
....................  
....................  
....................  
.................... const int8 temperatureArray[76] = { 
.................... 15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54, 
.................... 55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90 
.................... }; 
....................  
.................... /*const int8 temperatureArray[60] = { 
.................... 21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54, 
.................... 55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80 
.................... };*/ 
....................  
.................... const int8 deltaTemperatureArray[41] = { 
.................... -30,-28,-27,-25,-24,-22,-21,-19,-18,-16,-15,-13,-12,-10,-9,-7,-6,-4,-3,-1,0,1,3,4,6,7,9,10,12,13,15,16,18,19,21,22,24,25,27,28,30 
.................... }; 
....................  
.................... signed int8 * SelectMatrixAndRowAndColumn(float _temperature, float _deltaTemperature) 
*
0D48:  BSF    03.1
0D49:  CLRF   27
0D4A:  BTFSC  0B.7
0D4B:  BSF    27.7
0D4C:  BCF    0B.7
0D4D:  MOVF   4A,W
0D4E:  BSF    03.5
0D4F:  MOVWF  3E
0D50:  BCF    03.5
0D51:  MOVF   49,W
0D52:  BSF    03.5
0D53:  MOVWF  3D
0D54:  BCF    03.5
0D55:  MOVF   48,W
0D56:  BSF    03.5
0D57:  MOVWF  3C
0D58:  BCF    03.5
0D59:  MOVF   47,W
0D5A:  BSF    03.5
0D5B:  MOVWF  3B
0D5C:  CLRF   42
0D5D:  CLRF   41
0D5E:  MOVLW  70
0D5F:  MOVWF  40
0D60:  MOVLW  82
0D61:  MOVWF  3F
0D62:  BCF    0A.3
0D63:  BCF    03.5
0D64:  CALL   5F1
0D65:  BSF    0A.3
0D66:  BTFSC  27.7
0D67:  BSF    0B.7
0D68:  MOVF   7A,W
0D69:  BSF    03.5
0D6A:  MOVWF  23
0D6B:  MOVF   79,W
0D6C:  MOVWF  22
0D6D:  MOVF   78,W
0D6E:  MOVWF  21
0D6F:  MOVF   77,W
0D70:  MOVWF  20
0D71:  BCF    0A.3
0D72:  BCF    03.5
0D73:  CALL   7DE
0D74:  BSF    0A.3
0D75:  MOVF   78,W
0D76:  MOVWF  53
0D77:  MOVLW  06
0D78:  MOVWF  54
0D79:  CALL   533
0D7A:  MOVF   78,W
0D7B:  MOVWF  4F
0D7C:  BSF    03.1
0D7D:  CLRF   27
0D7E:  BTFSC  0B.7
0D7F:  BSF    27.7
0D80:  BCF    0B.7
0D81:  MOVF   4A,W
0D82:  BSF    03.5
0D83:  MOVWF  3E
0D84:  BCF    03.5
0D85:  MOVF   49,W
0D86:  BSF    03.5
0D87:  MOVWF  3D
0D88:  BCF    03.5
0D89:  MOVF   48,W
0D8A:  BSF    03.5
0D8B:  MOVWF  3C
0D8C:  BCF    03.5
0D8D:  MOVF   47,W
0D8E:  BSF    03.5
0D8F:  MOVWF  3B
0D90:  CLRF   42
0D91:  CLRF   41
0D92:  MOVLW  70
0D93:  MOVWF  40
0D94:  MOVLW  82
0D95:  MOVWF  3F
0D96:  BCF    0A.3
0D97:  BCF    03.5
0D98:  CALL   5F1
0D99:  BSF    0A.3
0D9A:  BTFSC  27.7
0D9B:  BSF    0B.7
0D9C:  MOVF   7A,W
0D9D:  BSF    03.5
0D9E:  MOVWF  23
0D9F:  MOVF   79,W
0DA0:  MOVWF  22
0DA1:  MOVF   78,W
0DA2:  MOVWF  21
0DA3:  MOVF   77,W
0DA4:  MOVWF  20
0DA5:  BCF    0A.3
0DA6:  BCF    03.5
0DA7:  CALL   7DE
0DA8:  BSF    0A.3
0DA9:  MOVF   78,W
0DAA:  MOVWF  53
0DAB:  MOVLW  06
0DAC:  MOVWF  54
0DAD:  CALL   533
0DAE:  MOVF   77,W
0DAF:  MOVWF  50
0DB0:  MOVF   4E,W
0DB1:  BSF    03.5
0DB2:  MOVWF  2B
0DB3:  BCF    03.5
0DB4:  MOVF   4D,W
0DB5:  BSF    03.5
0DB6:  MOVWF  2A
0DB7:  BCF    03.5
0DB8:  MOVF   4C,W
0DB9:  BSF    03.5
0DBA:  MOVWF  29
0DBB:  BCF    03.5
0DBC:  MOVF   4B,W
0DBD:  BSF    03.5
0DBE:  MOVWF  28
0DBF:  MOVLW  F0
0DC0:  MOVWF  2F
0DC1:  MOVLW  A7
0DC2:  MOVWF  2E
0DC3:  MOVLW  5A
0DC4:  MOVWF  2D
0DC5:  MOVLW  81
0DC6:  MOVWF  2C
0DC7:  BCF    03.5
0DC8:  CALL   000
0DC9:  MOVF   7A,W
0DCA:  MOVWF  55
0DCB:  MOVF   79,W
0DCC:  MOVWF  54
0DCD:  MOVF   78,W
0DCE:  MOVWF  53
0DCF:  MOVF   77,W
0DD0:  MOVWF  52
0DD1:  BCF    03.1
0DD2:  CLRF   27
0DD3:  BTFSC  0B.7
0DD4:  BSF    27.7
0DD5:  BCF    0B.7
0DD6:  MOVF   7A,W
0DD7:  BSF    03.5
0DD8:  MOVWF  3E
0DD9:  BCF    03.5
0DDA:  MOVF   79,W
0DDB:  BSF    03.5
0DDC:  MOVWF  3D
0DDD:  BCF    03.5
0DDE:  MOVF   78,W
0DDF:  BSF    03.5
0DE0:  MOVWF  3C
0DE1:  BCF    03.5
0DE2:  MOVF   77,W
0DE3:  BSF    03.5
0DE4:  MOVWF  3B
0DE5:  CLRF   42
0DE6:  CLRF   41
0DE7:  MOVLW  24
0DE8:  MOVWF  40
0DE9:  MOVLW  83
0DEA:  MOVWF  3F
0DEB:  BCF    0A.3
0DEC:  BCF    03.5
0DED:  CALL   5F1
0DEE:  BSF    0A.3
0DEF:  BTFSC  27.7
0DF0:  BSF    0B.7
0DF1:  MOVF   7A,W
0DF2:  BSF    03.5
0DF3:  MOVWF  23
0DF4:  MOVF   79,W
0DF5:  MOVWF  22
0DF6:  MOVF   78,W
0DF7:  MOVWF  21
0DF8:  MOVF   77,W
0DF9:  MOVWF  20
0DFA:  BCF    0A.3
0DFB:  BCF    03.5
0DFC:  CALL   7DE
0DFD:  BSF    0A.3
0DFE:  MOVF   78,W
0DFF:  MOVWF  51
.................... { 
....................    static int8 matrixAndRowAndColumn[3] = {0,0,0}; 
*
182A:  BCF    03.5
182B:  CLRF   3C
182C:  CLRF   3D
182D:  CLRF   3E
....................    // Select Matrix 
....................    int8 matrixNumber = ((int8)(_temperature - temperatureArray[0]))/6; 
....................    // Select Row 
....................    int8 rowNumber = ((int8)(_temperature - temperatureArray[0]))%6; 
....................    // Select Column 
....................    int8 columnNumber = (int8)(_deltaTemperature*6.833 + 20.5); 
....................     
....................    matrixAndRowAndColumn[0] = matrixNumber+1; 
*
0E00:  MOVLW  01
0E01:  ADDWF  4F,W
0E02:  MOVWF  3C
....................    matrixAndRowAndColumn[1] = rowNumber; 
0E03:  MOVF   50,W
0E04:  MOVWF  3D
....................    matrixAndRowAndColumn[2] = columnNumber; 
0E05:  MOVF   51,W
0E06:  MOVWF  3E
....................     
....................    Return(matrixAndRowAndColumn); 
0E07:  MOVLW  3C
0E08:  MOVWF  78
0E09:  MOVLW  00
0E0A:  MOVWF  79
0E0B:  BSF    0A.3
0E0C:  BSF    0A.4
0E0D:  GOTO   08C (RETURN)
.................... } 
....................  
.................... float GetDataAndInterpolate(int8 _matrix, int8 _row, int8 _column, float _temperature, float _deltaTemperature) 
.................... { 
....................    // data1  data2 
....................    // data3  data4 
....................    int8 data1, data2, data3, data4; 
....................    float interpolatedData; 
....................  
....................    switch(_matrix) 
*
1000:  MOVF   4A,W
1001:  XORLW  01
1002:  BTFSC  03.2
1003:  GOTO   014
1004:  XORLW  03
1005:  BTFSC  03.2
1006:  GOTO   081
1007:  XORLW  01
1008:  BTFSC  03.2
1009:  GOTO   0EE
100A:  XORLW  07
100B:  BTFSC  03.2
100C:  GOTO   15B
100D:  XORLW  01
100E:  BTFSC  03.2
100F:  GOTO   1C8
1010:  XORLW  03
1011:  BTFSC  03.2
1012:  GOTO   235
1013:  GOTO   2A2
....................    { 
....................       case 1: 
....................          data1 = oneTo6th[_row][_column-1]; 
1014:  MOVF   4B,W
1015:  BSF    03.5
1016:  MOVWF  22
1017:  MOVLW  29
1018:  MOVWF  23
1019:  BCF    0A.4
101A:  BSF    0A.3
101B:  BCF    03.5
101C:  CALL   60E
101D:  BSF    0A.4
101E:  BCF    0A.3
101F:  MOVF   78,W
1020:  BSF    03.5
1021:  MOVWF  20
1022:  MOVLW  01
1023:  BCF    03.5
1024:  SUBWF  4C,W
1025:  BSF    03.5
1026:  ADDWF  20,W
1027:  BCF    0A.4
1028:  BCF    03.5
1029:  CALL   02F
102A:  BSF    0A.4
102B:  MOVWF  78
102C:  MOVWF  55
....................          data2 = oneTo6th[_row][_column]; 
102D:  MOVF   4B,W
102E:  BSF    03.5
102F:  MOVWF  22
1030:  MOVLW  29
1031:  MOVWF  23
1032:  BCF    0A.4
1033:  BSF    0A.3
1034:  BCF    03.5
1035:  CALL   60E
1036:  BSF    0A.4
1037:  BCF    0A.3
1038:  MOVF   4C,W
1039:  ADDWF  78,W
103A:  BCF    0A.4
103B:  CALL   02F
103C:  BSF    0A.4
103D:  MOVWF  78
103E:  MOVWF  56
....................          if (_row == 5) 
103F:  MOVF   4B,W
1040:  SUBLW  05
1041:  BTFSS  03.2
1042:  GOTO   051
....................          { 
....................             data3 = seventhTo12th[0][_column-1]; 
1043:  MOVLW  01
1044:  SUBWF  4C,W
1045:  BCF    0A.4
1046:  CALL   12C
1047:  BSF    0A.4
1048:  MOVWF  78
1049:  MOVWF  57
....................             data4 = seventhTo12th[0][_column]; 
104A:  MOVF   4C,W
104B:  BCF    0A.4
104C:  CALL   12C
104D:  BSF    0A.4
104E:  MOVWF  78
104F:  MOVWF  58
....................          } 
1050:  GOTO   080
....................          else 
....................          { 
....................             data3 = oneTo6th[_row+1][_column-1]; 
1051:  MOVLW  01
1052:  ADDWF  4B,W
1053:  BSF    03.5
1054:  MOVWF  21
1055:  MOVWF  22
1056:  MOVLW  29
1057:  MOVWF  23
1058:  BCF    0A.4
1059:  BSF    0A.3
105A:  BCF    03.5
105B:  CALL   60E
105C:  BSF    0A.4
105D:  BCF    0A.3
105E:  MOVF   78,W
105F:  BSF    03.5
1060:  MOVWF  20
1061:  MOVLW  01
1062:  BCF    03.5
1063:  SUBWF  4C,W
1064:  BSF    03.5
1065:  ADDWF  20,W
1066:  BCF    0A.4
1067:  BCF    03.5
1068:  CALL   02F
1069:  BSF    0A.4
106A:  MOVWF  78
106B:  MOVWF  57
....................             data4 = oneTo6th[_row+1][_column]; 
106C:  MOVLW  01
106D:  ADDWF  4B,W
106E:  BSF    03.5
106F:  MOVWF  21
1070:  MOVWF  22
1071:  MOVLW  29
1072:  MOVWF  23
1073:  BCF    0A.4
1074:  BSF    0A.3
1075:  BCF    03.5
1076:  CALL   60E
1077:  BSF    0A.4
1078:  BCF    0A.3
1079:  MOVF   4C,W
107A:  ADDWF  78,W
107B:  BCF    0A.4
107C:  CALL   02F
107D:  BSF    0A.4
107E:  MOVWF  78
107F:  MOVWF  58
....................          } 
....................          break; 
1080:  GOTO   2FC
....................       case 2: 
....................          data1 = seventhTo12th[_row][_column-1]; 
1081:  MOVF   4B,W
1082:  BSF    03.5
1083:  MOVWF  22
1084:  MOVLW  29
1085:  MOVWF  23
1086:  BCF    0A.4
1087:  BSF    0A.3
1088:  BCF    03.5
1089:  CALL   60E
108A:  BSF    0A.4
108B:  BCF    0A.3
108C:  MOVF   78,W
108D:  BSF    03.5
108E:  MOVWF  20
108F:  MOVLW  01
1090:  BCF    03.5
1091:  SUBWF  4C,W
1092:  BSF    03.5
1093:  ADDWF  20,W
1094:  BCF    0A.4
1095:  BCF    03.5
1096:  CALL   12C
1097:  BSF    0A.4
1098:  MOVWF  78
1099:  MOVWF  55
....................          data2 = seventhTo12th[_row][_column]; 
109A:  MOVF   4B,W
109B:  BSF    03.5
109C:  MOVWF  22
109D:  MOVLW  29
109E:  MOVWF  23
109F:  BCF    0A.4
10A0:  BSF    0A.3
10A1:  BCF    03.5
10A2:  CALL   60E
10A3:  BSF    0A.4
10A4:  BCF    0A.3
10A5:  MOVF   4C,W
10A6:  ADDWF  78,W
10A7:  BCF    0A.4
10A8:  CALL   12C
10A9:  BSF    0A.4
10AA:  MOVWF  78
10AB:  MOVWF  56
....................          if (_row == 5) 
10AC:  MOVF   4B,W
10AD:  SUBLW  05
10AE:  BTFSS  03.2
10AF:  GOTO   0BE
....................          { 
....................             data3 = thirteenthTo18th[0][_column-1]; 
10B0:  MOVLW  01
10B1:  SUBWF  4C,W
10B2:  BCF    0A.4
10B3:  CALL   229
10B4:  BSF    0A.4
10B5:  MOVWF  78
10B6:  MOVWF  57
....................             data4 = thirteenthTo18th[0][_column]; 
10B7:  MOVF   4C,W
10B8:  BCF    0A.4
10B9:  CALL   229
10BA:  BSF    0A.4
10BB:  MOVWF  78
10BC:  MOVWF  58
....................          } 
10BD:  GOTO   0ED
....................          else 
....................          { 
....................             data3 = seventhTo12th[_row+1][_column-1]; 
10BE:  MOVLW  01
10BF:  ADDWF  4B,W
10C0:  BSF    03.5
10C1:  MOVWF  21
10C2:  MOVWF  22
10C3:  MOVLW  29
10C4:  MOVWF  23
10C5:  BCF    0A.4
10C6:  BSF    0A.3
10C7:  BCF    03.5
10C8:  CALL   60E
10C9:  BSF    0A.4
10CA:  BCF    0A.3
10CB:  MOVF   78,W
10CC:  BSF    03.5
10CD:  MOVWF  20
10CE:  MOVLW  01
10CF:  BCF    03.5
10D0:  SUBWF  4C,W
10D1:  BSF    03.5
10D2:  ADDWF  20,W
10D3:  BCF    0A.4
10D4:  BCF    03.5
10D5:  CALL   12C
10D6:  BSF    0A.4
10D7:  MOVWF  78
10D8:  MOVWF  57
....................             data4 = seventhTo12th[_row+1][_column]; 
10D9:  MOVLW  01
10DA:  ADDWF  4B,W
10DB:  BSF    03.5
10DC:  MOVWF  21
10DD:  MOVWF  22
10DE:  MOVLW  29
10DF:  MOVWF  23
10E0:  BCF    0A.4
10E1:  BSF    0A.3
10E2:  BCF    03.5
10E3:  CALL   60E
10E4:  BSF    0A.4
10E5:  BCF    0A.3
10E6:  MOVF   4C,W
10E7:  ADDWF  78,W
10E8:  BCF    0A.4
10E9:  CALL   12C
10EA:  BSF    0A.4
10EB:  MOVWF  78
10EC:  MOVWF  58
....................          } 
....................          break; 
10ED:  GOTO   2FC
....................       case 3: 
....................          data1 = thirteenthTo18th[_row][_column-1]; 
10EE:  MOVF   4B,W
10EF:  BSF    03.5
10F0:  MOVWF  22
10F1:  MOVLW  29
10F2:  MOVWF  23
10F3:  BCF    0A.4
10F4:  BSF    0A.3
10F5:  BCF    03.5
10F6:  CALL   60E
10F7:  BSF    0A.4
10F8:  BCF    0A.3
10F9:  MOVF   78,W
10FA:  BSF    03.5
10FB:  MOVWF  20
10FC:  MOVLW  01
10FD:  BCF    03.5
10FE:  SUBWF  4C,W
10FF:  BSF    03.5
1100:  ADDWF  20,W
1101:  BCF    0A.4
1102:  BCF    03.5
1103:  CALL   229
1104:  BSF    0A.4
1105:  MOVWF  78
1106:  MOVWF  55
....................          data2 = thirteenthTo18th[_row][_column]; 
1107:  MOVF   4B,W
1108:  BSF    03.5
1109:  MOVWF  22
110A:  MOVLW  29
110B:  MOVWF  23
110C:  BCF    0A.4
110D:  BSF    0A.3
110E:  BCF    03.5
110F:  CALL   60E
1110:  BSF    0A.4
1111:  BCF    0A.3
1112:  MOVF   4C,W
1113:  ADDWF  78,W
1114:  BCF    0A.4
1115:  CALL   229
1116:  BSF    0A.4
1117:  MOVWF  78
1118:  MOVWF  56
....................          if (_row == 5) 
1119:  MOVF   4B,W
111A:  SUBLW  05
111B:  BTFSS  03.2
111C:  GOTO   12B
....................          { 
....................             data3 = nineteenthTo24th[0][_column-1]; 
111D:  MOVLW  01
111E:  SUBWF  4C,W
111F:  BCF    0A.4
1120:  CALL   326
1121:  BSF    0A.4
1122:  MOVWF  78
1123:  MOVWF  57
....................             data4 = nineteenthTo24th[0][_column]; 
1124:  MOVF   4C,W
1125:  BCF    0A.4
1126:  CALL   326
1127:  BSF    0A.4
1128:  MOVWF  78
1129:  MOVWF  58
....................          } 
112A:  GOTO   15A
....................          else 
....................          { 
....................             data3 = thirteenthTo18th[_row+1][_column-1]; 
112B:  MOVLW  01
112C:  ADDWF  4B,W
112D:  BSF    03.5
112E:  MOVWF  21
112F:  MOVWF  22
1130:  MOVLW  29
1131:  MOVWF  23
1132:  BCF    0A.4
1133:  BSF    0A.3
1134:  BCF    03.5
1135:  CALL   60E
1136:  BSF    0A.4
1137:  BCF    0A.3
1138:  MOVF   78,W
1139:  BSF    03.5
113A:  MOVWF  20
113B:  MOVLW  01
113C:  BCF    03.5
113D:  SUBWF  4C,W
113E:  BSF    03.5
113F:  ADDWF  20,W
1140:  BCF    0A.4
1141:  BCF    03.5
1142:  CALL   229
1143:  BSF    0A.4
1144:  MOVWF  78
1145:  MOVWF  57
....................             data4 = thirteenthTo18th[_row+1][_column]; 
1146:  MOVLW  01
1147:  ADDWF  4B,W
1148:  BSF    03.5
1149:  MOVWF  21
114A:  MOVWF  22
114B:  MOVLW  29
114C:  MOVWF  23
114D:  BCF    0A.4
114E:  BSF    0A.3
114F:  BCF    03.5
1150:  CALL   60E
1151:  BSF    0A.4
1152:  BCF    0A.3
1153:  MOVF   4C,W
1154:  ADDWF  78,W
1155:  BCF    0A.4
1156:  CALL   229
1157:  BSF    0A.4
1158:  MOVWF  78
1159:  MOVWF  58
....................          } 
....................          break; 
115A:  GOTO   2FC
....................       case 4: 
....................          data1 = nineteenthTo24th[_row][_column-1]; 
115B:  MOVF   4B,W
115C:  BSF    03.5
115D:  MOVWF  22
115E:  MOVLW  29
115F:  MOVWF  23
1160:  BCF    0A.4
1161:  BSF    0A.3
1162:  BCF    03.5
1163:  CALL   60E
1164:  BSF    0A.4
1165:  BCF    0A.3
1166:  MOVF   78,W
1167:  BSF    03.5
1168:  MOVWF  20
1169:  MOVLW  01
116A:  BCF    03.5
116B:  SUBWF  4C,W
116C:  BSF    03.5
116D:  ADDWF  20,W
116E:  BCF    0A.4
116F:  BCF    03.5
1170:  CALL   326
1171:  BSF    0A.4
1172:  MOVWF  78
1173:  MOVWF  55
....................          data2 = nineteenthTo24th[_row][_column]; 
1174:  MOVF   4B,W
1175:  BSF    03.5
1176:  MOVWF  22
1177:  MOVLW  29
1178:  MOVWF  23
1179:  BCF    0A.4
117A:  BSF    0A.3
117B:  BCF    03.5
117C:  CALL   60E
117D:  BSF    0A.4
117E:  BCF    0A.3
117F:  MOVF   4C,W
1180:  ADDWF  78,W
1181:  BCF    0A.4
1182:  CALL   326
1183:  BSF    0A.4
1184:  MOVWF  78
1185:  MOVWF  56
....................          if (_row == 5) 
1186:  MOVF   4B,W
1187:  SUBLW  05
1188:  BTFSS  03.2
1189:  GOTO   198
....................          { 
....................             data3 = twentyfifthTo30th[0][_column-1]; 
118A:  MOVLW  01
118B:  SUBWF  4C,W
118C:  BCF    0A.4
118D:  CALL   423
118E:  BSF    0A.4
118F:  MOVWF  78
1190:  MOVWF  57
....................             data4 = twentyfifthTo30th[0][_column]; 
1191:  MOVF   4C,W
1192:  BCF    0A.4
1193:  CALL   423
1194:  BSF    0A.4
1195:  MOVWF  78
1196:  MOVWF  58
....................          } 
1197:  GOTO   1C7
....................          else 
....................          { 
....................             data3 = nineteenthTo24th[_row+1][_column-1]; 
1198:  MOVLW  01
1199:  ADDWF  4B,W
119A:  BSF    03.5
119B:  MOVWF  21
119C:  MOVWF  22
119D:  MOVLW  29
119E:  MOVWF  23
119F:  BCF    0A.4
11A0:  BSF    0A.3
11A1:  BCF    03.5
11A2:  CALL   60E
11A3:  BSF    0A.4
11A4:  BCF    0A.3
11A5:  MOVF   78,W
11A6:  BSF    03.5
11A7:  MOVWF  20
11A8:  MOVLW  01
11A9:  BCF    03.5
11AA:  SUBWF  4C,W
11AB:  BSF    03.5
11AC:  ADDWF  20,W
11AD:  BCF    0A.4
11AE:  BCF    03.5
11AF:  CALL   326
11B0:  BSF    0A.4
11B1:  MOVWF  78
11B2:  MOVWF  57
....................             data4 = nineteenthTo24th[_row+1][_column]; 
11B3:  MOVLW  01
11B4:  ADDWF  4B,W
11B5:  BSF    03.5
11B6:  MOVWF  21
11B7:  MOVWF  22
11B8:  MOVLW  29
11B9:  MOVWF  23
11BA:  BCF    0A.4
11BB:  BSF    0A.3
11BC:  BCF    03.5
11BD:  CALL   60E
11BE:  BSF    0A.4
11BF:  BCF    0A.3
11C0:  MOVF   4C,W
11C1:  ADDWF  78,W
11C2:  BCF    0A.4
11C3:  CALL   326
11C4:  BSF    0A.4
11C5:  MOVWF  78
11C6:  MOVWF  58
....................          } 
....................          break; 
11C7:  GOTO   2FC
....................       case 5: 
....................          data1 = twentyfifthTo30th[_row][_column-1]; 
11C8:  MOVF   4B,W
11C9:  BSF    03.5
11CA:  MOVWF  22
11CB:  MOVLW  29
11CC:  MOVWF  23
11CD:  BCF    0A.4
11CE:  BSF    0A.3
11CF:  BCF    03.5
11D0:  CALL   60E
11D1:  BSF    0A.4
11D2:  BCF    0A.3
11D3:  MOVF   78,W
11D4:  BSF    03.5
11D5:  MOVWF  20
11D6:  MOVLW  01
11D7:  BCF    03.5
11D8:  SUBWF  4C,W
11D9:  BSF    03.5
11DA:  ADDWF  20,W
11DB:  BCF    0A.4
11DC:  BCF    03.5
11DD:  CALL   423
11DE:  BSF    0A.4
11DF:  MOVWF  78
11E0:  MOVWF  55
....................          data2 = twentyfifthTo30th[_row][_column]; 
11E1:  MOVF   4B,W
11E2:  BSF    03.5
11E3:  MOVWF  22
11E4:  MOVLW  29
11E5:  MOVWF  23
11E6:  BCF    0A.4
11E7:  BSF    0A.3
11E8:  BCF    03.5
11E9:  CALL   60E
11EA:  BSF    0A.4
11EB:  BCF    0A.3
11EC:  MOVF   4C,W
11ED:  ADDWF  78,W
11EE:  BCF    0A.4
11EF:  CALL   423
11F0:  BSF    0A.4
11F1:  MOVWF  78
11F2:  MOVWF  56
....................          if (_row == 5) 
11F3:  MOVF   4B,W
11F4:  SUBLW  05
11F5:  BTFSS  03.2
11F6:  GOTO   205
....................          { 
....................             data3 = thirtyfirstTo36th[0][_column-1]; 
11F7:  MOVLW  01
11F8:  SUBWF  4C,W
11F9:  BCF    0A.4
11FA:  CALL   423
11FB:  BSF    0A.4
11FC:  MOVWF  78
11FD:  MOVWF  57
....................             data4 = thirtyfirstTo36th[0][_column]; 
11FE:  MOVF   4C,W
11FF:  BCF    0A.4
1200:  CALL   423
1201:  BSF    0A.4
1202:  MOVWF  78
1203:  MOVWF  58
....................          } 
1204:  GOTO   234
....................          else 
....................          { 
....................             data3 = twentyfifthTo30th[_row+1][_column-1]; 
1205:  MOVLW  01
1206:  ADDWF  4B,W
1207:  BSF    03.5
1208:  MOVWF  21
1209:  MOVWF  22
120A:  MOVLW  29
120B:  MOVWF  23
120C:  BCF    0A.4
120D:  BSF    0A.3
120E:  BCF    03.5
120F:  CALL   60E
1210:  BSF    0A.4
1211:  BCF    0A.3
1212:  MOVF   78,W
1213:  BSF    03.5
1214:  MOVWF  20
1215:  MOVLW  01
1216:  BCF    03.5
1217:  SUBWF  4C,W
1218:  BSF    03.5
1219:  ADDWF  20,W
121A:  BCF    0A.4
121B:  BCF    03.5
121C:  CALL   423
121D:  BSF    0A.4
121E:  MOVWF  78
121F:  MOVWF  57
....................             data4 = twentyfifthTo30th[_row+1][_column]; 
1220:  MOVLW  01
1221:  ADDWF  4B,W
1222:  BSF    03.5
1223:  MOVWF  21
1224:  MOVWF  22
1225:  MOVLW  29
1226:  MOVWF  23
1227:  BCF    0A.4
1228:  BSF    0A.3
1229:  BCF    03.5
122A:  CALL   60E
122B:  BSF    0A.4
122C:  BCF    0A.3
122D:  MOVF   4C,W
122E:  ADDWF  78,W
122F:  BCF    0A.4
1230:  CALL   423
1231:  BSF    0A.4
1232:  MOVWF  78
1233:  MOVWF  58
....................          } 
....................          break; 
1234:  GOTO   2FC
....................       case 6: 
....................          data1 = thirtyfirstTo36th[_row][_column-1]; 
1235:  MOVF   4B,W
1236:  BSF    03.5
1237:  MOVWF  22
1238:  MOVLW  29
1239:  MOVWF  23
123A:  BCF    0A.4
123B:  BSF    0A.3
123C:  BCF    03.5
123D:  CALL   60E
123E:  BSF    0A.4
123F:  BCF    0A.3
1240:  MOVF   78,W
1241:  BSF    03.5
1242:  MOVWF  20
1243:  MOVLW  01
1244:  BCF    03.5
1245:  SUBWF  4C,W
1246:  BSF    03.5
1247:  ADDWF  20,W
1248:  BCF    0A.4
1249:  BCF    03.5
124A:  CALL   423
124B:  BSF    0A.4
124C:  MOVWF  78
124D:  MOVWF  55
....................          data2 = thirtyfirstTo36th[_row][_column]; 
124E:  MOVF   4B,W
124F:  BSF    03.5
1250:  MOVWF  22
1251:  MOVLW  29
1252:  MOVWF  23
1253:  BCF    0A.4
1254:  BSF    0A.3
1255:  BCF    03.5
1256:  CALL   60E
1257:  BSF    0A.4
1258:  BCF    0A.3
1259:  MOVF   4C,W
125A:  ADDWF  78,W
125B:  BCF    0A.4
125C:  CALL   423
125D:  BSF    0A.4
125E:  MOVWF  78
125F:  MOVWF  56
....................          if (_row == 5) 
1260:  MOVF   4B,W
1261:  SUBLW  05
1262:  BTFSS  03.2
1263:  GOTO   272
....................          { 
....................             data3 = thirtyseventhTo42nd[0][_column-1]; 
1264:  MOVLW  01
1265:  SUBWF  4C,W
1266:  BCF    0A.4
1267:  CALL   520
1268:  BSF    0A.4
1269:  MOVWF  78
126A:  MOVWF  57
....................             data4 = thirtyseventhTo42nd[0][_column]; 
126B:  MOVF   4C,W
126C:  BCF    0A.4
126D:  CALL   520
126E:  BSF    0A.4
126F:  MOVWF  78
1270:  MOVWF  58
....................          } 
1271:  GOTO   2A1
....................          else 
....................          { 
....................             data3 = thirtyfirstTo36th[_row+1][_column-1]; 
1272:  MOVLW  01
1273:  ADDWF  4B,W
1274:  BSF    03.5
1275:  MOVWF  21
1276:  MOVWF  22
1277:  MOVLW  29
1278:  MOVWF  23
1279:  BCF    0A.4
127A:  BSF    0A.3
127B:  BCF    03.5
127C:  CALL   60E
127D:  BSF    0A.4
127E:  BCF    0A.3
127F:  MOVF   78,W
1280:  BSF    03.5
1281:  MOVWF  20
1282:  MOVLW  01
1283:  BCF    03.5
1284:  SUBWF  4C,W
1285:  BSF    03.5
1286:  ADDWF  20,W
1287:  BCF    0A.4
1288:  BCF    03.5
1289:  CALL   423
128A:  BSF    0A.4
128B:  MOVWF  78
128C:  MOVWF  57
....................             data4 = thirtyfirstTo36th[_row+1][_column]; 
128D:  MOVLW  01
128E:  ADDWF  4B,W
128F:  BSF    03.5
1290:  MOVWF  21
1291:  MOVWF  22
1292:  MOVLW  29
1293:  MOVWF  23
1294:  BCF    0A.4
1295:  BSF    0A.3
1296:  BCF    03.5
1297:  CALL   60E
1298:  BSF    0A.4
1299:  BCF    0A.3
129A:  MOVF   4C,W
129B:  ADDWF  78,W
129C:  BCF    0A.4
129D:  CALL   423
129E:  BSF    0A.4
129F:  MOVWF  78
12A0:  MOVWF  58
....................          } 
....................          break; 
12A1:  GOTO   2FC
....................       default: 
....................          data1 = thirtyseventhTo42nd[_row][_column-1]; 
12A2:  MOVF   4B,W
12A3:  BSF    03.5
12A4:  MOVWF  22
12A5:  MOVLW  29
12A6:  MOVWF  23
12A7:  BCF    0A.4
12A8:  BSF    0A.3
12A9:  BCF    03.5
12AA:  CALL   60E
12AB:  BSF    0A.4
12AC:  BCF    0A.3
12AD:  MOVF   78,W
12AE:  BSF    03.5
12AF:  MOVWF  20
12B0:  MOVLW  01
12B1:  BCF    03.5
12B2:  SUBWF  4C,W
12B3:  BSF    03.5
12B4:  ADDWF  20,W
12B5:  BCF    0A.4
12B6:  BCF    03.5
12B7:  CALL   520
12B8:  BSF    0A.4
12B9:  MOVWF  78
12BA:  MOVWF  55
....................          data2 = thirtyseventhTo42nd[_row][_column]; 
12BB:  MOVF   4B,W
12BC:  BSF    03.5
12BD:  MOVWF  22
12BE:  MOVLW  29
12BF:  MOVWF  23
12C0:  BCF    0A.4
12C1:  BSF    0A.3
12C2:  BCF    03.5
12C3:  CALL   60E
12C4:  BSF    0A.4
12C5:  BCF    0A.3
12C6:  MOVF   4C,W
12C7:  ADDWF  78,W
12C8:  BCF    0A.4
12C9:  CALL   520
12CA:  BSF    0A.4
12CB:  MOVWF  78
12CC:  MOVWF  56
....................          data3 = thirtyseventhTo42nd[_row+1][_column-1]; 
12CD:  MOVLW  01
12CE:  ADDWF  4B,W
12CF:  BSF    03.5
12D0:  MOVWF  21
12D1:  MOVWF  22
12D2:  MOVLW  29
12D3:  MOVWF  23
12D4:  BCF    0A.4
12D5:  BSF    0A.3
12D6:  BCF    03.5
12D7:  CALL   60E
12D8:  BSF    0A.4
12D9:  BCF    0A.3
12DA:  MOVF   78,W
12DB:  BSF    03.5
12DC:  MOVWF  20
12DD:  MOVLW  01
12DE:  BCF    03.5
12DF:  SUBWF  4C,W
12E0:  BSF    03.5
12E1:  ADDWF  20,W
12E2:  BCF    0A.4
12E3:  BCF    03.5
12E4:  CALL   520
12E5:  BSF    0A.4
12E6:  MOVWF  78
12E7:  MOVWF  57
....................          data4 = thirtyseventhTo42nd[_row+1][_column]; 
12E8:  MOVLW  01
12E9:  ADDWF  4B,W
12EA:  BSF    03.5
12EB:  MOVWF  21
12EC:  MOVWF  22
12ED:  MOVLW  29
12EE:  MOVWF  23
12EF:  BCF    0A.4
12F0:  BSF    0A.3
12F1:  BCF    03.5
12F2:  CALL   60E
12F3:  BSF    0A.4
12F4:  BCF    0A.3
12F5:  MOVF   4C,W
12F6:  ADDWF  78,W
12F7:  BCF    0A.4
12F8:  CALL   520
12F9:  BSF    0A.4
12FA:  MOVWF  78
12FB:  MOVWF  58
....................          break;    
....................    } 
....................     
....................    // 2D INTERPOLATION 
....................    // Known Steps => can be more modular 
....................    float x1 = (float)((int8)(_deltaTemperature)); 
....................    float x2 = (float)((int8)(_deltaTemperature)+1); 
....................    float y1 = (float)((int8)(_temperature)); 
....................    float y2 = (float)((int8)(_temperature)+1); 
....................    float fx_y1 = ((x2-_deltaTemperature)/(x2-x1))*data1 + ((_deltaTemperature-x1)/(x2-x1))*data2; 
....................    float fx_y2 = ((x2-_deltaTemperature)/(x2-x1))*data3 + ((_deltaTemperature-x1)/(x2-x1))*data4; 
12FC:  MOVF   54,W
12FD:  BSF    03.5
12FE:  MOVWF  23
12FF:  BCF    03.5
1300:  MOVF   53,W
1301:  BSF    03.5
1302:  MOVWF  22
1303:  BCF    03.5
1304:  MOVF   52,W
1305:  BSF    03.5
1306:  MOVWF  21
1307:  BCF    03.5
1308:  MOVF   51,W
1309:  BSF    03.5
130A:  MOVWF  20
130B:  BCF    0A.4
130C:  BCF    03.5
130D:  CALL   7DE
130E:  BSF    0A.4
130F:  BSF    03.5
1310:  CLRF   29
1311:  MOVF   78,W
1312:  MOVWF  28
1313:  BCF    0A.4
1314:  BCF    03.5
1315:  CALL   79A
1316:  BSF    0A.4
1317:  MOVF   7A,W
1318:  MOVWF  60
1319:  MOVF   79,W
131A:  MOVWF  5F
131B:  MOVF   78,W
131C:  MOVWF  5E
131D:  MOVF   77,W
131E:  MOVWF  5D
131F:  MOVF   54,W
1320:  BSF    03.5
1321:  MOVWF  23
1322:  BCF    03.5
1323:  MOVF   53,W
1324:  BSF    03.5
1325:  MOVWF  22
1326:  BCF    03.5
1327:  MOVF   52,W
1328:  BSF    03.5
1329:  MOVWF  21
132A:  BCF    03.5
132B:  MOVF   51,W
132C:  BSF    03.5
132D:  MOVWF  20
132E:  BCF    0A.4
132F:  BCF    03.5
1330:  CALL   7DE
1331:  BSF    0A.4
1332:  MOVLW  01
1333:  ADDWF  78,W
1334:  BSF    03.5
1335:  CLRF   29
1336:  MOVWF  28
1337:  BCF    0A.4
1338:  BCF    03.5
1339:  CALL   79A
133A:  BSF    0A.4
133B:  MOVF   7A,W
133C:  MOVWF  64
133D:  MOVF   79,W
133E:  MOVWF  63
133F:  MOVF   78,W
1340:  MOVWF  62
1341:  MOVF   77,W
1342:  MOVWF  61
1343:  MOVF   50,W
1344:  BSF    03.5
1345:  MOVWF  23
1346:  BCF    03.5
1347:  MOVF   4F,W
1348:  BSF    03.5
1349:  MOVWF  22
134A:  BCF    03.5
134B:  MOVF   4E,W
134C:  BSF    03.5
134D:  MOVWF  21
134E:  BCF    03.5
134F:  MOVF   4D,W
1350:  BSF    03.5
1351:  MOVWF  20
1352:  BCF    0A.4
1353:  BCF    03.5
1354:  CALL   7DE
1355:  BSF    0A.4
1356:  BSF    03.5
1357:  CLRF   29
1358:  MOVF   78,W
1359:  MOVWF  28
135A:  BCF    0A.4
135B:  BCF    03.5
135C:  CALL   79A
135D:  BSF    0A.4
135E:  MOVF   7A,W
135F:  MOVWF  68
1360:  MOVF   79,W
1361:  MOVWF  67
1362:  MOVF   78,W
1363:  MOVWF  66
1364:  MOVF   77,W
1365:  MOVWF  65
1366:  MOVF   50,W
1367:  BSF    03.5
1368:  MOVWF  23
1369:  BCF    03.5
136A:  MOVF   4F,W
136B:  BSF    03.5
136C:  MOVWF  22
136D:  BCF    03.5
136E:  MOVF   4E,W
136F:  BSF    03.5
1370:  MOVWF  21
1371:  BCF    03.5
1372:  MOVF   4D,W
1373:  BSF    03.5
1374:  MOVWF  20
1375:  BCF    0A.4
1376:  BCF    03.5
1377:  CALL   7DE
1378:  BSF    0A.4
1379:  MOVLW  01
137A:  ADDWF  78,W
137B:  BSF    03.5
137C:  CLRF   29
137D:  MOVWF  28
137E:  BCF    0A.4
137F:  BCF    03.5
1380:  CALL   79A
1381:  BSF    0A.4
1382:  MOVF   7A,W
1383:  MOVWF  6C
1384:  MOVF   79,W
1385:  MOVWF  6B
1386:  MOVF   78,W
1387:  MOVWF  6A
1388:  MOVF   77,W
1389:  MOVWF  69
138A:  BSF    03.1
138B:  CLRF   27
138C:  BTFSC  0B.7
138D:  BSF    27.7
138E:  BCF    0B.7
138F:  MOVF   64,W
1390:  BSF    03.5
1391:  MOVWF  3E
1392:  BCF    03.5
1393:  MOVF   63,W
1394:  BSF    03.5
1395:  MOVWF  3D
1396:  BCF    03.5
1397:  MOVF   62,W
1398:  BSF    03.5
1399:  MOVWF  3C
139A:  BCF    03.5
139B:  MOVF   61,W
139C:  BSF    03.5
139D:  MOVWF  3B
139E:  BCF    03.5
139F:  MOVF   54,W
13A0:  BSF    03.5
13A1:  MOVWF  42
13A2:  BCF    03.5
13A3:  MOVF   53,W
13A4:  BSF    03.5
13A5:  MOVWF  41
13A6:  BCF    03.5
13A7:  MOVF   52,W
13A8:  BSF    03.5
13A9:  MOVWF  40
13AA:  BCF    03.5
13AB:  MOVF   51,W
13AC:  BSF    03.5
13AD:  MOVWF  3F
13AE:  BCF    0A.4
13AF:  BCF    03.5
13B0:  CALL   5F1
13B1:  BSF    0A.4
13B2:  BTFSC  27.7
13B3:  BSF    0B.7
13B4:  MOVF   7A,W
13B5:  BSF    03.5
13B6:  MOVWF  23
13B7:  MOVF   79,W
13B8:  MOVWF  22
13B9:  MOVF   78,W
13BA:  MOVWF  21
13BB:  MOVF   77,W
13BC:  MOVWF  20
13BD:  BSF    03.1
13BE:  BCF    03.5
13BF:  CLRF   27
13C0:  BTFSC  0B.7
13C1:  BSF    27.7
13C2:  BCF    0B.7
13C3:  MOVF   64,W
13C4:  BSF    03.5
13C5:  MOVWF  3E
13C6:  BCF    03.5
13C7:  MOVF   63,W
13C8:  BSF    03.5
13C9:  MOVWF  3D
13CA:  BCF    03.5
13CB:  MOVF   62,W
13CC:  BSF    03.5
13CD:  MOVWF  3C
13CE:  BCF    03.5
13CF:  MOVF   61,W
13D0:  BSF    03.5
13D1:  MOVWF  3B
13D2:  BCF    03.5
13D3:  MOVF   60,W
13D4:  BSF    03.5
13D5:  MOVWF  42
13D6:  BCF    03.5
13D7:  MOVF   5F,W
13D8:  BSF    03.5
13D9:  MOVWF  41
13DA:  BCF    03.5
13DB:  MOVF   5E,W
13DC:  BSF    03.5
13DD:  MOVWF  40
13DE:  BCF    03.5
13DF:  MOVF   5D,W
13E0:  BSF    03.5
13E1:  MOVWF  3F
13E2:  BCF    0A.4
13E3:  BCF    03.5
13E4:  CALL   5F1
13E5:  BSF    0A.4
13E6:  BTFSC  27.7
13E7:  BSF    0B.7
13E8:  BSF    03.5
13E9:  MOVF   23,W
13EA:  MOVWF  2B
13EB:  MOVF   22,W
13EC:  MOVWF  2A
13ED:  MOVF   21,W
13EE:  MOVWF  29
13EF:  MOVF   20,W
13F0:  MOVWF  28
13F1:  MOVF   7A,W
13F2:  MOVWF  2F
13F3:  MOVF   79,W
13F4:  MOVWF  2E
13F5:  MOVF   78,W
13F6:  MOVWF  2D
13F7:  MOVF   77,W
13F8:  MOVWF  2C
13F9:  BCF    0A.4
13FA:  BSF    0A.3
13FB:  BCF    03.5
13FC:  CALL   077
13FD:  BSF    0A.4
13FE:  BCF    0A.3
13FF:  MOVF   7A,W
1400:  BSF    03.5
1401:  MOVWF  23
1402:  MOVF   79,W
1403:  MOVWF  22
1404:  MOVF   78,W
1405:  MOVWF  21
1406:  MOVF   77,W
1407:  MOVWF  20
1408:  CLRF   29
1409:  BCF    03.5
140A:  MOVF   55,W
140B:  BSF    03.5
140C:  MOVWF  28
140D:  BCF    0A.4
140E:  BCF    03.5
140F:  CALL   79A
1410:  BSF    0A.4
1411:  BSF    03.5
1412:  MOVF   23,W
1413:  MOVWF  2B
1414:  MOVF   22,W
1415:  MOVWF  2A
1416:  MOVF   21,W
1417:  MOVWF  29
1418:  MOVF   20,W
1419:  MOVWF  28
141A:  MOVF   7A,W
141B:  MOVWF  2F
141C:  MOVF   79,W
141D:  MOVWF  2E
141E:  MOVF   78,W
141F:  MOVWF  2D
1420:  MOVF   77,W
1421:  MOVWF  2C
1422:  BCF    0A.4
1423:  BSF    0A.3
1424:  BCF    03.5
1425:  CALL   000
1426:  BSF    0A.4
1427:  BCF    0A.3
1428:  MOVF   7A,W
1429:  BSF    03.5
142A:  MOVWF  23
142B:  MOVF   79,W
142C:  MOVWF  22
142D:  MOVF   78,W
142E:  MOVWF  21
142F:  MOVF   77,W
1430:  MOVWF  20
1431:  BSF    03.1
1432:  BCF    03.5
1433:  CLRF   27
1434:  BTFSC  0B.7
1435:  BSF    27.7
1436:  BCF    0B.7
1437:  MOVF   54,W
1438:  BSF    03.5
1439:  MOVWF  3E
143A:  BCF    03.5
143B:  MOVF   53,W
143C:  BSF    03.5
143D:  MOVWF  3D
143E:  BCF    03.5
143F:  MOVF   52,W
1440:  BSF    03.5
1441:  MOVWF  3C
1442:  BCF    03.5
1443:  MOVF   51,W
1444:  BSF    03.5
1445:  MOVWF  3B
1446:  BCF    03.5
1447:  MOVF   60,W
1448:  BSF    03.5
1449:  MOVWF  42
144A:  BCF    03.5
144B:  MOVF   5F,W
144C:  BSF    03.5
144D:  MOVWF  41
144E:  BCF    03.5
144F:  MOVF   5E,W
1450:  BSF    03.5
1451:  MOVWF  40
1452:  BCF    03.5
1453:  MOVF   5D,W
1454:  BSF    03.5
1455:  MOVWF  3F
1456:  BCF    0A.4
1457:  BCF    03.5
1458:  CALL   5F1
1459:  BSF    0A.4
145A:  BTFSC  27.7
145B:  BSF    0B.7
145C:  MOVF   7A,W
145D:  BSF    03.5
145E:  MOVWF  27
145F:  MOVF   79,W
1460:  MOVWF  26
1461:  MOVF   78,W
1462:  MOVWF  25
1463:  MOVF   77,W
1464:  MOVWF  24
1465:  BSF    03.1
1466:  BCF    03.5
1467:  CLRF   27
1468:  BTFSC  0B.7
1469:  BSF    27.7
146A:  BCF    0B.7
146B:  MOVF   64,W
146C:  BSF    03.5
146D:  MOVWF  3E
146E:  BCF    03.5
146F:  MOVF   63,W
1470:  BSF    03.5
1471:  MOVWF  3D
1472:  BCF    03.5
1473:  MOVF   62,W
1474:  BSF    03.5
1475:  MOVWF  3C
1476:  BCF    03.5
1477:  MOVF   61,W
1478:  BSF    03.5
1479:  MOVWF  3B
147A:  BCF    03.5
147B:  MOVF   60,W
147C:  BSF    03.5
147D:  MOVWF  42
147E:  BCF    03.5
147F:  MOVF   5F,W
1480:  BSF    03.5
1481:  MOVWF  41
1482:  BCF    03.5
1483:  MOVF   5E,W
1484:  BSF    03.5
1485:  MOVWF  40
1486:  BCF    03.5
1487:  MOVF   5D,W
1488:  BSF    03.5
1489:  MOVWF  3F
148A:  BCF    0A.4
148B:  BCF    03.5
148C:  CALL   5F1
148D:  BSF    0A.4
148E:  BTFSC  27.7
148F:  BSF    0B.7
1490:  BSF    03.5
1491:  MOVF   27,W
1492:  MOVWF  2B
1493:  MOVF   26,W
1494:  MOVWF  2A
1495:  MOVF   25,W
1496:  MOVWF  29
1497:  MOVF   24,W
1498:  MOVWF  28
1499:  MOVF   7A,W
149A:  MOVWF  2F
149B:  MOVF   79,W
149C:  MOVWF  2E
149D:  MOVF   78,W
149E:  MOVWF  2D
149F:  MOVF   77,W
14A0:  MOVWF  2C
14A1:  BCF    0A.4
14A2:  BSF    0A.3
14A3:  BCF    03.5
14A4:  CALL   077
14A5:  BSF    0A.4
14A6:  BCF    0A.3
14A7:  MOVF   7A,W
14A8:  BSF    03.5
14A9:  MOVWF  27
14AA:  MOVF   79,W
14AB:  MOVWF  26
14AC:  MOVF   78,W
14AD:  MOVWF  25
14AE:  MOVF   77,W
14AF:  MOVWF  24
14B0:  CLRF   29
14B1:  BCF    03.5
14B2:  MOVF   56,W
14B3:  BSF    03.5
14B4:  MOVWF  28
14B5:  BCF    0A.4
14B6:  BCF    03.5
14B7:  CALL   79A
14B8:  BSF    0A.4
14B9:  BSF    03.5
14BA:  MOVF   27,W
14BB:  MOVWF  2B
14BC:  MOVF   26,W
14BD:  MOVWF  2A
14BE:  MOVF   25,W
14BF:  MOVWF  29
14C0:  MOVF   24,W
14C1:  MOVWF  28
14C2:  MOVF   7A,W
14C3:  MOVWF  2F
14C4:  MOVF   79,W
14C5:  MOVWF  2E
14C6:  MOVF   78,W
14C7:  MOVWF  2D
14C8:  MOVF   77,W
14C9:  MOVWF  2C
14CA:  BCF    0A.4
14CB:  BSF    0A.3
14CC:  BCF    03.5
14CD:  CALL   000
14CE:  BSF    0A.4
14CF:  BCF    0A.3
14D0:  BCF    03.1
14D1:  CLRF   27
14D2:  BTFSC  0B.7
14D3:  BSF    27.7
14D4:  BCF    0B.7
14D5:  BSF    03.5
14D6:  MOVF   23,W
14D7:  MOVWF  3E
14D8:  MOVF   22,W
14D9:  MOVWF  3D
14DA:  MOVF   21,W
14DB:  MOVWF  3C
14DC:  MOVF   20,W
14DD:  MOVWF  3B
14DE:  MOVF   7A,W
14DF:  MOVWF  42
14E0:  MOVF   79,W
14E1:  MOVWF  41
14E2:  MOVF   78,W
14E3:  MOVWF  40
14E4:  MOVF   77,W
14E5:  MOVWF  3F
14E6:  BCF    0A.4
14E7:  BCF    03.5
14E8:  CALL   5F1
14E9:  BSF    0A.4
14EA:  BTFSC  27.7
14EB:  BSF    0B.7
14EC:  MOVF   7A,W
14ED:  MOVWF  70
14EE:  MOVF   79,W
14EF:  MOVWF  6F
14F0:  MOVF   78,W
14F1:  MOVWF  6E
14F2:  MOVF   77,W
14F3:  MOVWF  6D
14F4:  BSF    03.1
14F5:  CLRF   27
14F6:  BTFSC  0B.7
14F7:  BSF    27.7
14F8:  BCF    0B.7
14F9:  MOVF   64,W
14FA:  BSF    03.5
14FB:  MOVWF  3E
14FC:  BCF    03.5
14FD:  MOVF   63,W
14FE:  BSF    03.5
14FF:  MOVWF  3D
1500:  BCF    03.5
1501:  MOVF   62,W
1502:  BSF    03.5
1503:  MOVWF  3C
1504:  BCF    03.5
1505:  MOVF   61,W
1506:  BSF    03.5
1507:  MOVWF  3B
1508:  BCF    03.5
1509:  MOVF   54,W
150A:  BSF    03.5
150B:  MOVWF  42
150C:  BCF    03.5
150D:  MOVF   53,W
150E:  BSF    03.5
150F:  MOVWF  41
1510:  BCF    03.5
1511:  MOVF   52,W
1512:  BSF    03.5
1513:  MOVWF  40
1514:  BCF    03.5
1515:  MOVF   51,W
1516:  BSF    03.5
1517:  MOVWF  3F
1518:  BCF    0A.4
1519:  BCF    03.5
151A:  CALL   5F1
151B:  BSF    0A.4
151C:  BTFSC  27.7
151D:  BSF    0B.7
151E:  MOVF   7A,W
151F:  BSF    03.5
1520:  MOVWF  23
1521:  MOVF   79,W
1522:  MOVWF  22
1523:  MOVF   78,W
1524:  MOVWF  21
1525:  MOVF   77,W
1526:  MOVWF  20
1527:  BSF    03.1
1528:  BCF    03.5
1529:  CLRF   27
152A:  BTFSC  0B.7
152B:  BSF    27.7
152C:  BCF    0B.7
152D:  MOVF   64,W
152E:  BSF    03.5
152F:  MOVWF  3E
1530:  BCF    03.5
1531:  MOVF   63,W
1532:  BSF    03.5
1533:  MOVWF  3D
1534:  BCF    03.5
1535:  MOVF   62,W
1536:  BSF    03.5
1537:  MOVWF  3C
1538:  BCF    03.5
1539:  MOVF   61,W
153A:  BSF    03.5
153B:  MOVWF  3B
153C:  BCF    03.5
153D:  MOVF   60,W
153E:  BSF    03.5
153F:  MOVWF  42
1540:  BCF    03.5
1541:  MOVF   5F,W
1542:  BSF    03.5
1543:  MOVWF  41
1544:  BCF    03.5
1545:  MOVF   5E,W
1546:  BSF    03.5
1547:  MOVWF  40
1548:  BCF    03.5
1549:  MOVF   5D,W
154A:  BSF    03.5
154B:  MOVWF  3F
154C:  BCF    0A.4
154D:  BCF    03.5
154E:  CALL   5F1
154F:  BSF    0A.4
1550:  BTFSC  27.7
1551:  BSF    0B.7
1552:  BSF    03.5
1553:  MOVF   23,W
1554:  MOVWF  2B
1555:  MOVF   22,W
1556:  MOVWF  2A
1557:  MOVF   21,W
1558:  MOVWF  29
1559:  MOVF   20,W
155A:  MOVWF  28
155B:  MOVF   7A,W
155C:  MOVWF  2F
155D:  MOVF   79,W
155E:  MOVWF  2E
155F:  MOVF   78,W
1560:  MOVWF  2D
1561:  MOVF   77,W
1562:  MOVWF  2C
1563:  BCF    0A.4
1564:  BSF    0A.3
1565:  BCF    03.5
1566:  CALL   077
1567:  BSF    0A.4
1568:  BCF    0A.3
1569:  MOVF   7A,W
156A:  BSF    03.5
156B:  MOVWF  23
156C:  MOVF   79,W
156D:  MOVWF  22
156E:  MOVF   78,W
156F:  MOVWF  21
1570:  MOVF   77,W
1571:  MOVWF  20
1572:  CLRF   29
1573:  BCF    03.5
1574:  MOVF   57,W
1575:  BSF    03.5
1576:  MOVWF  28
1577:  BCF    0A.4
1578:  BCF    03.5
1579:  CALL   79A
157A:  BSF    0A.4
157B:  BSF    03.5
157C:  MOVF   23,W
157D:  MOVWF  2B
157E:  MOVF   22,W
157F:  MOVWF  2A
1580:  MOVF   21,W
1581:  MOVWF  29
1582:  MOVF   20,W
1583:  MOVWF  28
1584:  MOVF   7A,W
1585:  MOVWF  2F
1586:  MOVF   79,W
1587:  MOVWF  2E
1588:  MOVF   78,W
1589:  MOVWF  2D
158A:  MOVF   77,W
158B:  MOVWF  2C
158C:  BCF    0A.4
158D:  BSF    0A.3
158E:  BCF    03.5
158F:  CALL   000
1590:  BSF    0A.4
1591:  BCF    0A.3
1592:  MOVF   7A,W
1593:  BSF    03.5
1594:  MOVWF  23
1595:  MOVF   79,W
1596:  MOVWF  22
1597:  MOVF   78,W
1598:  MOVWF  21
1599:  MOVF   77,W
159A:  MOVWF  20
159B:  BSF    03.1
159C:  BCF    03.5
159D:  CLRF   27
159E:  BTFSC  0B.7
159F:  BSF    27.7
15A0:  BCF    0B.7
15A1:  MOVF   54,W
15A2:  BSF    03.5
15A3:  MOVWF  3E
15A4:  BCF    03.5
15A5:  MOVF   53,W
15A6:  BSF    03.5
15A7:  MOVWF  3D
15A8:  BCF    03.5
15A9:  MOVF   52,W
15AA:  BSF    03.5
15AB:  MOVWF  3C
15AC:  BCF    03.5
15AD:  MOVF   51,W
15AE:  BSF    03.5
15AF:  MOVWF  3B
15B0:  BCF    03.5
15B1:  MOVF   60,W
15B2:  BSF    03.5
15B3:  MOVWF  42
15B4:  BCF    03.5
15B5:  MOVF   5F,W
15B6:  BSF    03.5
15B7:  MOVWF  41
15B8:  BCF    03.5
15B9:  MOVF   5E,W
15BA:  BSF    03.5
15BB:  MOVWF  40
15BC:  BCF    03.5
15BD:  MOVF   5D,W
15BE:  BSF    03.5
15BF:  MOVWF  3F
15C0:  BCF    0A.4
15C1:  BCF    03.5
15C2:  CALL   5F1
15C3:  BSF    0A.4
15C4:  BTFSC  27.7
15C5:  BSF    0B.7
15C6:  MOVF   7A,W
15C7:  BSF    03.5
15C8:  MOVWF  27
15C9:  MOVF   79,W
15CA:  MOVWF  26
15CB:  MOVF   78,W
15CC:  MOVWF  25
15CD:  MOVF   77,W
15CE:  MOVWF  24
15CF:  BSF    03.1
15D0:  BCF    03.5
15D1:  CLRF   27
15D2:  BTFSC  0B.7
15D3:  BSF    27.7
15D4:  BCF    0B.7
15D5:  MOVF   64,W
15D6:  BSF    03.5
15D7:  MOVWF  3E
15D8:  BCF    03.5
15D9:  MOVF   63,W
15DA:  BSF    03.5
15DB:  MOVWF  3D
15DC:  BCF    03.5
15DD:  MOVF   62,W
15DE:  BSF    03.5
15DF:  MOVWF  3C
15E0:  BCF    03.5
15E1:  MOVF   61,W
15E2:  BSF    03.5
15E3:  MOVWF  3B
15E4:  BCF    03.5
15E5:  MOVF   60,W
15E6:  BSF    03.5
15E7:  MOVWF  42
15E8:  BCF    03.5
15E9:  MOVF   5F,W
15EA:  BSF    03.5
15EB:  MOVWF  41
15EC:  BCF    03.5
15ED:  MOVF   5E,W
15EE:  BSF    03.5
15EF:  MOVWF  40
15F0:  BCF    03.5
15F1:  MOVF   5D,W
15F2:  BSF    03.5
15F3:  MOVWF  3F
15F4:  BCF    0A.4
15F5:  BCF    03.5
15F6:  CALL   5F1
15F7:  BSF    0A.4
15F8:  BTFSC  27.7
15F9:  BSF    0B.7
15FA:  BSF    03.5
15FB:  MOVF   27,W
15FC:  MOVWF  2B
15FD:  MOVF   26,W
15FE:  MOVWF  2A
15FF:  MOVF   25,W
1600:  MOVWF  29
1601:  MOVF   24,W
1602:  MOVWF  28
1603:  MOVF   7A,W
1604:  MOVWF  2F
1605:  MOVF   79,W
1606:  MOVWF  2E
1607:  MOVF   78,W
1608:  MOVWF  2D
1609:  MOVF   77,W
160A:  MOVWF  2C
160B:  BCF    0A.4
160C:  BSF    0A.3
160D:  BCF    03.5
160E:  CALL   077
160F:  BSF    0A.4
1610:  BCF    0A.3
1611:  MOVF   7A,W
1612:  BSF    03.5
1613:  MOVWF  27
1614:  MOVF   79,W
1615:  MOVWF  26
1616:  MOVF   78,W
1617:  MOVWF  25
1618:  MOVF   77,W
1619:  MOVWF  24
161A:  CLRF   29
161B:  BCF    03.5
161C:  MOVF   58,W
161D:  BSF    03.5
161E:  MOVWF  28
161F:  BCF    0A.4
1620:  BCF    03.5
1621:  CALL   79A
1622:  BSF    0A.4
1623:  BSF    03.5
1624:  MOVF   27,W
1625:  MOVWF  2B
1626:  MOVF   26,W
1627:  MOVWF  2A
1628:  MOVF   25,W
1629:  MOVWF  29
162A:  MOVF   24,W
162B:  MOVWF  28
162C:  MOVF   7A,W
162D:  MOVWF  2F
162E:  MOVF   79,W
162F:  MOVWF  2E
1630:  MOVF   78,W
1631:  MOVWF  2D
1632:  MOVF   77,W
1633:  MOVWF  2C
1634:  BCF    0A.4
1635:  BSF    0A.3
1636:  BCF    03.5
1637:  CALL   000
1638:  BSF    0A.4
1639:  BCF    0A.3
163A:  BCF    03.1
163B:  CLRF   27
163C:  BTFSC  0B.7
163D:  BSF    27.7
163E:  BCF    0B.7
163F:  BSF    03.5
1640:  MOVF   23,W
1641:  MOVWF  3E
1642:  MOVF   22,W
1643:  MOVWF  3D
1644:  MOVF   21,W
1645:  MOVWF  3C
1646:  MOVF   20,W
1647:  MOVWF  3B
1648:  MOVF   7A,W
1649:  MOVWF  42
164A:  MOVF   79,W
164B:  MOVWF  41
164C:  MOVF   78,W
164D:  MOVWF  40
164E:  MOVF   77,W
164F:  MOVWF  3F
1650:  BCF    0A.4
1651:  BCF    03.5
1652:  CALL   5F1
1653:  BSF    0A.4
1654:  BTFSC  27.7
1655:  BSF    0B.7
1656:  MOVF   7A,W
1657:  MOVWF  74
1658:  MOVF   79,W
1659:  MOVWF  73
165A:  MOVF   78,W
165B:  MOVWF  72
165C:  MOVF   77,W
165D:  MOVWF  71
....................    interpolatedData = ((y2-_temperature)/(y2-y1))*fx_y1 + ((_temperature-y1)/(y2-y1))*fx_y2; 
165E:  BSF    03.1
165F:  CLRF   27
1660:  BTFSC  0B.7
1661:  BSF    27.7
1662:  BCF    0B.7
1663:  MOVF   6C,W
1664:  BSF    03.5
1665:  MOVWF  3E
1666:  BCF    03.5
1667:  MOVF   6B,W
1668:  BSF    03.5
1669:  MOVWF  3D
166A:  BCF    03.5
166B:  MOVF   6A,W
166C:  BSF    03.5
166D:  MOVWF  3C
166E:  BCF    03.5
166F:  MOVF   69,W
1670:  BSF    03.5
1671:  MOVWF  3B
1672:  BCF    03.5
1673:  MOVF   50,W
1674:  BSF    03.5
1675:  MOVWF  42
1676:  BCF    03.5
1677:  MOVF   4F,W
1678:  BSF    03.5
1679:  MOVWF  41
167A:  BCF    03.5
167B:  MOVF   4E,W
167C:  BSF    03.5
167D:  MOVWF  40
167E:  BCF    03.5
167F:  MOVF   4D,W
1680:  BSF    03.5
1681:  MOVWF  3F
1682:  BCF    0A.4
1683:  BCF    03.5
1684:  CALL   5F1
1685:  BSF    0A.4
1686:  BTFSC  27.7
1687:  BSF    0B.7
1688:  MOVF   7A,W
1689:  BSF    03.5
168A:  MOVWF  23
168B:  MOVF   79,W
168C:  MOVWF  22
168D:  MOVF   78,W
168E:  MOVWF  21
168F:  MOVF   77,W
1690:  MOVWF  20
1691:  BSF    03.1
1692:  BCF    03.5
1693:  CLRF   27
1694:  BTFSC  0B.7
1695:  BSF    27.7
1696:  BCF    0B.7
1697:  MOVF   6C,W
1698:  BSF    03.5
1699:  MOVWF  3E
169A:  BCF    03.5
169B:  MOVF   6B,W
169C:  BSF    03.5
169D:  MOVWF  3D
169E:  BCF    03.5
169F:  MOVF   6A,W
16A0:  BSF    03.5
16A1:  MOVWF  3C
16A2:  BCF    03.5
16A3:  MOVF   69,W
16A4:  BSF    03.5
16A5:  MOVWF  3B
16A6:  BCF    03.5
16A7:  MOVF   68,W
16A8:  BSF    03.5
16A9:  MOVWF  42
16AA:  BCF    03.5
16AB:  MOVF   67,W
16AC:  BSF    03.5
16AD:  MOVWF  41
16AE:  BCF    03.5
16AF:  MOVF   66,W
16B0:  BSF    03.5
16B1:  MOVWF  40
16B2:  BCF    03.5
16B3:  MOVF   65,W
16B4:  BSF    03.5
16B5:  MOVWF  3F
16B6:  BCF    0A.4
16B7:  BCF    03.5
16B8:  CALL   5F1
16B9:  BSF    0A.4
16BA:  BTFSC  27.7
16BB:  BSF    0B.7
16BC:  BSF    03.5
16BD:  MOVF   23,W
16BE:  MOVWF  2B
16BF:  MOVF   22,W
16C0:  MOVWF  2A
16C1:  MOVF   21,W
16C2:  MOVWF  29
16C3:  MOVF   20,W
16C4:  MOVWF  28
16C5:  MOVF   7A,W
16C6:  MOVWF  2F
16C7:  MOVF   79,W
16C8:  MOVWF  2E
16C9:  MOVF   78,W
16CA:  MOVWF  2D
16CB:  MOVF   77,W
16CC:  MOVWF  2C
16CD:  BCF    0A.4
16CE:  BSF    0A.3
16CF:  BCF    03.5
16D0:  CALL   077
16D1:  BSF    0A.4
16D2:  BCF    0A.3
16D3:  MOVF   7A,W
16D4:  BSF    03.5
16D5:  MOVWF  23
16D6:  MOVF   79,W
16D7:  MOVWF  22
16D8:  MOVF   78,W
16D9:  MOVWF  21
16DA:  MOVF   77,W
16DB:  MOVWF  20
16DC:  MOVF   23,W
16DD:  MOVWF  2B
16DE:  MOVF   22,W
16DF:  MOVWF  2A
16E0:  MOVF   21,W
16E1:  MOVWF  29
16E2:  MOVF   20,W
16E3:  MOVWF  28
16E4:  MOVF   70,W
16E5:  MOVWF  2F
16E6:  BCF    03.5
16E7:  MOVF   6F,W
16E8:  BSF    03.5
16E9:  MOVWF  2E
16EA:  BCF    03.5
16EB:  MOVF   6E,W
16EC:  BSF    03.5
16ED:  MOVWF  2D
16EE:  BCF    03.5
16EF:  MOVF   6D,W
16F0:  BSF    03.5
16F1:  MOVWF  2C
16F2:  BCF    0A.4
16F3:  BSF    0A.3
16F4:  BCF    03.5
16F5:  CALL   000
16F6:  BSF    0A.4
16F7:  BCF    0A.3
16F8:  MOVF   7A,W
16F9:  BSF    03.5
16FA:  MOVWF  23
16FB:  MOVF   79,W
16FC:  MOVWF  22
16FD:  MOVF   78,W
16FE:  MOVWF  21
16FF:  MOVF   77,W
1700:  MOVWF  20
1701:  BSF    03.1
1702:  BCF    03.5
1703:  CLRF   27
1704:  BTFSC  0B.7
1705:  BSF    27.7
1706:  BCF    0B.7
1707:  MOVF   50,W
1708:  BSF    03.5
1709:  MOVWF  3E
170A:  BCF    03.5
170B:  MOVF   4F,W
170C:  BSF    03.5
170D:  MOVWF  3D
170E:  BCF    03.5
170F:  MOVF   4E,W
1710:  BSF    03.5
1711:  MOVWF  3C
1712:  BCF    03.5
1713:  MOVF   4D,W
1714:  BSF    03.5
1715:  MOVWF  3B
1716:  BCF    03.5
1717:  MOVF   68,W
1718:  BSF    03.5
1719:  MOVWF  42
171A:  BCF    03.5
171B:  MOVF   67,W
171C:  BSF    03.5
171D:  MOVWF  41
171E:  BCF    03.5
171F:  MOVF   66,W
1720:  BSF    03.5
1721:  MOVWF  40
1722:  BCF    03.5
1723:  MOVF   65,W
1724:  BSF    03.5
1725:  MOVWF  3F
1726:  BCF    0A.4
1727:  BCF    03.5
1728:  CALL   5F1
1729:  BSF    0A.4
172A:  BTFSC  27.7
172B:  BSF    0B.7
172C:  MOVF   7A,W
172D:  BSF    03.5
172E:  MOVWF  27
172F:  MOVF   79,W
1730:  MOVWF  26
1731:  MOVF   78,W
1732:  MOVWF  25
1733:  MOVF   77,W
1734:  MOVWF  24
1735:  BSF    03.1
1736:  BCF    03.5
1737:  CLRF   27
1738:  BTFSC  0B.7
1739:  BSF    27.7
173A:  BCF    0B.7
173B:  MOVF   6C,W
173C:  BSF    03.5
173D:  MOVWF  3E
173E:  BCF    03.5
173F:  MOVF   6B,W
1740:  BSF    03.5
1741:  MOVWF  3D
1742:  BCF    03.5
1743:  MOVF   6A,W
1744:  BSF    03.5
1745:  MOVWF  3C
1746:  BCF    03.5
1747:  MOVF   69,W
1748:  BSF    03.5
1749:  MOVWF  3B
174A:  BCF    03.5
174B:  MOVF   68,W
174C:  BSF    03.5
174D:  MOVWF  42
174E:  BCF    03.5
174F:  MOVF   67,W
1750:  BSF    03.5
1751:  MOVWF  41
1752:  BCF    03.5
1753:  MOVF   66,W
1754:  BSF    03.5
1755:  MOVWF  40
1756:  BCF    03.5
1757:  MOVF   65,W
1758:  BSF    03.5
1759:  MOVWF  3F
175A:  BCF    0A.4
175B:  BCF    03.5
175C:  CALL   5F1
175D:  BSF    0A.4
175E:  BTFSC  27.7
175F:  BSF    0B.7
1760:  BSF    03.5
1761:  MOVF   27,W
1762:  MOVWF  2B
1763:  MOVF   26,W
1764:  MOVWF  2A
1765:  MOVF   25,W
1766:  MOVWF  29
1767:  MOVF   24,W
1768:  MOVWF  28
1769:  MOVF   7A,W
176A:  MOVWF  2F
176B:  MOVF   79,W
176C:  MOVWF  2E
176D:  MOVF   78,W
176E:  MOVWF  2D
176F:  MOVF   77,W
1770:  MOVWF  2C
1771:  BCF    0A.4
1772:  BSF    0A.3
1773:  BCF    03.5
1774:  CALL   077
1775:  BSF    0A.4
1776:  BCF    0A.3
1777:  MOVF   7A,W
1778:  BSF    03.5
1779:  MOVWF  27
177A:  MOVF   79,W
177B:  MOVWF  26
177C:  MOVF   78,W
177D:  MOVWF  25
177E:  MOVF   77,W
177F:  MOVWF  24
1780:  MOVF   27,W
1781:  MOVWF  2B
1782:  MOVF   26,W
1783:  MOVWF  2A
1784:  MOVF   25,W
1785:  MOVWF  29
1786:  MOVF   24,W
1787:  MOVWF  28
1788:  MOVF   74,W
1789:  MOVWF  2F
178A:  MOVF   73,W
178B:  MOVWF  2E
178C:  MOVF   72,W
178D:  MOVWF  2D
178E:  MOVF   71,W
178F:  MOVWF  2C
1790:  BCF    0A.4
1791:  BSF    0A.3
1792:  BCF    03.5
1793:  CALL   000
1794:  BSF    0A.4
1795:  BCF    0A.3
1796:  BCF    03.1
1797:  CLRF   27
1798:  BTFSC  0B.7
1799:  BSF    27.7
179A:  BCF    0B.7
179B:  BSF    03.5
179C:  MOVF   23,W
179D:  MOVWF  3E
179E:  MOVF   22,W
179F:  MOVWF  3D
17A0:  MOVF   21,W
17A1:  MOVWF  3C
17A2:  MOVF   20,W
17A3:  MOVWF  3B
17A4:  MOVF   7A,W
17A5:  MOVWF  42
17A6:  MOVF   79,W
17A7:  MOVWF  41
17A8:  MOVF   78,W
17A9:  MOVWF  40
17AA:  MOVF   77,W
17AB:  MOVWF  3F
17AC:  BCF    0A.4
17AD:  BCF    03.5
17AE:  CALL   5F1
17AF:  BSF    0A.4
17B0:  BTFSC  27.7
17B1:  BSF    0B.7
17B2:  MOVF   7A,W
17B3:  MOVWF  5C
17B4:  MOVF   79,W
17B5:  MOVWF  5B
17B6:  MOVF   78,W
17B7:  MOVWF  5A
17B8:  MOVF   77,W
17B9:  MOVWF  59
....................     
....................    return interpolatedData; 
17BA:  MOVF   59,W
17BB:  MOVWF  77
17BC:  MOVF   5A,W
17BD:  MOVWF  78
17BE:  MOVF   5B,W
17BF:  MOVWF  79
17C0:  MOVF   5C,W
17C1:  MOVWF  7A
17C2:  BSF    0A.3
17C3:  BSF    0A.4
17C4:  GOTO   0C0 (RETURN)
.................... } 
....................  
.................... float TemperatureSensor() 
.................... { 
....................    float RT, VR, ln, VRT; 
....................       
....................    set_adc_channel(0); // next analog reading will be from channel 0 
*
0943:  MOVLW  00
0944:  MOVWF  78
0945:  MOVF   1F,W
0946:  ANDLW  C7
0947:  IORWF  78,W
0948:  MOVWF  1F
....................    delay_us(10); //allow time after channel selection and reading 
0949:  MOVLW  10
094A:  MOVWF  77
094B:  DECFSZ 77,F
094C:  GOTO   14B
094D:  NOP
....................    result_1 = read_adc(); //start and read A/D 
094E:  BSF    1F.2
094F:  BTFSC  1F.2
0950:  GOTO   14F
0951:  BSF    03.5
0952:  MOVF   1E,W
0953:  BCF    03.5
0954:  MOVWF  3A
0955:  MOVF   1E,W
0956:  MOVWF  3B
....................        
....................    VRT = (5.00 / 1023.00) * result_1;      //Conversion to voltage 
0957:  MOVF   3B,W
0958:  BSF    03.5
0959:  MOVWF  29
095A:  BCF    03.5
095B:  MOVF   3A,W
095C:  BSF    03.5
095D:  MOVWF  28
095E:  BCF    0A.3
095F:  BCF    03.5
0960:  CALL   79A
0961:  BSF    0A.3
0962:  MOVLW  0A
0963:  BSF    03.5
0964:  MOVWF  2B
0965:  MOVLW  28
0966:  MOVWF  2A
0967:  MOVLW  20
0968:  MOVWF  29
0969:  MOVLW  77
096A:  MOVWF  28
096B:  MOVF   7A,W
096C:  MOVWF  2F
096D:  MOVF   79,W
096E:  MOVWF  2E
096F:  MOVF   78,W
0970:  MOVWF  2D
0971:  MOVF   77,W
0972:  MOVWF  2C
0973:  BCF    03.5
0974:  CALL   000
0975:  MOVF   7A,W
0976:  MOVWF  56
0977:  MOVF   79,W
0978:  MOVWF  55
0979:  MOVF   78,W
097A:  MOVWF  54
097B:  MOVF   77,W
097C:  MOVWF  53
....................    VR = VCC - VRT; 
097D:  BSF    03.1
097E:  CLRF   27
097F:  BTFSC  0B.7
0980:  BSF    27.7
0981:  BCF    0B.7
0982:  BSF    03.5
0983:  CLRF   3E
0984:  CLRF   3D
0985:  MOVLW  20
0986:  MOVWF  3C
0987:  MOVLW  81
0988:  MOVWF  3B
0989:  BCF    03.5
098A:  MOVF   56,W
098B:  BSF    03.5
098C:  MOVWF  42
098D:  BCF    03.5
098E:  MOVF   55,W
098F:  BSF    03.5
0990:  MOVWF  41
0991:  BCF    03.5
0992:  MOVF   54,W
0993:  BSF    03.5
0994:  MOVWF  40
0995:  BCF    03.5
0996:  MOVF   53,W
0997:  BSF    03.5
0998:  MOVWF  3F
0999:  BCF    0A.3
099A:  BCF    03.5
099B:  CALL   5F1
099C:  BSF    0A.3
099D:  BTFSC  27.7
099E:  BSF    0B.7
099F:  MOVF   7A,W
09A0:  MOVWF  4E
09A1:  MOVF   79,W
09A2:  MOVWF  4D
09A3:  MOVF   78,W
09A4:  MOVWF  4C
09A5:  MOVF   77,W
09A6:  MOVWF  4B
....................    RT = VRT / (VR / R);               //Resistance of RT 
09A7:  MOVF   4E,W
09A8:  BSF    03.5
09A9:  MOVWF  2B
09AA:  BCF    03.5
09AB:  MOVF   4D,W
09AC:  BSF    03.5
09AD:  MOVWF  2A
09AE:  BCF    03.5
09AF:  MOVF   4C,W
09B0:  BSF    03.5
09B1:  MOVWF  29
09B2:  BCF    03.5
09B3:  MOVF   4B,W
09B4:  BSF    03.5
09B5:  MOVWF  28
09B6:  CLRF   2F
09B7:  MOVLW  60
09B8:  MOVWF  2E
09B9:  MOVLW  1A
09BA:  MOVWF  2D
09BB:  MOVLW  8C
09BC:  MOVWF  2C
09BD:  BCF    03.5
09BE:  CALL   077
09BF:  MOVF   56,W
09C0:  BSF    03.5
09C1:  MOVWF  2B
09C2:  BCF    03.5
09C3:  MOVF   55,W
09C4:  BSF    03.5
09C5:  MOVWF  2A
09C6:  BCF    03.5
09C7:  MOVF   54,W
09C8:  BSF    03.5
09C9:  MOVWF  29
09CA:  BCF    03.5
09CB:  MOVF   53,W
09CC:  BSF    03.5
09CD:  MOVWF  28
09CE:  MOVF   7A,W
09CF:  MOVWF  2F
09D0:  MOVF   79,W
09D1:  MOVWF  2E
09D2:  MOVF   78,W
09D3:  MOVWF  2D
09D4:  MOVF   77,W
09D5:  MOVWF  2C
09D6:  BCF    03.5
09D7:  CALL   077
09D8:  MOVF   7A,W
09D9:  MOVWF  4A
09DA:  MOVF   79,W
09DB:  MOVWF  49
09DC:  MOVF   78,W
09DD:  MOVWF  48
09DE:  MOVF   77,W
09DF:  MOVWF  47
....................     
....................    ln = log(RT / RT0); 
09E0:  MOVF   4A,W
09E1:  BSF    03.5
09E2:  MOVWF  2B
09E3:  BCF    03.5
09E4:  MOVF   49,W
09E5:  BSF    03.5
09E6:  MOVWF  2A
09E7:  BCF    03.5
09E8:  MOVF   48,W
09E9:  BSF    03.5
09EA:  MOVWF  29
09EB:  BCF    03.5
09EC:  MOVF   47,W
09ED:  BSF    03.5
09EE:  MOVWF  28
09EF:  CLRF   2F
09F0:  MOVLW  98
09F1:  MOVWF  2E
09F2:  MOVLW  19
09F3:  MOVWF  2D
09F4:  MOVLW  8C
09F5:  MOVWF  2C
09F6:  BCF    03.5
09F7:  CALL   077
09F8:  MOVF   7A,W
09F9:  MOVWF  5E
09FA:  MOVF   79,W
09FB:  MOVWF  5D
09FC:  MOVF   78,W
09FD:  MOVWF  5C
09FE:  MOVF   77,W
09FF:  MOVWF  5B
0A00:  MOVF   5E,W
0A01:  MOVWF  62
0A02:  MOVF   5D,W
0A03:  MOVWF  61
0A04:  MOVF   5C,W
0A05:  MOVWF  60
0A06:  MOVF   5B,W
0A07:  MOVWF  5F
*
0C84:  MOVF   7A,W
0C85:  MOVWF  52
0C86:  MOVF   79,W
0C87:  MOVWF  51
0C88:  MOVF   78,W
0C89:  MOVWF  50
0C8A:  MOVF   77,W
0C8B:  MOVWF  4F
....................    float _temperature = (1 / ((ln / B1) + (1 / T0))); //Temperature from thermistor 
0C8C:  MOVF   52,W
0C8D:  BSF    03.5
0C8E:  MOVWF  2B
0C8F:  BCF    03.5
0C90:  MOVF   51,W
0C91:  BSF    03.5
0C92:  MOVWF  2A
0C93:  BCF    03.5
0C94:  MOVF   50,W
0C95:  BSF    03.5
0C96:  MOVWF  29
0C97:  BCF    03.5
0C98:  MOVF   4F,W
0C99:  BSF    03.5
0C9A:  MOVWF  28
0C9B:  CLRF   2F
0C9C:  MOVLW  80
0C9D:  MOVWF  2E
0C9E:  MOVLW  3B
0C9F:  MOVWF  2D
0CA0:  MOVLW  8A
0CA1:  MOVWF  2C
0CA2:  BCF    03.5
0CA3:  CALL   077
0CA4:  MOVF   7A,W
0CA5:  MOVWF  5E
0CA6:  MOVF   79,W
0CA7:  MOVWF  5D
0CA8:  MOVF   78,W
0CA9:  MOVWF  5C
0CAA:  MOVF   77,W
0CAB:  MOVWF  5B
0CAC:  BSF    03.5
0CAD:  CLRF   2B
0CAE:  CLRF   2A
0CAF:  CLRF   29
0CB0:  MOVLW  7F
0CB1:  MOVWF  28
0CB2:  BCF    03.5
0CB3:  MOVF   39,W
0CB4:  BSF    03.5
0CB5:  MOVWF  2F
0CB6:  BCF    03.5
0CB7:  MOVF   38,W
0CB8:  BSF    03.5
0CB9:  MOVWF  2E
0CBA:  BCF    03.5
0CBB:  MOVF   37,W
0CBC:  BSF    03.5
0CBD:  MOVWF  2D
0CBE:  BCF    03.5
0CBF:  MOVF   36,W
0CC0:  BSF    03.5
0CC1:  MOVWF  2C
0CC2:  BCF    03.5
0CC3:  CALL   077
0CC4:  BCF    03.1
0CC5:  CLRF   27
0CC6:  BTFSC  0B.7
0CC7:  BSF    27.7
0CC8:  BCF    0B.7
0CC9:  MOVF   5E,W
0CCA:  BSF    03.5
0CCB:  MOVWF  3E
0CCC:  BCF    03.5
0CCD:  MOVF   5D,W
0CCE:  BSF    03.5
0CCF:  MOVWF  3D
0CD0:  BCF    03.5
0CD1:  MOVF   5C,W
0CD2:  BSF    03.5
0CD3:  MOVWF  3C
0CD4:  BCF    03.5
0CD5:  MOVF   5B,W
0CD6:  BSF    03.5
0CD7:  MOVWF  3B
0CD8:  MOVF   7A,W
0CD9:  MOVWF  42
0CDA:  MOVF   79,W
0CDB:  MOVWF  41
0CDC:  MOVF   78,W
0CDD:  MOVWF  40
0CDE:  MOVF   77,W
0CDF:  MOVWF  3F
0CE0:  BCF    0A.3
0CE1:  BCF    03.5
0CE2:  CALL   5F1
0CE3:  BSF    0A.3
0CE4:  BTFSC  27.7
0CE5:  BSF    0B.7
0CE6:  BSF    03.5
0CE7:  CLRF   2B
0CE8:  CLRF   2A
0CE9:  CLRF   29
0CEA:  MOVLW  7F
0CEB:  MOVWF  28
0CEC:  MOVF   7A,W
0CED:  MOVWF  2F
0CEE:  MOVF   79,W
0CEF:  MOVWF  2E
0CF0:  MOVF   78,W
0CF1:  MOVWF  2D
0CF2:  MOVF   77,W
0CF3:  MOVWF  2C
0CF4:  BCF    03.5
0CF5:  CALL   077
0CF6:  MOVF   7A,W
0CF7:  MOVWF  5A
0CF8:  MOVF   79,W
0CF9:  MOVWF  59
0CFA:  MOVF   78,W
0CFB:  MOVWF  58
0CFC:  MOVF   77,W
0CFD:  MOVWF  57
....................    _temperature = _temperature - 273.15;                 //Conversion to Celsius 
0CFE:  BSF    03.1
0CFF:  CLRF   27
0D00:  BTFSC  0B.7
0D01:  BSF    27.7
0D02:  BCF    0B.7
0D03:  MOVF   5A,W
0D04:  BSF    03.5
0D05:  MOVWF  3E
0D06:  BCF    03.5
0D07:  MOVF   59,W
0D08:  BSF    03.5
0D09:  MOVWF  3D
0D0A:  BCF    03.5
0D0B:  MOVF   58,W
0D0C:  BSF    03.5
0D0D:  MOVWF  3C
0D0E:  BCF    03.5
0D0F:  MOVF   57,W
0D10:  BSF    03.5
0D11:  MOVWF  3B
0D12:  MOVLW  33
0D13:  MOVWF  42
0D14:  MOVLW  93
0D15:  MOVWF  41
0D16:  MOVLW  08
0D17:  MOVWF  40
0D18:  MOVLW  87
0D19:  MOVWF  3F
0D1A:  BCF    0A.3
0D1B:  BCF    03.5
0D1C:  CALL   5F1
0D1D:  BSF    0A.3
0D1E:  BTFSC  27.7
0D1F:  BSF    0B.7
0D20:  MOVF   7A,W
0D21:  MOVWF  5A
0D22:  MOVF   79,W
0D23:  MOVWF  59
0D24:  MOVF   78,W
0D25:  MOVWF  58
0D26:  MOVF   77,W
0D27:  MOVWF  57
....................        
....................    // LIMITING TEMPERATURE 
....................    /*if (_temperature < 33.0) 
....................       _temperature = 33.0; 
....................    else if (_temperature > 74.0) 
....................       _temperature = 74.0;*/ 
....................    return _temperature; 
0D28:  MOVF   57,W
0D29:  MOVWF  77
0D2A:  MOVF   58,W
0D2B:  MOVWF  78
0D2C:  MOVF   59,W
0D2D:  MOVWF  79
0D2E:  MOVF   5A,W
0D2F:  MOVWF  7A
0D30:  BSF    0A.3
0D31:  BSF    0A.4
0D32:  GOTO   071 (RETURN)
.................... } 
....................  
.................... void main() 
*
1800:  MOVLW  81
1801:  BSF    03.5
1802:  MOVWF  19
1803:  MOVLW  A6
1804:  MOVWF  18
1805:  MOVLW  90
1806:  BCF    03.5
1807:  MOVWF  18
1808:  CLRF   2B
1809:  CLRF   2A
180A:  CLRF   29
180B:  CLRF   28
180C:  CLRF   2F
180D:  CLRF   2E
180E:  CLRF   2D
180F:  CLRF   2C
1810:  CLRF   33
1811:  CLRF   32
1812:  CLRF   31
1813:  CLRF   30
1814:  CLRF   35
1815:  CLRF   34
1816:  MOVLW  33
1817:  MOVWF  39
1818:  MOVLW  13
1819:  MOVWF  38
181A:  MOVLW  16
181B:  MOVWF  37
181C:  MOVLW  87
181D:  MOVWF  36
181E:  MOVLW  FF
181F:  MOVWF  3F
1820:  BSF    03.5
1821:  BSF    1F.0
1822:  BSF    1F.1
1823:  BSF    1F.2
1824:  BCF    1F.3
1825:  MOVLW  07
1826:  MOVWF  1C
1827:  BCF    03.7
1828:  MOVLW  1F
1829:  ANDWF  03,F
.................... { 
....................    setup_psp(PSP_DISABLED); 
*
182E:  BSF    03.5
182F:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
1830:  BCF    03.5
1831:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
1832:  MOVLW  00
1833:  MOVWF  78
1834:  MOVWF  12
1835:  MOVLW  00
1836:  BSF    03.5
1837:  MOVWF  12
....................    setup_ccp1(CCP_PWM); //4kHz PWM signal output at CCP1 pin 17 
1838:  BCF    03.5
1839:  BCF    3F.2
183A:  MOVF   3F,W
183B:  BSF    03.5
183C:  MOVWF  07
183D:  BCF    03.5
183E:  BCF    07.2
183F:  MOVLW  0C
1840:  MOVWF  17
....................    setup_CCP2(CCP_OFF); 
1841:  MOVLW  F0
1842:  ANDWF  1D,F
....................               //internal clock | prescaling 256 
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_256);  
1843:  BSF    03.5
1844:  MOVF   01,W
1845:  ANDLW  C0
1846:  IORLW  07
1847:  MOVWF  01
....................    setup_timer_2(T2_DIV_BY_16, 255, 1); 
1848:  MOVLW  00
1849:  MOVWF  78
184A:  IORLW  06
184B:  BCF    03.5
184C:  MOVWF  12
184D:  MOVLW  FF
184E:  BSF    03.5
184F:  MOVWF  12
....................    set_timer0(207); 
1850:  MOVLW  CF
1851:  BCF    03.5
1852:  MOVWF  01
....................    enable_interrupts(int_timer0); 
1853:  BSF    0B.5
....................    enable_interrupts(global);  
1854:  MOVLW  C0
1855:  IORWF  0B,F
....................    delay_ms(10); 
1856:  MOVLW  0A
1857:  MOVWF  47
1858:  BCF    0A.4
1859:  BCF    0A.3
185A:  CALL   786
185B:  BSF    0A.4
185C:  BSF    0A.3
....................    setup_adc_ports(AN0_AN1_AN3); //A0 A1 A3 are configured for analog input pin 
185D:  BSF    03.5
185E:  BCF    1F.0
185F:  BCF    1F.1
1860:  BSF    1F.2
1861:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); //enable ADC and set clock for ADC 
1862:  BCF    1F.6
1863:  BCF    03.5
1864:  BCF    1F.6
1865:  BSF    1F.7
1866:  BSF    03.5
1867:  BSF    1F.7
1868:  BCF    03.5
1869:  BSF    1F.0
....................     
....................    set_tris_c(0x00); //set all portc pins as output 
186A:  MOVLW  00
186B:  BSF    03.5
186C:  MOVWF  07
186D:  BCF    03.5
186E:  MOVWF  3F
....................  
....................    while(1) 
....................    { 
....................       temperature = TemperatureSensor(); 
186F:  BCF    0A.4
1870:  GOTO   143
1871:  BSF    0A.4
1872:  MOVF   7A,W
1873:  MOVWF  2B
1874:  MOVF   79,W
1875:  MOVWF  2A
1876:  MOVF   78,W
1877:  MOVWF  29
1878:  MOVF   77,W
1879:  MOVWF  28
....................       int8 * MatrixAndRowAndColumn; 
....................       MatrixAndRowAndColumn=SelectMatrixAndRowAndColumn(temperature, deltaTemperature); 
187A:  MOVF   2B,W
187B:  MOVWF  4A
187C:  MOVF   2A,W
187D:  MOVWF  49
187E:  MOVF   29,W
187F:  MOVWF  48
1880:  MOVF   28,W
1881:  MOVWF  47
1882:  MOVF   33,W
1883:  MOVWF  4E
1884:  MOVF   32,W
1885:  MOVWF  4D
1886:  MOVF   31,W
1887:  MOVWF  4C
1888:  MOVF   30,W
1889:  MOVWF  4B
188A:  BCF    0A.4
188B:  GOTO   548
188C:  BSF    0A.4
188D:  MOVF   79,W
188E:  MOVWF  41
188F:  MOVF   78,W
1890:  MOVWF  40
....................       float fuzzyOut = GetDataAndInterpolate(MatrixAndRowAndColumn[0], MatrixAndRowAndColumn[1], MatrixAndRowAndColumn[2], temperature, deltaTemperature); 
....................       unsigned int mypwm = (unsigned int)(fuzzyOut); 
1891:  MOVF   40,W
1892:  MOVWF  04
1893:  BCF    03.7
1894:  BTFSC  41.0
1895:  BSF    03.7
1896:  MOVF   00,W
1897:  MOVWF  47
1898:  MOVLW  01
1899:  ADDWF  40,W
189A:  MOVWF  04
189B:  BCF    03.7
189C:  BTFSC  41.0
189D:  BSF    03.7
189E:  MOVF   00,W
189F:  MOVWF  48
18A0:  MOVLW  02
18A1:  ADDWF  40,W
18A2:  MOVWF  04
18A3:  BCF    03.7
18A4:  BTFSC  41.0
18A5:  BSF    03.7
18A6:  MOVF   00,W
18A7:  MOVWF  49
18A8:  MOVF   47,W
18A9:  MOVWF  4A
18AA:  MOVF   48,W
18AB:  MOVWF  4B
18AC:  MOVF   49,W
18AD:  MOVWF  4C
18AE:  MOVF   2B,W
18AF:  MOVWF  50
18B0:  MOVF   2A,W
18B1:  MOVWF  4F
18B2:  MOVF   29,W
18B3:  MOVWF  4E
18B4:  MOVF   28,W
18B5:  MOVWF  4D
18B6:  MOVF   33,W
18B7:  MOVWF  54
18B8:  MOVF   32,W
18B9:  MOVWF  53
18BA:  MOVF   31,W
18BB:  MOVWF  52
18BC:  MOVF   30,W
18BD:  MOVWF  51
18BE:  BCF    0A.3
18BF:  GOTO   000
18C0:  BSF    0A.3
18C1:  MOVF   7A,W
18C2:  MOVWF  45
18C3:  MOVF   79,W
18C4:  MOVWF  44
18C5:  MOVF   78,W
18C6:  MOVWF  43
18C7:  MOVF   77,W
18C8:  MOVWF  42
18C9:  MOVF   45,W
18CA:  BSF    03.5
18CB:  MOVWF  23
18CC:  BCF    03.5
18CD:  MOVF   44,W
18CE:  BSF    03.5
18CF:  MOVWF  22
18D0:  BCF    03.5
18D1:  MOVF   43,W
18D2:  BSF    03.5
18D3:  MOVWF  21
18D4:  BCF    03.5
18D5:  MOVF   42,W
18D6:  BSF    03.5
18D7:  MOVWF  20
18D8:  BCF    0A.4
18D9:  BCF    0A.3
18DA:  BCF    03.5
18DB:  CALL   7DE
18DC:  BSF    0A.4
18DD:  BSF    0A.3
18DE:  MOVF   78,W
18DF:  MOVWF  46
....................       printf("T: %f, dT: %f, out:%u\n",temperature,deltaTemperature,mypwm); 
18E0:  MOVLW  54
18E1:  BTFSS  0C.4
18E2:  GOTO   0E1
18E3:  MOVWF  19
18E4:  MOVLW  3A
18E5:  BTFSS  0C.4
18E6:  GOTO   0E5
18E7:  MOVWF  19
18E8:  MOVLW  20
18E9:  BTFSS  0C.4
18EA:  GOTO   0E9
18EB:  MOVWF  19
18EC:  MOVLW  89
18ED:  MOVWF  04
18EE:  MOVF   2B,W
18EF:  MOVWF  4A
18F0:  MOVF   2A,W
18F1:  MOVWF  49
18F2:  MOVF   29,W
18F3:  MOVWF  48
18F4:  MOVF   28,W
18F5:  MOVWF  47
18F6:  MOVLW  02
18F7:  MOVWF  4B
18F8:  BCF    0A.4
18F9:  CALL   684
18FA:  BSF    0A.4
18FB:  MOVLW  7C
18FC:  BSF    03.6
18FD:  MOVWF  0D
18FE:  MOVLW  07
18FF:  MOVWF  0F
1900:  BSF    03.0
1901:  MOVLW  06
1902:  BCF    03.6
1903:  MOVWF  47
1904:  BCF    0A.4
1905:  CALL   770
1906:  BSF    0A.4
1907:  MOVLW  89
1908:  MOVWF  04
1909:  MOVF   33,W
190A:  MOVWF  4A
190B:  MOVF   32,W
190C:  MOVWF  49
190D:  MOVF   31,W
190E:  MOVWF  48
190F:  MOVF   30,W
1910:  MOVWF  47
1911:  MOVLW  02
1912:  MOVWF  4B
1913:  BCF    0A.4
1914:  CALL   684
1915:  BSF    0A.4
1916:  MOVLW  80
1917:  BSF    03.6
1918:  MOVWF  0D
1919:  MOVLW  07
191A:  MOVWF  0F
191B:  BSF    03.0
191C:  MOVLW  06
191D:  BCF    03.6
191E:  MOVWF  47
191F:  BCF    0A.4
1920:  CALL   770
1921:  BSF    0A.4
1922:  MOVF   46,W
1923:  MOVWF  47
1924:  MOVLW  1B
1925:  MOVWF  48
1926:  BCF    0A.4
1927:  GOTO   7C6
1928:  BSF    0A.4
1929:  MOVLW  0A
192A:  BTFSS  0C.4
192B:  GOTO   12A
192C:  MOVWF  19
....................       set_pwm1_duty(mypwm); 
192D:  MOVF   46,W
192E:  MOVWF  15
....................       delay_ms(100); 
192F:  MOVLW  64
1930:  MOVWF  47
1931:  BCF    0A.4
1932:  BCF    0A.3
1933:  CALL   786
1934:  BSF    0A.4
1935:  BSF    0A.3
1936:  GOTO   06F
....................    } 
.................... } 
1937:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
