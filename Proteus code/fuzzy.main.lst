CCS PCM C Compiler, Version 5.007, 61971               25-май-22 03:18

               Filename:   C:\Users\ј€на “леуленова\Desktop\Intelligent Control\pic\fuzzy.main.lst

               ROM used:   4887 words (60%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           101 (27%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  11
0001:  MOVWF  0A
0002:  GOTO   158
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDLW  13
0010:  BTFSC  03.0
0011:  INCF   0A,F
0012:  MOVWF  02
0013:  RETLW  96
0014:  RETLW  96
0015:  RETLW  96
0016:  RETLW  96
0017:  RETLW  40
0018:  RETLW  B7
0019:  RETLW  2D
001A:  RETLW  A1
001B:  RETLW  0A
001C:  RETLW  71
001D:  RETLW  D4
001E:  RETLW  29
001F:  RETLW  79
0020:  RETLW  CA
0021:  RETLW  12
0022:  RETLW  5F
0023:  RETLW  AE
0024:  RETLW  F3
0025:  RETLW  3D
0026:  RETLW  86
0027:  RETLW  C6
0028:  RETLW  DE
0029:  RETLW  F6
002A:  RETLW  0F
002B:  RETLW  28
002C:  RETLW  43
002D:  RETLW  5D
002E:  RETLW  79
002F:  RETLW  92
0030:  RETLW  89
0031:  RETLW  70
0032:  RETLW  54
0033:  RETLW  3B
0034:  RETLW  20
0035:  RETLW  07
0036:  RETLW  EE
0037:  RETLW  D6
0038:  RETLW  C6
0039:  RETLW  C6
003A:  RETLW  C6
003B:  RETLW  C6
003C:  RETLW  92
003D:  RETLW  92
003E:  RETLW  92
003F:  RETLW  92
0040:  RETLW  D4
0041:  RETLW  99
0042:  RETLW  59
0043:  RETLW  F0
0044:  RETLW  7F
0045:  RETLW  13
0046:  RETLW  A3
0047:  RETLW  2B
0048:  RETLW  AA
0049:  RETLW  0C
004A:  RETLW  6F
004B:  RETLW  D4
004C:  RETLW  3D
004D:  RETLW  A3
004E:  RETLW  10
004F:  RETLW  AD
0050:  RETLW  52
0051:  RETLW  AD
0052:  RETLW  10
0053:  RETLW  7C
0054:  RETLW  F5
0055:  RETLW  7A
0056:  RETLW  10
0057:  RETLW  B7
0058:  RETLW  78
0059:  RETLW  35
005A:  RETLW  7D
005B:  RETLW  DC
005C:  RETLW  4B
005D:  RETLW  CC
005E:  RETLW  56
005F:  RETLW  EE
0060:  RETLW  8D
0061:  RETLW  52
0062:  RETLW  52
0063:  RETLW  52
0064:  RETLW  52
0065:  RETLW  A9
0066:  RETLW  A9
0067:  RETLW  A9
0068:  RETLW  A9
0069:  RETLW  D0
006A:  RETLW  7C
006B:  RETLW  AD
006C:  RETLW  7F
006D:  RETLW  1F
006E:  RETLW  CB
006F:  RETLW  73
0070:  RETLW  15
0071:  RETLW  AE
0072:  RETLW  22
0073:  RETLW  9B
0074:  RETLW  14
0075:  RETLW  91
0076:  RETLW  12
0077:  RETLW  9A
0078:  RETLW  2C
0079:  RETLW  C6
007A:  RETLW  2C
007B:  RETLW  9A
007C:  RETLW  12
007D:  RETLW  95
007E:  RETLW  24
007F:  RETLW  C3
0080:  RETLW  70
0081:  RETLW  32
0082:  RETLW  EF
0083:  RETLW  33
0084:  RETLW  8D
0085:  RETLW  F2
0086:  RETLW  69
0087:  RETLW  E8
0088:  RETLW  75
0089:  RETLW  09
008A:  RETLW  C6
008B:  RETLW  C6
008C:  RETLW  C6
008D:  RETLW  C6
008E:  RETLW  88
008F:  RETLW  88
0090:  RETLW  88
0091:  RETLW  88
0092:  RETLW  D6
0093:  RETLW  91
0094:  RETLW  AB
0095:  RETLW  5E
0096:  RETLW  E0
0097:  RETLW  31
0098:  RETLW  C1
0099:  RETLW  74
009A:  RETLW  1E
009B:  RETLW  A1
009C:  RETLW  27
009D:  RETLW  A7
009E:  RETLW  2C
009F:  RETLW  DC
00A0:  RETLW  DC
00A1:  RETLW  DC
00A2:  RETLW  DC
00A3:  RETLW  DC
00A4:  RETLW  DC
00A5:  RETLW  DC
00A6:  RETLW  32
00A7:  RETLW  BA
00A8:  RETLW  51
00A9:  RETLW  F3
00AA:  RETLW  A7
00AB:  RETLW  6A
00AC:  RETLW  BB
00AD:  RETLW  1E
00AE:  RETLW  8A
00AF:  RETLW  06
00B0:  RETLW  DC
00B1:  RETLW  DC
00B2:  RETLW  DC
00B3:  RETLW  DC
00B4:  RETLW  DC
00B5:  RETLW  DC
00B6:  RETLW  DC
00B7:  RETLW  29
00B8:  RETLW  29
00B9:  RETLW  29
00BA:  RETLW  29
00BB:  RETLW  B5
00BC:  RETLW  B2
00BD:  RETLW  FA
00BE:  RETLW  C0
00BF:  RETLW  28
00C0:  RETLW  48
00C1:  RETLW  31
00C2:  RETLW  2E
00C3:  RETLW  A4
00C4:  RETLW  2C
00C5:  RETLW  18
00C6:  RETLW  2E
00C7:  RETLW  3D
00C8:  RETLW  45
00C9:  RETLW  45
00CA:  RETLW  45
00CB:  RETLW  45
00CC:  RETLW  45
00CD:  RETLW  45
00CE:  RETLW  45
00CF:  RETLW  45
00D0:  RETLW  45
00D1:  RETLW  45
00D2:  RETLW  79
00D3:  RETLW  1F
00D4:  RETLW  E7
00D5:  RETLW  45
00D6:  RETLW  45
00D7:  RETLW  45
00D8:  RETLW  45
00D9:  RETLW  45
00DA:  RETLW  45
00DB:  RETLW  45
00DC:  RETLW  45
00DD:  RETLW  45
00DE:  RETLW  45
00DF:  RETLW  45
00E0:  RETLW  6C
00E1:  RETLW  6C
00E2:  RETLW  6C
00E3:  RETLW  6C
00E4:  RETLW  3B
00E5:  RETLW  80
00E6:  RETLW  FB
00E7:  RETLW  E6
00E8:  RETLW  6A
00E9:  RETLW  9F
00EA:  RETLW  D8
00EB:  RETLW  38
00EC:  RETLW  74
00ED:  RETLW  98
00EE:  RETLW  33
00EF:  RETLW  4F
00F0:  RETLW  63
00F1:  RETLW  6D
00F2:  RETLW  6D
00F3:  RETLW  6D
00F4:  RETLW  6D
00F5:  RETLW  6D
00F6:  RETLW  6D
00F7:  RETLW  6D
00F8:  RETLW  6D
00F9:  RETLW  6D
00FA:  RETLW  6D
00FB:  RETLW  2A
00FC:  RETLW  C0
00FD:  RETLW  E6
00FE:  RETLW  49
00FF:  RETLW  6D
0100:  RETLW  6D
0101:  RETLW  6D
0102:  RETLW  6D
0103:  RETLW  6D
0104:  RETLW  6D
0105:  RETLW  6D
0106:  RETLW  6D
0107:  RETLW  6D
0108:  RETLW  6D
0109:  BSF    0A.0
010A:  BCF    0A.1
010B:  BCF    0A.2
010C:  ADDLW  10
010D:  BTFSC  03.0
010E:  INCF   0A,F
010F:  MOVWF  02
0110:  RETLW  5B
0111:  RETLW  5B
0112:  RETLW  5B
0113:  RETLW  5B
0114:  RETLW  72
0115:  RETLW  06
0116:  RETLW  B9
0117:  RETLW  CF
0118:  RETLW  B1
0119:  RETLW  85
011A:  RETLW  18
011B:  RETLW  7F
011C:  RETLW  C0
011D:  RETLW  EA
011E:  RETLW  FF
011F:  RETLW  07
0120:  RETLW  01
0121:  RETLW  96
0122:  RETLW  96
0123:  RETLW  96
0124:  RETLW  96
0125:  RETLW  96
0126:  RETLW  96
0127:  RETLW  96
0128:  RETLW  96
0129:  RETLW  78
012A:  RETLW  4D
012B:  RETLW  18
012C:  RETLW  D5
012D:  RETLW  ED
012E:  RETLW  2A
012F:  RETLW  5C
0130:  RETLW  84
0131:  RETLW  96
0132:  RETLW  96
0133:  RETLW  96
0134:  RETLW  96
0135:  RETLW  96
0136:  RETLW  96
0137:  RETLW  96
0138:  RETLW  96
0139:  RETLW  F8
013A:  RETLW  F8
013B:  RETLW  F8
013C:  RETLW  F8
013D:  RETLW  BA
013E:  RETLW  CB
013F:  RETLW  EC
0140:  RETLW  8C
0141:  RETLW  B2
0142:  RETLW  86
0143:  RETLW  18
0144:  RETLW  7F
0145:  RETLW  C1
0146:  RETLW  EB
0147:  RETLW  00
0148:  RETLW  08
0149:  RETLW  07
014A:  RETLW  03
014B:  RETLW  FB
014C:  RETLW  E5
014D:  RETLW  D3
014E:  RETLW  D3
014F:  RETLW  D3
0150:  RETLW  D6
0151:  RETLW  DA
0152:  RETLW  DF
0153:  RETLW  E3
0154:  RETLW  E8
0155:  RETLW  EC
0156:  RETLW  EA
0157:  RETLW  E5
0158:  RETLW  E1
0159:  RETLW  DC
015A:  RETLW  D8
015B:  RETLW  D4
015C:  RETLW  D3
015D:  RETLW  D3
015E:  RETLW  D3
015F:  RETLW  D3
0160:  RETLW  D3
0161:  RETLW  D3
0162:  RETLW  C6
0163:  RETLW  C6
0164:  RETLW  C6
0165:  RETLW  C6
0166:  RETLW  61
0167:  RETLW  A3
0168:  RETLW  EC
0169:  RETLW  8C
016A:  RETLW  B2
016B:  RETLW  86
016C:  RETLW  18
016D:  RETLW  7F
016E:  RETLW  C1
016F:  RETLW  EB
0170:  RETLW  00
0171:  RETLW  08
0172:  RETLW  07
0173:  RETLW  03
0174:  RETLW  FC
0175:  RETLW  E9
0176:  RETLW  CC
0177:  RETLW  CF
0178:  RETLW  D2
0179:  RETLW  D6
017A:  RETLW  DA
017B:  RETLW  DF
017C:  RETLW  E3
017D:  RETLW  E8
017E:  RETLW  EC
017F:  RETLW  EA
0180:  RETLW  E5
0181:  RETLW  E1
0182:  RETLW  DC
0183:  RETLW  D8
0184:  RETLW  D4
0185:  RETLW  D1
0186:  RETLW  CE
0187:  RETLW  CC
0188:  RETLW  CC
0189:  RETLW  CC
018A:  RETLW  CC
018B:  RETLW  C6
018C:  RETLW  C6
018D:  RETLW  C6
018E:  RETLW  C6
018F:  RETLW  61
0190:  RETLW  A3
0191:  RETLW  EC
0192:  RETLW  8C
0193:  RETLW  B2
0194:  RETLW  86
0195:  RETLW  18
0196:  RETLW  7F
0197:  RETLW  C1
0198:  RETLW  EB
0199:  RETLW  00
019A:  RETLW  08
019B:  RETLW  07
019C:  RETLW  03
019D:  RETLW  FC
019E:  RETLW  E9
019F:  RETLW  CC
01A0:  RETLW  CF
01A1:  RETLW  D2
01A2:  RETLW  D6
01A3:  RETLW  DA
01A4:  RETLW  DF
01A5:  RETLW  E3
01A6:  RETLW  E8
01A7:  RETLW  EC
01A8:  RETLW  EA
01A9:  RETLW  E5
01AA:  RETLW  E1
01AB:  RETLW  DC
01AC:  RETLW  D8
01AD:  RETLW  D4
01AE:  RETLW  D1
01AF:  RETLW  CE
01B0:  RETLW  CC
01B1:  RETLW  CC
01B2:  RETLW  CC
01B3:  RETLW  CC
01B4:  RETLW  C6
01B5:  RETLW  C6
01B6:  RETLW  C6
01B7:  RETLW  C6
01B8:  RETLW  61
01B9:  RETLW  A3
01BA:  RETLW  EC
01BB:  RETLW  8C
01BC:  RETLW  B2
01BD:  RETLW  86
01BE:  RETLW  18
01BF:  RETLW  7F
01C0:  RETLW  C1
01C1:  RETLW  EB
01C2:  RETLW  00
01C3:  RETLW  08
01C4:  RETLW  07
01C5:  RETLW  03
01C6:  RETLW  FC
01C7:  RETLW  E9
01C8:  RETLW  CC
01C9:  RETLW  CF
01CA:  RETLW  D2
01CB:  RETLW  D6
01CC:  RETLW  DA
01CD:  RETLW  DF
01CE:  RETLW  E3
01CF:  RETLW  E8
01D0:  RETLW  EC
01D1:  RETLW  EA
01D2:  RETLW  E5
01D3:  RETLW  E1
01D4:  RETLW  DC
01D5:  RETLW  D8
01D6:  RETLW  D4
01D7:  RETLW  D1
01D8:  RETLW  CE
01D9:  RETLW  CC
01DA:  RETLW  CC
01DB:  RETLW  CC
01DC:  RETLW  CC
01DD:  RETLW  52
01DE:  RETLW  52
01DF:  RETLW  52
01E0:  RETLW  52
01E1:  RETLW  8B
01E2:  RETLW  76
01E3:  RETLW  E3
01E4:  RETLW  27
01E5:  RETLW  3E
01E6:  RETLW  3F
01E7:  RETLW  25
01E8:  RETLW  02
01E9:  RETLW  D1
01EA:  RETLW  9D
01EB:  RETLW  63
01EC:  RETLW  2A
01ED:  RETLW  F3
01EE:  RETLW  C1
01EF:  RETLW  94
01F0:  RETLW  61
01F1:  RETLW  27
01F2:  RETLW  4F
01F3:  RETLW  7F
01F4:  RETLW  B9
01F5:  RETLW  FF
01F6:  RETLW  52
01F7:  RETLW  B5
01F8:  RETLW  2D
01F9:  RETLW  BE
01FA:  RETLW  8A
01FB:  RETLW  02
01FC:  RETLW  91
01FD:  RETLW  34
01FE:  RETLW  E6
01FF:  RETLW  A4
0200:  RETLW  4A
0201:  RETLW  D3
0202:  RETLW  93
0203:  RETLW  93
0204:  RETLW  93
0205:  RETLW  93
0206:  BCF    0A.0
0207:  BSF    0A.1
0208:  BCF    0A.2
0209:  ADDWF  02,F
020A:  RETLW  C6
020B:  RETLW  C6
020C:  RETLW  C6
020D:  RETLW  C6
020E:  RETLW  C5
020F:  RETLW  35
0210:  RETLW  0B
0211:  RETLW  5F
0212:  RETLW  95
0213:  RETLW  22
0214:  RETLW  A8
0215:  RETLW  34
0216:  RETLW  BD
0217:  RETLW  4E
0218:  RETLW  E2
0219:  RETLW  7D
021A:  RETLW  20
021B:  RETLW  CE
021C:  RETLW  85
021D:  RETLW  38
021E:  RETLW  E7
021F:  RETLW  22
0220:  RETLW  68
0221:  RETLW  BC
0222:  RETLW  21
0223:  RETLW  97
0224:  RETLW  24
0225:  RETLW  CA
0226:  RETLW  91
0227:  RETLW  4A
0228:  RETLW  8F
0229:  RETLW  F2
022A:  RETLW  6D
022B:  RETLW  DF
022C:  RETLW  3D
022D:  RETLW  B0
022E:  RETLW  3A
022F:  RETLW  FA
0230:  RETLW  FA
0231:  RETLW  FA
0232:  RETLW  FA
0233:  RETLW  47
0234:  RETLW  47
0235:  RETLW  47
0236:  RETLW  47
0237:  RETLW  61
0238:  RETLW  81
0239:  RETLW  6B
023A:  RETLW  2E
023B:  RETLW  87
023C:  RETLW  94
023D:  RETLW  5D
023E:  RETLW  B8
023F:  RETLW  17
0240:  RETLW  83
0241:  RETLW  F5
0242:  RETLW  74
0243:  RETLW  FD
0244:  RETLW  93
0245:  RETLW  3A
0246:  RETLW  24
0247:  RETLW  0C
0248:  RETLW  0C
0249:  RETLW  0C
024A:  RETLW  64
024B:  RETLW  D6
024C:  RETLW  5B
024D:  RETLW  F7
024E:  RETLW  AF
024F:  RETLW  87
0250:  RETLW  3A
0251:  RETLW  6E
0252:  RETLW  AE
0253:  RETLW  F5
0254:  RETLW  4D
0255:  RETLW  B1
0256:  RETLW  4E
0257:  RETLW  29
0258:  RETLW  15
0259:  RETLW  15
025A:  RETLW  15
025B:  RETLW  15
025C:  RETLW  E9
025D:  RETLW  E9
025E:  RETLW  E9
025F:  RETLW  E9
0260:  RETLW  A4
0261:  RETLW  4E
0262:  RETLW  85
0263:  RETLW  56
0264:  RETLW  14
0265:  RETLW  DE
0266:  RETLW  6C
0267:  RETLW  CC
0268:  RETLW  5D
0269:  RETLW  B0
026A:  RETLW  0C
026B:  RETLW  76
026C:  RETLW  FC
026D:  RETLW  E1
026E:  RETLW  D2
026F:  RETLW  C1
0270:  RETLW  AB
0271:  RETLW  AB
0272:  RETLW  AB
0273:  RETLW  AB
0274:  RETLW  AB
0275:  RETLW  20
0276:  RETLW  C1
0277:  RETLW  7C
0278:  RETLW  56
0279:  RETLW  07
027A:  RETLW  2E
027B:  RETLW  68
027C:  RETLW  B4
027D:  RETLW  54
027E:  RETLW  36
027F:  RETLW  19
0280:  RETLW  01
0281:  RETLW  F3
0282:  RETLW  F3
0283:  RETLW  F3
0284:  RETLW  F3
0285:  RETLW  0D
0286:  RETLW  0D
0287:  RETLW  0D
0288:  RETLW  0D
0289:  RETLW  89
028A:  RETLW  E3
028B:  RETLW  D9
028C:  RETLW  76
028D:  RETLW  BA
028E:  RETLW  B6
028F:  RETLW  DB
0290:  RETLW  82
0291:  RETLW  D0
0292:  RETLW  55
0293:  RETLW  94
0294:  RETLW  66
0295:  RETLW  44
0296:  RETLW  31
0297:  RETLW  2B
0298:  RETLW  21
0299:  RETLW  12
029A:  RETLW  12
029B:  RETLW  12
029C:  RETLW  12
029D:  RETLW  12
029E:  RETLW  12
029F:  RETLW  12
02A0:  RETLW  E9
02A1:  RETLW  B7
02A2:  RETLW  C9
02A3:  RETLW  FE
02A4:  RETLW  14
02A5:  RETLW  0D
02A6:  RETLW  03
02A7:  RETLW  F4
02A8:  RETLW  E6
02A9:  RETLW  D9
02AA:  RETLW  D2
02AB:  RETLW  D2
02AC:  RETLW  D2
02AD:  RETLW  D2
02AE:  RETLW  E9
02AF:  RETLW  E9
02B0:  RETLW  E9
02B1:  RETLW  E9
02B2:  RETLW  3A
02B3:  RETLW  5D
02B4:  RETLW  26
02B5:  RETLW  9C
02B6:  RETLW  D7
02B7:  RETLW  FE
02B8:  RETLW  0A
02B9:  RETLW  01
02BA:  RETLW  FB
02BB:  RETLW  0A
02BC:  RETLW  FA
02BD:  RETLW  D6
02BE:  RETLW  7B
02BF:  RETLW  74
02C0:  RETLW  7B
02C1:  RETLW  7E
02C2:  RETLW  7B
02C3:  RETLW  7B
02C4:  RETLW  7B
02C5:  RETLW  7B
02C6:  RETLW  7B
02C7:  RETLW  D7
02C8:  RETLW  FF
02C9:  RETLW  11
02CA:  RETLW  07
02CB:  RETLW  69
02CC:  RETLW  7B
02CD:  RETLW  7C
02CE:  RETLW  6C
02CF:  RETLW  DF
02D0:  RETLW  E0
02D1:  RETLW  E0
02D2:  RETLW  DF
02D3:  RETLW  DE
02D4:  RETLW  DE
02D5:  RETLW  DE
02D6:  RETLW  DE
02D7:  RETLW  9F
02D8:  RETLW  9F
02D9:  RETLW  9F
02DA:  RETLW  9F
02DB:  RETLW  D4
02DC:  RETLW  D3
02DD:  RETLW  87
02DE:  RETLW  0F
02DF:  RETLW  68
02E0:  RETLW  9B
02E1:  RETLW  B3
02E2:  RETLW  B6
02E3:  RETLW  A8
02E4:  RETLW  92
02E5:  RETLW  80
02E6:  RETLW  79
02E7:  RETLW  5D
02E8:  RETLW  37
02E9:  RETLW  F7
02EA:  RETLW  0C
02EB:  RETLW  1C
02EC:  RETLW  1C
02ED:  RETLW  1C
02EE:  RETLW  85
02EF:  RETLW  D6
02F0:  RETLW  1A
02F1:  RETLW  4B
02F2:  RETLW  65
02F3:  RETLW  64
02F4:  RETLW  D3
02F5:  RETLW  F7
02F6:  RETLW  07
02F7:  RETLW  02
02F8:  RETLW  EA
02F9:  RETLW  C2
02FA:  RETLW  40
02FB:  RETLW  4C
02FC:  RETLW  52
02FD:  RETLW  52
02FE:  RETLW  52
02FF:  RETLW  00
0300:  BSF    0A.0
0301:  BSF    0A.1
0302:  BCF    0A.2
0303:  ADDWF  02,F
0304:  RETLW  4C
0305:  RETLW  4C
0306:  RETLW  4C
0307:  RETLW  4C
0308:  RETLW  6E
0309:  RETLW  6C
030A:  RETLW  35
030B:  RETLW  CD
030C:  RETLW  34
030D:  RETLW  75
030E:  RETLW  9B
030F:  RETLW  AC
0310:  RETLW  AC
0311:  RETLW  A7
0312:  RETLW  A1
0313:  RETLW  9E
0314:  RETLW  A0
0315:  RETLW  98
0316:  RETLW  86
0317:  RETLW  57
0318:  RETLW  0E
0319:  RETLW  84
031A:  RETLW  F5
031B:  RETLW  5D
031C:  RETLW  BC
031D:  RETLW  11
031E:  RETLW  55
031F:  RETLW  85
0320:  RETLW  9C
0321:  RETLW  1C
0322:  RETLW  4E
0323:  RETLW  76
0324:  RETLW  97
0325:  RETLW  9A
0326:  RETLW  78
0327:  RETLW  46
0328:  RETLW  01
0329:  RETLW  74
032A:  RETLW  74
032B:  RETLW  74
032C:  RETLW  74
032D:  RETLW  FD
032E:  RETLW  FD
032F:  RETLW  FD
0330:  RETLW  FD
0331:  RETLW  33
0332:  RETLW  4A
0333:  RETLW  28
0334:  RETLW  D2
0335:  RETLW  49
0336:  RETLW  98
0337:  RETLW  CD
0338:  RETLW  EC
0339:  RETLW  FC
033A:  RETLW  0A
033B:  RETLW  19
033C:  RETLW  2C
033D:  RETLW  4B
033E:  RETLW  7B
033F:  RETLW  B9
0340:  RETLW  AB
0341:  RETLW  81
0342:  RETLW  07
0343:  RETLW  8B
0344:  RETLW  0A
0345:  RETLW  85
0346:  RETLW  FA
0347:  RETLW  64
0348:  RETLW  C0
0349:  RETLW  0C
034A:  RETLW  A5
034B:  RETLW  E1
034C:  RETLW  14
034D:  RETLW  46
034E:  RETLW  76
034F:  RETLW  A8
0350:  RETLW  B1
0351:  RETLW  64
0352:  RETLW  CE
0353:  RETLW  CE
0354:  RETLW  CE
0355:  RETLW  CE
0356:  RETLW  CC
0357:  RETLW  CC
0358:  RETLW  CC
0359:  RETLW  CC
035A:  RETLW  14
035B:  RETLW  42
035C:  RETLW  33
035D:  RETLW  EC
035E:  RETLW  71
035F:  RETLW  CD
0360:  RETLW  0F
0361:  RETLW  3B
0362:  RETLW  5B
0363:  RETLW  7C
0364:  RETLW  9E
0365:  RETLW  C9
0366:  RETLW  01
0367:  RETLW  4E
0368:  RETLW  B5
0369:  RETLW  3E
036A:  RETLW  F3
036B:  RETLW  95
036C:  RETLW  3B
036D:  RETLW  E4
036E:  RETLW  90
036F:  RETLW  41
0370:  RETLW  F3
0371:  RETLW  A9
0372:  RETLW  62
0373:  RETLW  1F
0374:  RETLW  59
0375:  RETLW  91
0376:  RETLW  CF
0377:  RETLW  11
0378:  RETLW  5F
0379:  RETLW  B7
037A:  RETLW  13
037B:  RETLW  FB
037C:  RETLW  FB
037D:  RETLW  FB
037E:  RETLW  FB
037F:  RETLW  CC
0380:  RETLW  CC
0381:  RETLW  CC
0382:  RETLW  CC
0383:  RETLW  14
0384:  RETLW  42
0385:  RETLW  33
0386:  RETLW  EC
0387:  RETLW  71
0388:  RETLW  CD
0389:  RETLW  0F
038A:  RETLW  3B
038B:  RETLW  5B
038C:  RETLW  7C
038D:  RETLW  9E
038E:  RETLW  C9
038F:  RETLW  01
0390:  RETLW  4E
0391:  RETLW  B5
0392:  RETLW  3E
0393:  RETLW  F3
0394:  RETLW  95
0395:  RETLW  3B
0396:  RETLW  E4
0397:  RETLW  90
0398:  RETLW  41
0399:  RETLW  F3
039A:  RETLW  A9
039B:  RETLW  62
039C:  RETLW  1F
039D:  RETLW  59
039E:  RETLW  91
039F:  RETLW  CF
03A0:  RETLW  11
03A1:  RETLW  5F
03A2:  RETLW  B7
03A3:  RETLW  13
03A4:  RETLW  FB
03A5:  RETLW  FB
03A6:  RETLW  FB
03A7:  RETLW  FB
03A8:  RETLW  CC
03A9:  RETLW  CC
03AA:  RETLW  CC
03AB:  RETLW  CC
03AC:  RETLW  14
03AD:  RETLW  42
03AE:  RETLW  33
03AF:  RETLW  EC
03B0:  RETLW  71
03B1:  RETLW  CD
03B2:  RETLW  0F
03B3:  RETLW  3B
03B4:  RETLW  5B
03B5:  RETLW  7C
03B6:  RETLW  9E
03B7:  RETLW  C9
03B8:  RETLW  01
03B9:  RETLW  4E
03BA:  RETLW  B5
03BB:  RETLW  3E
03BC:  RETLW  F3
03BD:  RETLW  95
03BE:  RETLW  3B
03BF:  RETLW  E4
03C0:  RETLW  90
03C1:  RETLW  41
03C2:  RETLW  F3
03C3:  RETLW  A9
03C4:  RETLW  62
03C5:  RETLW  1F
03C6:  RETLW  59
03C7:  RETLW  91
03C8:  RETLW  CF
03C9:  RETLW  11
03CA:  RETLW  5F
03CB:  RETLW  B7
03CC:  RETLW  13
03CD:  RETLW  FB
03CE:  RETLW  FB
03CF:  RETLW  FB
03D0:  RETLW  FB
03D1:  RETLW  CC
03D2:  RETLW  CC
03D3:  RETLW  CC
03D4:  RETLW  CC
03D5:  RETLW  14
03D6:  RETLW  42
03D7:  RETLW  33
03D8:  RETLW  EC
03D9:  RETLW  71
03DA:  RETLW  CD
03DB:  RETLW  0F
03DC:  RETLW  3B
03DD:  RETLW  5B
03DE:  RETLW  7C
03DF:  RETLW  9E
03E0:  RETLW  C9
03E1:  RETLW  01
03E2:  RETLW  4E
03E3:  RETLW  B5
03E4:  RETLW  3E
03E5:  RETLW  F3
03E6:  RETLW  95
03E7:  RETLW  3B
03E8:  RETLW  E4
03E9:  RETLW  90
03EA:  RETLW  41
03EB:  RETLW  F3
03EC:  RETLW  A9
03ED:  RETLW  62
03EE:  RETLW  1F
03EF:  RETLW  59
03F0:  RETLW  91
03F1:  RETLW  CF
03F2:  RETLW  11
03F3:  RETLW  5F
03F4:  RETLW  B7
03F5:  RETLW  13
03F6:  RETLW  FB
03F7:  RETLW  FB
03F8:  RETLW  FB
03F9:  RETLW  FB
03FA:  NOP
03FB:  BCF    0A.0
03FC:  BCF    0A.1
03FD:  BSF    0A.2
03FE:  ADDLW  02
03FF:  BTFSC  03.0
0400:  INCF   0A,F
0401:  MOVWF  02
0402:  RETLW  CC
0403:  RETLW  CC
0404:  RETLW  CC
0405:  RETLW  CC
0406:  RETLW  14
0407:  RETLW  42
0408:  RETLW  33
0409:  RETLW  EC
040A:  RETLW  71
040B:  RETLW  CD
040C:  RETLW  0F
040D:  RETLW  3B
040E:  RETLW  5B
040F:  RETLW  7C
0410:  RETLW  9E
0411:  RETLW  C9
0412:  RETLW  01
0413:  RETLW  4E
0414:  RETLW  B5
0415:  RETLW  3E
0416:  RETLW  F3
0417:  RETLW  95
0418:  RETLW  3B
0419:  RETLW  E4
041A:  RETLW  90
041B:  RETLW  41
041C:  RETLW  F3
041D:  RETLW  A9
041E:  RETLW  62
041F:  RETLW  1F
0420:  RETLW  59
0421:  RETLW  91
0422:  RETLW  CF
0423:  RETLW  11
0424:  RETLW  5F
0425:  RETLW  B7
0426:  RETLW  13
0427:  RETLW  FB
0428:  RETLW  FB
0429:  RETLW  FB
042A:  RETLW  FB
042B:  RETLW  CC
042C:  RETLW  CC
042D:  RETLW  CC
042E:  RETLW  CC
042F:  RETLW  14
0430:  RETLW  42
0431:  RETLW  33
0432:  RETLW  EC
0433:  RETLW  71
0434:  RETLW  CD
0435:  RETLW  0F
0436:  RETLW  3B
0437:  RETLW  5B
0438:  RETLW  7C
0439:  RETLW  9E
043A:  RETLW  C9
043B:  RETLW  01
043C:  RETLW  4E
043D:  RETLW  B5
043E:  RETLW  3E
043F:  RETLW  F3
0440:  RETLW  95
0441:  RETLW  3B
0442:  RETLW  E4
0443:  RETLW  90
0444:  RETLW  41
0445:  RETLW  F3
0446:  RETLW  A9
0447:  RETLW  62
0448:  RETLW  1F
0449:  RETLW  59
044A:  RETLW  91
044B:  RETLW  CF
044C:  RETLW  11
044D:  RETLW  5F
044E:  RETLW  B7
044F:  RETLW  13
0450:  RETLW  FB
0451:  RETLW  FB
0452:  RETLW  FB
0453:  RETLW  FB
0454:  RETLW  CC
0455:  RETLW  CC
0456:  RETLW  CC
0457:  RETLW  CC
0458:  RETLW  14
0459:  RETLW  42
045A:  RETLW  33
045B:  RETLW  EC
045C:  RETLW  71
045D:  RETLW  CD
045E:  RETLW  0F
045F:  RETLW  3B
0460:  RETLW  5B
0461:  RETLW  7C
0462:  RETLW  9E
0463:  RETLW  C9
0464:  RETLW  01
0465:  RETLW  4E
0466:  RETLW  B5
0467:  RETLW  3E
0468:  RETLW  F3
0469:  RETLW  95
046A:  RETLW  3B
046B:  RETLW  E4
046C:  RETLW  90
046D:  RETLW  41
046E:  RETLW  F3
046F:  RETLW  A9
0470:  RETLW  62
0471:  RETLW  1F
0472:  RETLW  59
0473:  RETLW  91
0474:  RETLW  CF
0475:  RETLW  11
0476:  RETLW  5F
0477:  RETLW  B7
0478:  RETLW  13
0479:  RETLW  FB
047A:  RETLW  FB
047B:  RETLW  FB
047C:  RETLW  FB
047D:  RETLW  CC
047E:  RETLW  CC
047F:  RETLW  CC
0480:  RETLW  CC
0481:  RETLW  14
0482:  RETLW  42
0483:  RETLW  33
0484:  RETLW  EC
0485:  RETLW  71
0486:  RETLW  CD
0487:  RETLW  0F
0488:  RETLW  3B
0489:  RETLW  5B
048A:  RETLW  7C
048B:  RETLW  9E
048C:  RETLW  C9
048D:  RETLW  01
048E:  RETLW  4E
048F:  RETLW  B5
0490:  RETLW  3E
0491:  RETLW  F3
0492:  RETLW  95
0493:  RETLW  3B
0494:  RETLW  E4
0495:  RETLW  90
0496:  RETLW  41
0497:  RETLW  F3
0498:  RETLW  A9
0499:  RETLW  62
049A:  RETLW  1F
049B:  RETLW  59
049C:  RETLW  91
049D:  RETLW  CF
049E:  RETLW  11
049F:  RETLW  5F
04A0:  RETLW  B7
04A1:  RETLW  13
04A2:  RETLW  FB
04A3:  RETLW  FB
04A4:  RETLW  FB
04A5:  RETLW  FB
04A6:  RETLW  CC
04A7:  RETLW  CC
04A8:  RETLW  CC
04A9:  RETLW  CC
04AA:  RETLW  14
04AB:  RETLW  42
04AC:  RETLW  33
04AD:  RETLW  EC
04AE:  RETLW  71
04AF:  RETLW  CD
04B0:  RETLW  0F
04B1:  RETLW  3B
04B2:  RETLW  5B
04B3:  RETLW  7C
04B4:  RETLW  9E
04B5:  RETLW  C9
04B6:  RETLW  01
04B7:  RETLW  4E
04B8:  RETLW  B5
04B9:  RETLW  3E
04BA:  RETLW  F3
04BB:  RETLW  95
04BC:  RETLW  3B
04BD:  RETLW  E4
04BE:  RETLW  90
04BF:  RETLW  41
04C0:  RETLW  F3
04C1:  RETLW  A9
04C2:  RETLW  62
04C3:  RETLW  1F
04C4:  RETLW  59
04C5:  RETLW  91
04C6:  RETLW  CF
04C7:  RETLW  11
04C8:  RETLW  5F
04C9:  RETLW  B7
04CA:  RETLW  13
04CB:  RETLW  FB
04CC:  RETLW  FB
04CD:  RETLW  FB
04CE:  RETLW  FB
04CF:  RETLW  CC
04D0:  RETLW  CC
04D1:  RETLW  CC
04D2:  RETLW  CC
04D3:  RETLW  14
04D4:  RETLW  42
04D5:  RETLW  33
04D6:  RETLW  EC
04D7:  RETLW  71
04D8:  RETLW  CD
04D9:  RETLW  0F
04DA:  RETLW  3B
04DB:  RETLW  5B
04DC:  RETLW  7C
04DD:  RETLW  9E
04DE:  RETLW  C9
04DF:  RETLW  01
04E0:  RETLW  4E
04E1:  RETLW  B5
04E2:  RETLW  3E
04E3:  RETLW  F3
04E4:  RETLW  95
04E5:  RETLW  3B
04E6:  RETLW  E4
04E7:  RETLW  90
04E8:  RETLW  41
04E9:  RETLW  F3
04EA:  RETLW  A9
04EB:  RETLW  62
04EC:  RETLW  1F
04ED:  RETLW  59
04EE:  RETLW  91
04EF:  RETLW  CF
04F0:  RETLW  11
04F1:  RETLW  5F
04F2:  RETLW  B7
04F3:  RETLW  13
04F4:  RETLW  FB
04F5:  RETLW  FB
04F6:  RETLW  FB
04F7:  RETLW  FB
04F8:  NOP
04F9:  NOP
04FA:  NOP
04FB:  BSF    0A.0
04FC:  BCF    0A.1
04FD:  BSF    0A.2
04FE:  ADDLW  02
04FF:  BTFSC  03.0
0500:  INCF   0A,F
0501:  MOVWF  02
0502:  RETLW  CC
0503:  RETLW  CC
0504:  RETLW  CC
0505:  RETLW  CC
0506:  RETLW  14
0507:  RETLW  42
0508:  RETLW  33
0509:  RETLW  EC
050A:  RETLW  71
050B:  RETLW  CD
050C:  RETLW  0F
050D:  RETLW  3B
050E:  RETLW  5B
050F:  RETLW  7C
0510:  RETLW  9E
0511:  RETLW  C9
0512:  RETLW  01
0513:  RETLW  4E
0514:  RETLW  B5
0515:  RETLW  3E
0516:  RETLW  F3
0517:  RETLW  95
0518:  RETLW  3B
0519:  RETLW  E4
051A:  RETLW  90
051B:  RETLW  41
051C:  RETLW  F3
051D:  RETLW  A9
051E:  RETLW  62
051F:  RETLW  1F
0520:  RETLW  59
0521:  RETLW  91
0522:  RETLW  CF
0523:  RETLW  11
0524:  RETLW  5F
0525:  RETLW  B7
0526:  RETLW  13
0527:  RETLW  FB
0528:  RETLW  FB
0529:  RETLW  FB
052A:  RETLW  FB
052B:  RETLW  CC
052C:  RETLW  CC
052D:  RETLW  CC
052E:  RETLW  CC
052F:  RETLW  14
0530:  RETLW  42
0531:  RETLW  33
0532:  RETLW  EC
0533:  RETLW  71
0534:  RETLW  CD
0535:  RETLW  0F
0536:  RETLW  3B
0537:  RETLW  5B
0538:  RETLW  7C
0539:  RETLW  9E
053A:  RETLW  C9
053B:  RETLW  01
053C:  RETLW  4E
053D:  RETLW  B5
053E:  RETLW  3E
053F:  RETLW  F3
0540:  RETLW  95
0541:  RETLW  3B
0542:  RETLW  E4
0543:  RETLW  90
0544:  RETLW  41
0545:  RETLW  F3
0546:  RETLW  A9
0547:  RETLW  62
0548:  RETLW  1F
0549:  RETLW  59
054A:  RETLW  91
054B:  RETLW  CF
054C:  RETLW  11
054D:  RETLW  5F
054E:  RETLW  B7
054F:  RETLW  13
0550:  RETLW  FB
0551:  RETLW  FB
0552:  RETLW  FB
0553:  RETLW  FB
0554:  RETLW  CC
0555:  RETLW  CC
0556:  RETLW  CC
0557:  RETLW  CC
0558:  RETLW  14
0559:  RETLW  42
055A:  RETLW  33
055B:  RETLW  EC
055C:  RETLW  71
055D:  RETLW  CD
055E:  RETLW  0F
055F:  RETLW  3B
0560:  RETLW  5B
0561:  RETLW  7C
0562:  RETLW  9E
0563:  RETLW  C9
0564:  RETLW  01
0565:  RETLW  4E
0566:  RETLW  B5
0567:  RETLW  3E
0568:  RETLW  F3
0569:  RETLW  95
056A:  RETLW  3B
056B:  RETLW  E4
056C:  RETLW  90
056D:  RETLW  41
056E:  RETLW  F3
056F:  RETLW  A9
0570:  RETLW  62
0571:  RETLW  1F
0572:  RETLW  59
0573:  RETLW  91
0574:  RETLW  CF
0575:  RETLW  11
0576:  RETLW  5F
0577:  RETLW  B7
0578:  RETLW  13
0579:  RETLW  FB
057A:  RETLW  FB
057B:  RETLW  FB
057C:  RETLW  FB
057D:  RETLW  CC
057E:  RETLW  CC
057F:  RETLW  CC
0580:  RETLW  CC
0581:  RETLW  14
0582:  RETLW  42
0583:  RETLW  33
0584:  RETLW  EC
0585:  RETLW  71
0586:  RETLW  CD
0587:  RETLW  0F
0588:  RETLW  3B
0589:  RETLW  5B
058A:  RETLW  7C
058B:  RETLW  9E
058C:  RETLW  C9
058D:  RETLW  01
058E:  RETLW  4E
058F:  RETLW  B5
0590:  RETLW  3E
0591:  RETLW  F3
0592:  RETLW  95
0593:  RETLW  3B
0594:  RETLW  E4
0595:  RETLW  90
0596:  RETLW  41
0597:  RETLW  F3
0598:  RETLW  A9
0599:  RETLW  62
059A:  RETLW  1F
059B:  RETLW  59
059C:  RETLW  91
059D:  RETLW  CF
059E:  RETLW  11
059F:  RETLW  5F
05A0:  RETLW  B7
05A1:  RETLW  13
05A2:  RETLW  FB
05A3:  RETLW  FB
05A4:  RETLW  FB
05A5:  RETLW  FB
05A6:  RETLW  CC
05A7:  RETLW  CC
05A8:  RETLW  CC
05A9:  RETLW  CC
05AA:  RETLW  14
05AB:  RETLW  42
05AC:  RETLW  33
05AD:  RETLW  EC
05AE:  RETLW  71
05AF:  RETLW  CD
05B0:  RETLW  0F
05B1:  RETLW  3B
05B2:  RETLW  5B
05B3:  RETLW  7C
05B4:  RETLW  9E
05B5:  RETLW  C9
05B6:  RETLW  01
05B7:  RETLW  4E
05B8:  RETLW  B5
05B9:  RETLW  3E
05BA:  RETLW  F3
05BB:  RETLW  95
05BC:  RETLW  3B
05BD:  RETLW  E4
05BE:  RETLW  90
05BF:  RETLW  41
05C0:  RETLW  F3
05C1:  RETLW  A9
05C2:  RETLW  62
05C3:  RETLW  1F
05C4:  RETLW  59
05C5:  RETLW  91
05C6:  RETLW  CF
05C7:  RETLW  11
05C8:  RETLW  5F
05C9:  RETLW  B7
05CA:  RETLW  13
05CB:  RETLW  FB
05CC:  RETLW  FB
05CD:  RETLW  FB
05CE:  RETLW  FB
05CF:  DATA 0C,2A
05D0:  DATA BA,12
05D1:  DATA 66,16
05D2:  DATA 6C,1D
05D3:  DATA 25,33
05D4:  DATA 8A,37
05D5:  DATA 75,3A
05D6:  DATA BA,12
05D7:  DATA 66,00
*
0678:  MOVLW  8E
0679:  MOVWF  77
067A:  MOVF   71,W
067B:  MOVWF  78
067C:  MOVF   70,W
067D:  MOVWF  79
067E:  CLRF   7A
067F:  MOVF   78,F
0680:  BTFSS  03.2
0681:  GOTO   68C
0682:  MOVF   79,W
0683:  MOVWF  78
0684:  CLRF   79
0685:  MOVLW  08
0686:  SUBWF  77,F
0687:  MOVF   78,F
0688:  BTFSS  03.2
0689:  GOTO   68C
068A:  CLRF   77
068B:  GOTO   694
068C:  BCF    03.0
068D:  BTFSC  78.7
068E:  GOTO   693
068F:  RLF    79,F
0690:  RLF    78,F
0691:  DECF   77,F
0692:  GOTO   68C
0693:  BCF    78.7
0694:  RETURN
0695:  MOVF   70,W
0696:  BTFSC  03.2
0697:  GOTO   714
0698:  BSF    03.5
0699:  MOVWF  20
069A:  MOVF   7B,W
069B:  BTFSS  03.2
069C:  GOTO   69F
069D:  BCF    03.5
069E:  GOTO   714
069F:  ADDWF  20,F
06A0:  BTFSC  03.0
06A1:  GOTO   6AD
06A2:  MOVLW  7F
06A3:  SUBWF  20,F
06A4:  BTFSC  03.0
06A5:  GOTO   6A8
06A6:  BCF    03.5
06A7:  GOTO   714
06A8:  BTFSS  03.2
06A9:  GOTO   6AC
06AA:  BCF    03.5
06AB:  GOTO   714
06AC:  GOTO   6B3
06AD:  MOVLW  81
06AE:  ADDWF  20,F
06AF:  BTFSS  03.0
06B0:  GOTO   6B3
06B1:  BCF    03.5
06B2:  GOTO   714
06B3:  MOVF   20,W
06B4:  MOVWF  77
06B5:  CLRF   78
06B6:  CLRF   79
06B7:  CLRF   7A
06B8:  MOVF   71,W
06B9:  MOVWF  24
06BA:  BSF    24.7
06BB:  MOVF   72,W
06BC:  MOVWF  23
06BD:  MOVF   73,W
06BE:  MOVWF  22
06BF:  MOVLW  18
06C0:  MOVWF  20
06C1:  CLRF   21
06C2:  BTFSS  22.0
06C3:  GOTO   6DC
06C4:  MOVF   7E,W
06C5:  ADDWF  7A,F
06C6:  BTFSS  03.0
06C7:  GOTO   6CE
06C8:  INCF   79,F
06C9:  BTFSS  03.2
06CA:  GOTO   6CE
06CB:  INCF   78,F
06CC:  BTFSC  03.2
06CD:  BSF    21.7
06CE:  MOVF   7D,W
06CF:  ADDWF  79,F
06D0:  BTFSS  03.0
06D1:  GOTO   6D5
06D2:  INCF   78,F
06D3:  BTFSC  03.2
06D4:  BSF    21.7
06D5:  MOVF   7C,W
06D6:  MOVWF  72
06D7:  BSF    72.7
06D8:  MOVF   72,W
06D9:  ADDWF  78,F
06DA:  BTFSC  03.0
06DB:  BSF    21.7
06DC:  RLF    21,F
06DD:  RRF    78,F
06DE:  RRF    79,F
06DF:  RRF    7A,F
06E0:  RRF    24,F
06E1:  RRF    23,F
06E2:  RRF    22,F
06E3:  BCF    03.0
06E4:  DECFSZ 20,F
06E5:  GOTO   6C1
06E6:  MOVLW  01
06E7:  ADDWF  77,F
06E8:  BTFSS  03.0
06E9:  GOTO   6EC
06EA:  BCF    03.5
06EB:  GOTO   714
06EC:  BTFSC  78.7
06ED:  GOTO   6F6
06EE:  RLF    24,F
06EF:  RLF    7A,F
06F0:  RLF    79,F
06F1:  RLF    78,F
06F2:  DECFSZ 77,F
06F3:  GOTO   6F6
06F4:  BCF    03.5
06F5:  GOTO   714
06F6:  BTFSS  24.7
06F7:  GOTO   709
06F8:  INCF   7A,F
06F9:  BTFSS  03.2
06FA:  GOTO   709
06FB:  INCF   79,F
06FC:  BTFSS  03.2
06FD:  GOTO   709
06FE:  INCF   78,F
06FF:  BTFSS  03.2
0700:  GOTO   709
0701:  RRF    78,F
0702:  RRF    79,F
0703:  RRF    7A,F
0704:  INCF   77,F
0705:  BTFSS  03.2
0706:  GOTO   709
0707:  BCF    03.5
0708:  GOTO   714
0709:  MOVF   71,W
070A:  MOVWF  21
070B:  MOVF   7C,W
070C:  XORWF  21,F
070D:  BTFSS  21.7
070E:  GOTO   711
070F:  BSF    78.7
0710:  GOTO   719
0711:  BCF    78.7
0712:  GOTO   719
0713:  BCF    03.5
0714:  CLRF   77
0715:  CLRF   78
0716:  CLRF   79
0717:  CLRF   7A
0718:  BSF    03.5
0719:  BCF    03.5
071A:  RETURN
071B:  MOVLW  8E
071C:  MOVWF  77
071D:  MOVF   68,W
071E:  SUBWF  77,F
071F:  MOVF   69,W
0720:  MOVWF  79
0721:  MOVF   6A,W
0722:  MOVWF  78
0723:  BSF    79.7
0724:  MOVF   77,F
0725:  BTFSC  03.2
0726:  GOTO   732
0727:  BCF    03.0
0728:  MOVF   79,F
0729:  BTFSS  03.2
072A:  GOTO   72E
072B:  MOVF   78,F
072C:  BTFSC  03.2
072D:  GOTO   732
072E:  RRF    79,F
072F:  RRF    78,F
0730:  DECFSZ 77,F
0731:  GOTO   727
0732:  BTFSS  69.7
0733:  GOTO   739
0734:  COMF   78,F
0735:  COMF   79,F
0736:  INCF   78,F
0737:  BTFSC  03.2
0738:  INCF   79,F
0739:  RETURN
073A:  MOVF   47,W
073B:  CLRF   78
073C:  SUBWF  46,W
073D:  BTFSC  03.0
073E:  GOTO   742
073F:  MOVF   46,W
0740:  MOVWF  77
0741:  GOTO   74E
0742:  CLRF   77
0743:  MOVLW  08
0744:  MOVWF  48
0745:  RLF    46,F
0746:  RLF    77,F
0747:  MOVF   47,W
0748:  SUBWF  77,W
0749:  BTFSC  03.0
074A:  MOVWF  77
074B:  RLF    78,F
074C:  DECFSZ 48,F
074D:  GOTO   745
074E:  RETURN
*
07BF:  CLRF   77
07C0:  CLRF   78
07C1:  MOVF   6A,W
07C2:  BCF    03.0
07C3:  BTFSC  6B.0
07C4:  ADDWF  77,F
07C5:  RRF    77,F
07C6:  RRF    78,F
07C7:  BTFSC  6B.1
07C8:  ADDWF  77,F
07C9:  RRF    77,F
07CA:  RRF    78,F
07CB:  BTFSC  6B.2
07CC:  ADDWF  77,F
07CD:  RRF    77,F
07CE:  RRF    78,F
07CF:  BTFSC  6B.3
07D0:  ADDWF  77,F
07D1:  RRF    77,F
07D2:  RRF    78,F
07D3:  BTFSC  6B.4
07D4:  ADDWF  77,F
07D5:  RRF    77,F
07D6:  RRF    78,F
07D7:  BTFSC  6B.5
07D8:  ADDWF  77,F
07D9:  RRF    77,F
07DA:  RRF    78,F
07DB:  BTFSC  6B.6
07DC:  ADDWF  77,F
07DD:  RRF    77,F
07DE:  RRF    78,F
07DF:  BTFSC  6B.7
07E0:  ADDWF  77,F
07E1:  RRF    77,F
07E2:  RRF    78,F
07E3:  RETURN
*
0800:  MOVLW  80
0801:  BTFSC  03.1
0802:  XORWF  7C,F
0803:  BSF    03.5
0804:  CLRF   22
0805:  CLRF   23
0806:  MOVF   71,W
0807:  MOVWF  21
0808:  MOVF   7C,W
0809:  XORWF  21,F
080A:  MOVF   70,W
080B:  BTFSC  03.2
080C:  GOTO   0F1
080D:  MOVWF  20
080E:  MOVWF  77
080F:  MOVF   7B,W
0810:  BTFSC  03.2
0811:  GOTO   0FA
0812:  SUBWF  20,F
0813:  BTFSC  03.2
0814:  GOTO   096
0815:  BTFSS  03.0
0816:  GOTO   054
0817:  MOVF   7C,W
0818:  MOVWF  26
0819:  BSF    26.7
081A:  MOVF   7D,W
081B:  MOVWF  25
081C:  MOVF   7E,W
081D:  MOVWF  24
081E:  CLRF   23
081F:  BCF    03.0
0820:  RRF    26,F
0821:  RRF    25,F
0822:  RRF    24,F
0823:  RRF    23,F
0824:  DECFSZ 20,F
0825:  GOTO   01E
0826:  BTFSS  21.7
0827:  GOTO   02B
0828:  BSF    22.0
0829:  GOTO   10E
082A:  BCF    22.0
082B:  BCF    20.0
082C:  BSF    22.4
082D:  MOVLW  73
082E:  MOVWF  04
082F:  BCF    03.7
0830:  GOTO   123
0831:  BCF    22.4
0832:  BTFSC  21.7
0833:  GOTO   03E
0834:  BTFSS  20.0
0835:  GOTO   049
0836:  RRF    26,F
0837:  RRF    25,F
0838:  RRF    24,F
0839:  RRF    23,F
083A:  INCF   77,F
083B:  BTFSC  03.2
083C:  GOTO   109
083D:  GOTO   049
083E:  BTFSC  26.7
083F:  GOTO   04C
0840:  BCF    03.0
0841:  RLF    23,F
0842:  RLF    24,F
0843:  RLF    25,F
0844:  RLF    26,F
0845:  DECF   77,F
0846:  BTFSC  03.2
0847:  GOTO   109
0848:  GOTO   03E
0849:  BSF    22.6
084A:  GOTO   0B6
084B:  BCF    22.6
084C:  MOVF   71,W
084D:  MOVWF  21
084E:  BTFSS  21.7
084F:  GOTO   052
0850:  BSF    26.7
0851:  GOTO   102
0852:  BCF    26.7
0853:  GOTO   102
0854:  MOVF   7B,W
0855:  MOVWF  20
0856:  MOVWF  77
0857:  MOVF   70,W
0858:  SUBWF  20,F
0859:  MOVF   71,W
085A:  MOVWF  26
085B:  BSF    26.7
085C:  MOVF   72,W
085D:  MOVWF  25
085E:  MOVF   73,W
085F:  MOVWF  24
0860:  CLRF   23
0861:  BCF    03.0
0862:  RRF    26,F
0863:  RRF    25,F
0864:  RRF    24,F
0865:  RRF    23,F
0866:  DECFSZ 20,F
0867:  GOTO   060
0868:  BTFSS  21.7
0869:  GOTO   06D
086A:  BSF    22.1
086B:  GOTO   10E
086C:  BCF    22.1
086D:  BCF    20.0
086E:  BSF    22.5
086F:  MOVLW  7E
0870:  MOVWF  04
0871:  BCF    03.7
0872:  GOTO   123
0873:  BCF    22.5
0874:  BTFSC  21.7
0875:  GOTO   080
0876:  BTFSS  20.0
0877:  GOTO   08B
0878:  RRF    26,F
0879:  RRF    25,F
087A:  RRF    24,F
087B:  RRF    23,F
087C:  INCF   77,F
087D:  BTFSC  03.2
087E:  GOTO   109
087F:  GOTO   08B
0880:  BTFSC  26.7
0881:  GOTO   08E
0882:  BCF    03.0
0883:  RLF    23,F
0884:  RLF    24,F
0885:  RLF    25,F
0886:  RLF    26,F
0887:  DECF   77,F
0888:  BTFSC  03.2
0889:  GOTO   109
088A:  GOTO   080
088B:  BSF    22.7
088C:  GOTO   0B6
088D:  BCF    22.7
088E:  MOVF   7C,W
088F:  MOVWF  21
0890:  BTFSS  21.7
0891:  GOTO   094
0892:  BSF    26.7
0893:  GOTO   102
0894:  BCF    26.7
0895:  GOTO   102
0896:  MOVF   7C,W
0897:  MOVWF  26
0898:  BSF    26.7
0899:  MOVF   7D,W
089A:  MOVWF  25
089B:  MOVF   7E,W
089C:  MOVWF  24
089D:  BTFSS  21.7
089E:  GOTO   0A3
089F:  BCF    26.7
08A0:  BSF    22.2
08A1:  GOTO   10E
08A2:  BCF    22.2
08A3:  CLRF   23
08A4:  BCF    20.0
08A5:  MOVLW  73
08A6:  MOVWF  04
08A7:  BCF    03.7
08A8:  GOTO   123
08A9:  BTFSC  21.7
08AA:  GOTO   0CC
08AB:  MOVF   71,W
08AC:  MOVWF  21
08AD:  BTFSS  20.0
08AE:  GOTO   0B6
08AF:  RRF    26,F
08B0:  RRF    25,F
08B1:  RRF    24,F
08B2:  RRF    23,F
08B3:  INCF   77,F
08B4:  BTFSC  03.2
08B5:  GOTO   109
08B6:  BTFSS  23.7
08B7:  GOTO   0C7
08B8:  INCF   24,F
08B9:  BTFSS  03.2
08BA:  GOTO   0C7
08BB:  INCF   25,F
08BC:  BTFSS  03.2
08BD:  GOTO   0C7
08BE:  INCF   26,F
08BF:  BTFSS  03.2
08C0:  GOTO   0C7
08C1:  RRF    26,F
08C2:  RRF    25,F
08C3:  RRF    24,F
08C4:  INCF   77,F
08C5:  BTFSC  03.2
08C6:  GOTO   109
08C7:  BTFSC  22.6
08C8:  GOTO   04B
08C9:  BTFSC  22.7
08CA:  GOTO   08D
08CB:  GOTO   0EB
08CC:  MOVLW  80
08CD:  XORWF  26,F
08CE:  BTFSS  26.7
08CF:  GOTO   0D4
08D0:  GOTO   10E
08D1:  MOVF   7C,W
08D2:  MOVWF  21
08D3:  GOTO   0E1
08D4:  MOVF   71,W
08D5:  MOVWF  21
08D6:  MOVF   26,F
08D7:  BTFSS  03.2
08D8:  GOTO   0E1
08D9:  MOVF   25,F
08DA:  BTFSS  03.2
08DB:  GOTO   0E1
08DC:  MOVF   24,F
08DD:  BTFSS  03.2
08DE:  GOTO   0E1
08DF:  CLRF   77
08E0:  GOTO   102
08E1:  BTFSC  26.7
08E2:  GOTO   0EB
08E3:  BCF    03.0
08E4:  RLF    23,F
08E5:  RLF    24,F
08E6:  RLF    25,F
08E7:  RLF    26,F
08E8:  DECFSZ 77,F
08E9:  GOTO   0E1
08EA:  GOTO   109
08EB:  BTFSS  21.7
08EC:  GOTO   0EF
08ED:  BSF    26.7
08EE:  GOTO   102
08EF:  BCF    26.7
08F0:  GOTO   102
08F1:  MOVF   7B,W
08F2:  MOVWF  77
08F3:  MOVF   7C,W
08F4:  MOVWF  26
08F5:  MOVF   7D,W
08F6:  MOVWF  25
08F7:  MOVF   7E,W
08F8:  MOVWF  24
08F9:  GOTO   102
08FA:  MOVF   70,W
08FB:  MOVWF  77
08FC:  MOVF   71,W
08FD:  MOVWF  26
08FE:  MOVF   72,W
08FF:  MOVWF  25
0900:  MOVF   73,W
0901:  MOVWF  24
0902:  MOVF   26,W
0903:  MOVWF  78
0904:  MOVF   25,W
0905:  MOVWF  79
0906:  MOVF   24,W
0907:  MOVWF  7A
0908:  GOTO   141
0909:  CLRF   77
090A:  CLRF   78
090B:  CLRF   79
090C:  CLRF   7A
090D:  GOTO   141
090E:  CLRF   23
090F:  COMF   24,F
0910:  COMF   25,F
0911:  COMF   26,F
0912:  COMF   23,F
0913:  INCF   23,F
0914:  BTFSS  03.2
0915:  GOTO   11C
0916:  INCF   24,F
0917:  BTFSS  03.2
0918:  GOTO   11C
0919:  INCF   25,F
091A:  BTFSC  03.2
091B:  INCF   26,F
091C:  BTFSC  22.0
091D:  GOTO   02A
091E:  BTFSC  22.1
091F:  GOTO   06C
0920:  BTFSC  22.2
0921:  GOTO   0A2
0922:  GOTO   0D1
0923:  MOVF   00,W
0924:  ADDWF  24,F
0925:  BTFSS  03.0
0926:  GOTO   12D
0927:  INCF   25,F
0928:  BTFSS  03.2
0929:  GOTO   12D
092A:  INCF   26,F
092B:  BTFSC  03.2
092C:  BSF    20.0
092D:  DECF   04,F
092E:  MOVF   00,W
092F:  ADDWF  25,F
0930:  BTFSS  03.0
0931:  GOTO   135
0932:  INCF   26,F
0933:  BTFSC  03.2
0934:  BSF    20.0
0935:  DECF   04,F
0936:  MOVF   00,W
0937:  BTFSS  00.7
0938:  XORLW  80
0939:  ADDWF  26,F
093A:  BTFSC  03.0
093B:  BSF    20.0
093C:  BTFSC  22.4
093D:  GOTO   031
093E:  BTFSC  22.5
093F:  GOTO   073
0940:  GOTO   0A9
0941:  BCF    03.5
0942:  RETURN
0943:  MOVF   70,W
0944:  BTFSC  03.2
0945:  GOTO   215
0946:  BSF    03.5
0947:  MOVWF  24
0948:  MOVF   7B,W
0949:  BTFSS  03.2
094A:  GOTO   14D
094B:  BCF    03.5
094C:  GOTO   215
094D:  SUBWF  24,F
094E:  BTFSS  03.0
094F:  GOTO   157
0950:  MOVLW  7F
0951:  ADDWF  24,F
0952:  BTFSS  03.0
0953:  GOTO   156
0954:  BCF    03.5
0955:  GOTO   215
0956:  GOTO   161
0957:  MOVLW  81
0958:  SUBWF  24,F
0959:  BTFSC  03.0
095A:  GOTO   15D
095B:  BCF    03.5
095C:  GOTO   215
095D:  BTFSS  03.2
095E:  GOTO   161
095F:  BCF    03.5
0960:  GOTO   215
0961:  MOVF   24,W
0962:  MOVWF  77
0963:  CLRF   78
0964:  CLRF   79
0965:  CLRF   7A
0966:  CLRF   23
0967:  MOVF   71,W
0968:  MOVWF  22
0969:  BSF    22.7
096A:  MOVF   72,W
096B:  MOVWF  21
096C:  MOVF   73,W
096D:  MOVWF  20
096E:  MOVLW  19
096F:  MOVWF  24
0970:  MOVF   7E,W
0971:  SUBWF  20,F
0972:  BTFSC  03.0
0973:  GOTO   184
0974:  MOVLW  01
0975:  SUBWF  21,F
0976:  BTFSC  03.0
0977:  GOTO   184
0978:  SUBWF  22,F
0979:  BTFSC  03.0
097A:  GOTO   184
097B:  SUBWF  23,F
097C:  BTFSC  03.0
097D:  GOTO   184
097E:  INCF   23,F
097F:  INCF   22,F
0980:  INCF   21,F
0981:  MOVF   7E,W
0982:  ADDWF  20,F
0983:  GOTO   1B6
0984:  MOVF   7D,W
0985:  SUBWF  21,F
0986:  BTFSC  03.0
0987:  GOTO   19F
0988:  MOVLW  01
0989:  SUBWF  22,F
098A:  BTFSC  03.0
098B:  GOTO   19F
098C:  SUBWF  23,F
098D:  BTFSC  03.0
098E:  GOTO   19F
098F:  INCF   23,F
0990:  INCF   22,F
0991:  MOVF   7D,W
0992:  ADDWF  21,F
0993:  MOVF   7E,W
0994:  ADDWF  20,F
0995:  BTFSS  03.0
0996:  GOTO   1B6
0997:  INCF   21,F
0998:  BTFSS  03.2
0999:  GOTO   1B6
099A:  INCF   22,F
099B:  BTFSS  03.2
099C:  GOTO   1B6
099D:  INCF   23,F
099E:  GOTO   1B6
099F:  MOVF   7C,W
09A0:  IORLW  80
09A1:  SUBWF  22,F
09A2:  BTFSC  03.0
09A3:  GOTO   1B5
09A4:  MOVLW  01
09A5:  SUBWF  23,F
09A6:  BTFSC  03.0
09A7:  GOTO   1B5
09A8:  INCF   23,F
09A9:  MOVF   7C,W
09AA:  IORLW  80
09AB:  ADDWF  22,F
09AC:  MOVF   7D,W
09AD:  ADDWF  21,F
09AE:  BTFSS  03.0
09AF:  GOTO   193
09B0:  INCF   22,F
09B1:  BTFSS  03.2
09B2:  GOTO   193
09B3:  INCF   23,F
09B4:  GOTO   193
09B5:  BSF    7A.0
09B6:  DECFSZ 24,F
09B7:  GOTO   1B9
09B8:  GOTO   1C4
09B9:  BCF    03.0
09BA:  RLF    20,F
09BB:  RLF    21,F
09BC:  RLF    22,F
09BD:  RLF    23,F
09BE:  BCF    03.0
09BF:  RLF    7A,F
09C0:  RLF    79,F
09C1:  RLF    78,F
09C2:  RLF    25,F
09C3:  GOTO   170
09C4:  BTFSS  25.0
09C5:  GOTO   1CC
09C6:  BCF    03.0
09C7:  RRF    78,F
09C8:  RRF    79,F
09C9:  RRF    7A,F
09CA:  RRF    25,F
09CB:  GOTO   1D0
09CC:  DECFSZ 77,F
09CD:  GOTO   1D0
09CE:  BCF    03.5
09CF:  GOTO   215
09D0:  BTFSC  25.7
09D1:  GOTO   1F9
09D2:  BCF    03.0
09D3:  RLF    20,F
09D4:  RLF    21,F
09D5:  RLF    22,F
09D6:  RLF    23,F
09D7:  MOVF   7E,W
09D8:  SUBWF  20,F
09D9:  BTFSC  03.0
09DA:  GOTO   1E5
09DB:  MOVLW  01
09DC:  SUBWF  21,F
09DD:  BTFSC  03.0
09DE:  GOTO   1E5
09DF:  SUBWF  22,F
09E0:  BTFSC  03.0
09E1:  GOTO   1E5
09E2:  SUBWF  23,F
09E3:  BTFSS  03.0
09E4:  GOTO   20A
09E5:  MOVF   7D,W
09E6:  SUBWF  21,F
09E7:  BTFSC  03.0
09E8:  GOTO   1F0
09E9:  MOVLW  01
09EA:  SUBWF  22,F
09EB:  BTFSC  03.0
09EC:  GOTO   1F0
09ED:  SUBWF  23,F
09EE:  BTFSS  03.0
09EF:  GOTO   20A
09F0:  MOVF   7C,W
09F1:  IORLW  80
09F2:  SUBWF  22,F
09F3:  BTFSC  03.0
09F4:  GOTO   1F9
09F5:  MOVLW  01
09F6:  SUBWF  23,F
09F7:  BTFSS  03.0
09F8:  GOTO   20A
09F9:  INCF   7A,F
09FA:  BTFSS  03.2
09FB:  GOTO   20A
09FC:  INCF   79,F
09FD:  BTFSS  03.2
09FE:  GOTO   20A
09FF:  INCF   78,F
0A00:  BTFSS  03.2
0A01:  GOTO   20A
0A02:  INCF   77,F
0A03:  BTFSS  03.2
0A04:  GOTO   207
0A05:  BCF    03.5
0A06:  GOTO   215
0A07:  RRF    78,F
0A08:  RRF    79,F
0A09:  RRF    7A,F
0A0A:  MOVF   71,W
0A0B:  MOVWF  24
0A0C:  MOVF   7C,W
0A0D:  XORWF  24,F
0A0E:  BTFSS  24.7
0A0F:  GOTO   212
0A10:  BSF    78.7
0A11:  GOTO   21A
0A12:  BCF    78.7
0A13:  GOTO   21A
0A14:  BCF    03.5
0A15:  CLRF   77
0A16:  CLRF   78
0A17:  CLRF   79
0A18:  CLRF   7A
0A19:  BSF    03.5
0A1A:  BCF    03.5
0A1B:  RETURN
*
0FA7:  BTFSC  03.1
0FA8:  GOTO   7AC
0FA9:  MOVLW  4F
0FAA:  MOVWF  04
0FAB:  BCF    03.7
0FAC:  CLRF   77
0FAD:  CLRF   78
0FAE:  CLRF   79
0FAF:  CLRF   7A
0FB0:  CLRF   4F
0FB1:  CLRF   50
0FB2:  CLRF   51
0FB3:  CLRF   52
0FB4:  MOVF   4E,W
0FB5:  IORWF  4D,W
0FB6:  IORWF  4C,W
0FB7:  IORWF  4B,W
0FB8:  BTFSC  03.2
0FB9:  GOTO   7EA
0FBA:  MOVLW  20
0FBB:  MOVWF  53
0FBC:  BCF    03.0
0FBD:  RLF    47,F
0FBE:  RLF    48,F
0FBF:  RLF    49,F
0FC0:  RLF    4A,F
0FC1:  RLF    4F,F
0FC2:  RLF    50,F
0FC3:  RLF    51,F
0FC4:  RLF    52,F
0FC5:  MOVF   4E,W
0FC6:  SUBWF  52,W
0FC7:  BTFSS  03.2
0FC8:  GOTO   7D3
0FC9:  MOVF   4D,W
0FCA:  SUBWF  51,W
0FCB:  BTFSS  03.2
0FCC:  GOTO   7D3
0FCD:  MOVF   4C,W
0FCE:  SUBWF  50,W
0FCF:  BTFSS  03.2
0FD0:  GOTO   7D3
0FD1:  MOVF   4B,W
0FD2:  SUBWF  4F,W
0FD3:  BTFSS  03.0
0FD4:  GOTO   7E4
0FD5:  MOVF   4B,W
0FD6:  SUBWF  4F,F
0FD7:  MOVF   4C,W
0FD8:  BTFSS  03.0
0FD9:  INCFSZ 4C,W
0FDA:  SUBWF  50,F
0FDB:  MOVF   4D,W
0FDC:  BTFSS  03.0
0FDD:  INCFSZ 4D,W
0FDE:  SUBWF  51,F
0FDF:  MOVF   4E,W
0FE0:  BTFSS  03.0
0FE1:  INCFSZ 4E,W
0FE2:  SUBWF  52,F
0FE3:  BSF    03.0
0FE4:  RLF    77,F
0FE5:  RLF    78,F
0FE6:  RLF    79,F
0FE7:  RLF    7A,F
0FE8:  DECFSZ 53,F
0FE9:  GOTO   7BC
0FEA:  MOVF   4F,W
0FEB:  MOVWF  00
0FEC:  INCF   04,F
0FED:  MOVF   50,W
0FEE:  MOVWF  00
0FEF:  INCF   04,F
0FF0:  MOVF   51,W
0FF1:  MOVWF  00
0FF2:  INCF   04,F
0FF3:  MOVF   52,W
0FF4:  MOVWF  00
0FF5:  RETURN
*
1000:  MOVF   04,W
1001:  MOVWF  3F
1002:  MOVF   3E,W
1003:  MOVWF  41
1004:  BTFSC  03.2
1005:  GOTO   021
1006:  MOVF   3D,W
1007:  MOVWF  73
1008:  MOVF   3C,W
1009:  MOVWF  72
100A:  MOVF   3B,W
100B:  MOVWF  71
100C:  MOVF   3A,W
100D:  MOVWF  70
100E:  CLRF   7E
100F:  CLRF   7D
1010:  MOVLW  20
1011:  MOVWF  7C
1012:  MOVLW  82
1013:  MOVWF  7B
1014:  BCF    0A.4
1015:  CALL   695
1016:  BSF    0A.4
1017:  MOVF   7A,W
1018:  MOVWF  3D
1019:  MOVF   79,W
101A:  MOVWF  3C
101B:  MOVF   78,W
101C:  MOVWF  3B
101D:  MOVF   77,W
101E:  MOVWF  3A
101F:  DECFSZ 41,F
1020:  GOTO   006
1021:  MOVF   3D,W
1022:  MOVWF  4A
1023:  MOVF   3C,W
1024:  MOVWF  49
1025:  MOVF   3B,W
1026:  MOVWF  48
1027:  MOVF   3A,W
1028:  MOVWF  47
1029:  MOVF   47,W
102A:  SUBLW  B6
102B:  MOVWF  47
102C:  CLRF   7A
102D:  MOVF   48,W
102E:  MOVWF  4B
102F:  BSF    48.7
1030:  BCF    03.0
1031:  RRF    48,F
1032:  RRF    49,F
1033:  RRF    4A,F
1034:  RRF    7A,F
1035:  RRF    79,F
1036:  RRF    78,F
1037:  RRF    77,F
1038:  DECFSZ 47,F
1039:  GOTO   030
103A:  BTFSS  4B.7
103B:  GOTO   047
103C:  COMF   77,F
103D:  COMF   78,F
103E:  COMF   79,F
103F:  COMF   7A,F
1040:  INCF   77,F
1041:  BTFSC  03.2
1042:  INCF   78,F
1043:  BTFSC  03.2
1044:  INCF   79,F
1045:  BTFSC  03.2
1046:  INCF   7A,F
1047:  MOVF   7A,W
1048:  MOVWF  3D
1049:  MOVF   79,W
104A:  MOVWF  3C
104B:  MOVF   78,W
104C:  MOVWF  3B
104D:  MOVF   77,W
104E:  MOVWF  3A
104F:  BTFSS  3D.7
1050:  GOTO   05E
1051:  DECF   3F,F
1052:  BSF    3F.5
1053:  COMF   3A,F
1054:  COMF   3B,F
1055:  COMF   3C,F
1056:  COMF   3D,F
1057:  INCF   3A,F
1058:  BTFSC  03.2
1059:  INCF   3B,F
105A:  BTFSC  03.2
105B:  INCF   3C,F
105C:  BTFSC  03.2
105D:  INCF   3D,F
105E:  MOVLW  3B
105F:  MOVWF  46
1060:  MOVLW  9A
1061:  MOVWF  45
1062:  MOVLW  CA
1063:  MOVWF  44
1064:  CLRF   43
1065:  MOVLW  0A
1066:  MOVWF  41
1067:  MOVF   3E,W
1068:  BTFSC  03.2
1069:  INCF   3F,F
106A:  BSF    03.1
106B:  MOVLW  3A
106C:  MOVWF  04
106D:  BCF    03.7
106E:  MOVF   3D,W
106F:  MOVWF  4A
1070:  MOVF   3C,W
1071:  MOVWF  49
1072:  MOVF   3B,W
1073:  MOVWF  48
1074:  MOVF   3A,W
1075:  MOVWF  47
1076:  MOVF   46,W
1077:  MOVWF  4E
1078:  MOVF   45,W
1079:  MOVWF  4D
107A:  MOVF   44,W
107B:  MOVWF  4C
107C:  MOVF   43,W
107D:  MOVWF  4B
107E:  BCF    0A.4
107F:  BSF    0A.3
1080:  CALL   7A7
1081:  BSF    0A.4
1082:  BCF    0A.3
1083:  MOVF   78,W
1084:  MOVF   77,F
1085:  BTFSS  03.2
1086:  GOTO   09A
1087:  INCF   3E,W
1088:  SUBWF  41,W
1089:  BTFSC  03.2
108A:  GOTO   09A
108B:  MOVF   3F,W
108C:  BTFSC  03.2
108D:  GOTO   09C
108E:  ANDLW  0F
108F:  SUBWF  41,W
1090:  BTFSC  03.2
1091:  GOTO   094
1092:  BTFSC  03.0
1093:  GOTO   0DC
1094:  BTFSC  3F.7
1095:  GOTO   0DC
1096:  BTFSC  3F.6
1097:  GOTO   09C
1098:  MOVLW  20
1099:  GOTO   0D4
109A:  MOVLW  20
109B:  ANDWF  3F,F
109C:  BTFSS  3F.5
109D:  GOTO   0AE
109E:  BCF    3F.5
109F:  MOVF   3E,W
10A0:  BTFSS  03.2
10A1:  DECF   3F,F
10A2:  MOVF   77,W
10A3:  MOVWF  3F
10A4:  MOVLW  2D
10A5:  MOVWF  47
10A6:  BCF    0A.4
10A7:  BSF    0A.3
10A8:  CALL   76F
10A9:  BSF    0A.4
10AA:  BCF    0A.3
10AB:  MOVF   3F,W
10AC:  MOVWF  77
10AD:  CLRF   3F
10AE:  MOVF   3E,W
10AF:  SUBWF  41,W
10B0:  BTFSS  03.2
10B1:  GOTO   0C0
10B2:  MOVF   77,W
10B3:  MOVWF  3F
10B4:  MOVLW  2E
10B5:  MOVWF  47
10B6:  BCF    0A.4
10B7:  BSF    0A.3
10B8:  CALL   76F
10B9:  BSF    0A.4
10BA:  BCF    0A.3
10BB:  MOVF   3F,W
10BC:  MOVWF  77
10BD:  MOVLW  20
10BE:  ANDWF  3F,F
10BF:  MOVLW  00
10C0:  MOVLW  30
10C1:  BTFSS  3F.5
10C2:  GOTO   0D4
10C3:  BCF    3F.5
10C4:  MOVF   3E,W
10C5:  BTFSS  03.2
10C6:  DECF   3F,F
10C7:  MOVF   77,W
10C8:  MOVWF  3F
10C9:  MOVLW  2D
10CA:  MOVWF  47
10CB:  BCF    0A.4
10CC:  BSF    0A.3
10CD:  CALL   76F
10CE:  BSF    0A.4
10CF:  BCF    0A.3
10D0:  MOVF   3F,W
10D1:  MOVWF  77
10D2:  CLRF   3F
10D3:  MOVLW  30
10D4:  ADDWF  77,F
10D5:  MOVF   77,W
10D6:  MOVWF  47
10D7:  BCF    0A.4
10D8:  BSF    0A.3
10D9:  CALL   76F
10DA:  BSF    0A.4
10DB:  BCF    0A.3
10DC:  BCF    03.1
10DD:  MOVF   46,W
10DE:  MOVWF  4A
10DF:  MOVF   45,W
10E0:  MOVWF  49
10E1:  MOVF   44,W
10E2:  MOVWF  48
10E3:  MOVF   43,W
10E4:  MOVWF  47
10E5:  CLRF   4E
10E6:  CLRF   4D
10E7:  CLRF   4C
10E8:  MOVLW  0A
10E9:  MOVWF  4B
10EA:  BCF    0A.4
10EB:  BSF    0A.3
10EC:  CALL   7A7
10ED:  BSF    0A.4
10EE:  BCF    0A.3
10EF:  MOVF   7A,W
10F0:  MOVWF  46
10F1:  MOVF   79,W
10F2:  MOVWF  45
10F3:  MOVF   78,W
10F4:  MOVWF  44
10F5:  MOVF   77,W
10F6:  MOVWF  43
10F7:  DECFSZ 41,F
10F8:  GOTO   06A
10F9:  RETURN
10FA:  MOVF   0B,W
10FB:  MOVWF  3B
10FC:  BCF    0B.7
10FD:  BSF    03.5
10FE:  BSF    03.6
10FF:  BSF    0C.7
1100:  BSF    0C.0
1101:  NOP
1102:  NOP
1103:  BTFSC  03.0
1104:  GOTO   130
1105:  BCF    03.5
1106:  MOVF   0C,W
1107:  ANDLW  7F
1108:  BCF    03.6
1109:  MOVWF  3C
110A:  BSF    03.6
110B:  MOVF   0D,W
110C:  BCF    03.6
110D:  MOVWF  3D
110E:  BSF    03.6
110F:  MOVF   0F,W
1110:  BCF    03.6
1111:  MOVWF  3E
1112:  MOVF   3C,W
1113:  MOVWF  47
1114:  BCF    0A.4
1115:  BSF    0A.3
1116:  CALL   76F
1117:  BSF    0A.4
1118:  BCF    0A.3
1119:  MOVF   3D,W
111A:  BSF    03.6
111B:  MOVWF  0D
111C:  BCF    03.6
111D:  MOVF   3E,W
111E:  BSF    03.6
111F:  MOVWF  0F
1120:  BSF    03.5
1121:  BSF    0C.7
1122:  BSF    0C.0
1123:  NOP
1124:  NOP
1125:  BCF    03.5
1126:  BCF    03.6
1127:  DECFSZ 3A,F
1128:  GOTO   12A
1129:  GOTO   12D
112A:  BSF    03.5
112B:  BSF    03.6
112C:  GOTO   130
112D:  GOTO   153
112E:  BSF    03.5
112F:  BSF    03.6
1130:  BCF    03.5
1131:  RLF    0C,W
1132:  RLF    0E,W
1133:  ANDLW  7F
1134:  BCF    03.6
1135:  MOVWF  3C
1136:  BSF    03.6
1137:  MOVF   0D,W
1138:  BCF    03.6
1139:  MOVWF  3D
113A:  BSF    03.6
113B:  MOVF   0F,W
113C:  BCF    03.6
113D:  MOVWF  3E
113E:  MOVF   3C,W
113F:  MOVWF  47
1140:  BCF    0A.4
1141:  BSF    0A.3
1142:  CALL   76F
1143:  BSF    0A.4
1144:  BCF    0A.3
1145:  MOVF   3D,W
1146:  BSF    03.6
1147:  MOVWF  0D
1148:  BCF    03.6
1149:  MOVF   3E,W
114A:  BSF    03.6
114B:  MOVWF  0F
114C:  INCF   0D,F
114D:  BTFSC  03.2
114E:  INCF   0F,F
114F:  BCF    03.0
1150:  BCF    03.6
1151:  DECFSZ 3A,F
1152:  GOTO   0FD
1153:  BTFSC  3B.7
1154:  BSF    0B.7
1155:  BCF    0A.3
1156:  BSF    0A.4
1157:  GOTO   317 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #FUSES XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NODEBUG, NOCPD 
.................... #use delay(crystal=20000000) 
*
05D8:  MOVLW  48
05D9:  MOVWF  04
05DA:  BCF    03.7
05DB:  MOVF   00,W
05DC:  BTFSC  03.2
05DD:  GOTO   5EB
05DE:  MOVLW  06
05DF:  MOVWF  78
05E0:  CLRF   77
05E1:  DECFSZ 77,F
05E2:  GOTO   5E1
05E3:  DECFSZ 78,F
05E4:  GOTO   5E0
05E5:  MOVLW  7B
05E6:  MOVWF  77
05E7:  DECFSZ 77,F
05E8:  GOTO   5E7
05E9:  DECFSZ 00,F
05EA:  GOTO   5DE
05EB:  RETURN
.................... #use rs232 (baud=9600,xmit=PIN_C6, rcv=PIN_C7, parity=N, stop=1)  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0609:  MOVLW  0F
060A:  BSF    03.5
060B:  ANDWF  08,W
060C:  IORLW  F0
060D:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
060E:  BCF    03.5
060F:  BSF    08.2
....................    delay_cycles(1); 
0610:  NOP
....................    lcd_output_enable(1); 
0611:  BSF    08.0
....................    delay_cycles(1); 
0612:  NOP
....................    high = lcd_read_nibble(); 
0613:  CALL   5FD
0614:  MOVF   78,W
0615:  MOVWF  4F
....................        
....................    lcd_output_enable(0); 
0616:  BCF    08.0
....................    delay_cycles(1); 
0617:  NOP
....................    lcd_output_enable(1); 
0618:  BSF    08.0
....................    delay_us(1); 
0619:  GOTO   61A
061A:  GOTO   61B
061B:  NOP
....................    low = lcd_read_nibble(); 
061C:  CALL   5FD
061D:  MOVF   78,W
061E:  MOVWF  4E
....................        
....................    lcd_output_enable(0); 
061F:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0620:  MOVLW  0F
0621:  BSF    03.5
0622:  ANDWF  08,W
0623:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0624:  BCF    03.5
0625:  SWAPF  4F,W
0626:  MOVWF  77
0627:  MOVLW  F0
0628:  ANDWF  77,F
0629:  MOVF   77,W
062A:  IORWF  4E,W
062B:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
05FD:  MOVF   08,W
05FE:  MOVWF  77
05FF:  SWAPF  08,W
0600:  ANDLW  0F
0601:  MOVWF  78
....................   #endif 
0602:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
05EC:  SWAPF  4F,W
05ED:  ANDLW  F0
05EE:  MOVWF  77
05EF:  MOVLW  0F
05F0:  ANDWF  08,W
05F1:  IORWF  77,W
05F2:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
05F3:  NOP
....................    lcd_output_enable(1); 
05F4:  BSF    08.0
....................    delay_us(2); 
05F5:  MOVLW  02
05F6:  MOVWF  77
05F7:  DECFSZ 77,F
05F8:  GOTO   5F7
05F9:  GOTO   5FA
05FA:  NOP
....................    lcd_output_enable(0); 
05FB:  BCF    08.0
05FC:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0603:  BSF    03.5
0604:  BCF    08.0
....................    lcd_rs_tris(); 
0605:  BCF    08.1
....................    lcd_rw_tris(); 
0606:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0607:  BCF    03.5
0608:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
062C:  MOVF   78,W
062D:  MOVWF  4E
062E:  BTFSC  4E.7
062F:  GOTO   609
....................    lcd_output_rs(address); 
0630:  BTFSS  4C.0
0631:  BCF    08.1
0632:  BTFSC  4C.0
0633:  BSF    08.1
....................    delay_cycles(1); 
0634:  NOP
....................    lcd_output_rw(0); 
0635:  BCF    08.2
....................    delay_cycles(1); 
0636:  NOP
....................    lcd_output_enable(0); 
0637:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0638:  SWAPF  4D,W
0639:  MOVWF  4E
063A:  MOVLW  0F
063B:  ANDWF  4E,F
063C:  MOVF   4E,W
063D:  MOVWF  4F
063E:  CALL   5EC
....................    lcd_send_nibble(n & 0xf); 
063F:  MOVF   4D,W
0640:  ANDLW  0F
0641:  MOVWF  4E
0642:  MOVWF  4F
0643:  CALL   5EC
0644:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0645:  MOVLW  0F
0646:  BSF    03.5
0647:  ANDWF  08,W
0648:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0649:  BCF    08.0
....................    lcd_rs_tris(); 
064A:  BCF    08.1
....................    lcd_rw_tris(); 
064B:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
064C:  BCF    03.5
064D:  BCF    08.1
....................    lcd_output_rw(0); 
064E:  BCF    08.2
....................    lcd_output_enable(0); 
064F:  BCF    08.0
....................      
....................    delay_ms(15); 
0650:  MOVLW  0F
0651:  MOVWF  48
0652:  CALL   5D8
....................    for(i=1;i<=3;++i) 
0653:  MOVLW  01
0654:  MOVWF  3A
0655:  MOVF   3A,W
0656:  SUBLW  03
0657:  BTFSS  03.0
0658:  GOTO   661
....................    { 
....................        lcd_send_nibble(3); 
0659:  MOVLW  03
065A:  MOVWF  4F
065B:  CALL   5EC
....................        delay_ms(5); 
065C:  MOVLW  05
065D:  MOVWF  48
065E:  CALL   5D8
065F:  INCF   3A,F
0660:  GOTO   655
....................    } 
....................     
....................    lcd_send_nibble(2); 
0661:  MOVLW  02
0662:  MOVWF  4F
0663:  CALL   5EC
....................    delay_ms(5); 
0664:  MOVLW  05
0665:  MOVWF  48
0666:  CALL   5D8
....................    for(i=0;i<=3;++i) 
0667:  CLRF   3A
0668:  MOVF   3A,W
0669:  SUBLW  03
066A:  BTFSS  03.0
066B:  GOTO   675
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
066C:  MOVF   3A,W
066D:  CALL   004
066E:  MOVWF  3B
066F:  CLRF   4C
0670:  MOVF   3B,W
0671:  MOVWF  4D
0672:  CALL   603
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0673:  INCF   3A,F
0674:  GOTO   668
0675:  BCF    0A.3
0676:  BSF    0A.4
0677:  GOTO   17A (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
07E4:  DECFSZ 49,W
07E5:  GOTO   7E7
07E6:  GOTO   7EA
....................       address=LCD_LINE_TWO; 
07E7:  MOVLW  40
07E8:  MOVWF  4A
07E9:  GOTO   7EB
....................    else 
....................       address=0; 
07EA:  CLRF   4A
....................       
....................    address+=x-1; 
07EB:  MOVLW  01
07EC:  SUBWF  48,W
07ED:  ADDWF  4A,F
....................    lcd_send_byte(0,0x80|address); 
07EE:  MOVF   4A,W
07EF:  IORLW  80
07F0:  MOVWF  4B
07F1:  CLRF   4C
07F2:  MOVF   4B,W
07F3:  MOVWF  4D
07F4:  CALL   603
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
07F5:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
0F6F:  MOVF   47,W
0F70:  XORLW  07
0F71:  BTFSC  03.2
0F72:  GOTO   77D
0F73:  XORLW  0B
0F74:  BTFSC  03.2
0F75:  GOTO   784
0F76:  XORLW  06
0F77:  BTFSC  03.2
0F78:  GOTO   790
0F79:  XORLW  02
0F7A:  BTFSC  03.2
0F7B:  GOTO   798
0F7C:  GOTO   79F
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0F7D:  MOVLW  01
0F7E:  MOVWF  48
0F7F:  MOVWF  49
0F80:  BCF    0A.3
0F81:  CALL   7E4
0F82:  BSF    0A.3
0F83:  GOTO   7A6
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0F84:  CLRF   4C
0F85:  MOVLW  01
0F86:  MOVWF  4D
0F87:  BCF    0A.3
0F88:  CALL   603
0F89:  BSF    0A.3
....................                      delay_ms(2); 
0F8A:  MOVLW  02
0F8B:  MOVWF  48
0F8C:  BCF    0A.3
0F8D:  CALL   5D8
0F8E:  BSF    0A.3
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0F8F:  GOTO   7A6
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0F90:  MOVLW  01
0F91:  MOVWF  48
0F92:  MOVLW  02
0F93:  MOVWF  49
0F94:  BCF    0A.3
0F95:  CALL   7E4
0F96:  BSF    0A.3
0F97:  GOTO   7A6
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0F98:  CLRF   4C
0F99:  MOVLW  10
0F9A:  MOVWF  4D
0F9B:  BCF    0A.3
0F9C:  CALL   603
0F9D:  BSF    0A.3
0F9E:  GOTO   7A6
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0F9F:  MOVLW  01
0FA0:  MOVWF  4C
0FA1:  MOVF   47,W
0FA2:  MOVWF  4D
0FA3:  BCF    0A.3
0FA4:  CALL   603
0FA5:  BSF    0A.3
....................      #endif 
....................    } 
0FA6:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... float temperature = 0.0f; 
.................... float load = 0.0f; 
....................  
.................... unsigned int16 result_1; //variable for A0 value 
.................... unsigned int16 result_2; //variable for A1 value 
....................  
.................... const int8 oneTo6th[6][41] = { 
.................... 4502,4502,4502,4502,4416,4279,4141,4001,3850,3697,3540,3369,3193,3018,2834,2655,2478,2291,2109,1926,1734,1758,1782,1807,1832,1859,1885,1913,1938,1929,1904,1876,1851,1824,1799,1774,1750,1734,1734,1734,1734 
.................... 4242,4242,4242,4242,4820,5529,5721,5616,5503,5395,5283,5163,5034,4876,4719,4564,4413,4259,4112,4013,3922,4013,4112,4220,4341,4474,4624,4791,4984,4917,4733,4572,4427,4300,4182,4078,3981,3922,3922,3922,3922 
.................... 4009,4009,4009,4009,4560,5244,5805,6271,6431,6347,6259,6165,6062,5922,5787,5652,5521,5394,5274,5164,5062,5164,5274,5394,5525,5668,5827,6000,6194,6127,5939,5773,5618,5481,5352,5237,5129,5062,5062,5062,5062 
.................... 3720,3720,3720,3720,4310,5009,5547,5982,6368,6705,6849,6772,6686,6561,6439,6311,6188,6108,6108,6108,6108,6108,6108,6108,6194,6330,6481,6643,6823,6762,6587,6430,6282,6150,6108,6108,6108,6108,6108,6108,6108 
.................... 3369,3369,3369,3369,4021,4786,5370,5824,6184,6472,6705,6958,7076,6956,6936,6958,6973,6981,6981,6981,6981,6981,6981,6981,6981,6981,6981,7033,7199,7143,6981,6981,6981,6981,6981,6981,6981,6981,6981,6981,6981 
.................... 2924,2924,2924,2924,3643,4480,5115,5606,5994,6303,6616,6968,7284,7576,7731,7759,7779,7789,7789,7789,7789,7789,7789,7789,7789,7789,7789,7722,7616,7654,7753,7789,7789,7789,7789,7789,7789,7789,7789,7789,7789 
.................... }; 
....................  
.................... const int8 seventhTo12th[6][41] = { 
.................... 2395,2395,2395,2395,3186,4102,4793,5327,5809,6277,6680,7039,7360,7658,7935,8199,8449,8598,8598,8598,8598,8598,8598,8598,8598,8568,8525,8472,8405,8429,8490,8540,8580,8598,8598,8598,8598,8598,8598,8598,8598 
.................... 1784,1784,1784,1784,2746,3787,4588,5260,5810,6278,6680,7039,7361,7659,7936,8200,8455,8707,8955,9189,9427,9427,9427,9430,9434,9439,9443,9448,9452,9450,9445,9441,9436,9432,9428,9427,9427,9427,9427,9427,9427 
.................... 1734,1734,1734,1734,2657,3747,4588,5260,5810,6278,6680,7039,7361,7659,7936,8200,8455,8707,8956,9193,9420,9423,9426,9430,9434,9439,9443,9448,9452,9450,9445,9441,9436,9432,9428,9425,9422,9420,9420,9420,9420 
.................... 1734,1734,1734,1734,2657,3747,4588,5260,5810,6278,6680,7039,7361,7659,7936,8200,8455,8707,8956,9193,9420,9423,9426,9430,9434,9439,9443,9448,9452,9450,9445,9441,9436,9432,9428,9425,9422,9420,9420,9420,9420 
.................... 1734,1734,1734,1734,2657,3747,4588,5260,5810,6278,6680,7039,7361,7659,7936,8200,8455,8707,8956,9193,9420,9423,9426,9430,9434,9439,9443,9448,9452,9450,9445,9441,9436,9432,9428,9425,9422,9420,9420,9420,9420 
.................... 3922,3922,3922,3922,5259,7030,7907,8231,8510,8767,8997,9218,9425,9629,9827,10026,10227,10433,10644,10849,11047,11087,11135,11193,11263,11346,11445,11565,11710,11658,11522,11409,11316,11238,11172,11082,10963,10899,10899,10899,10899 
.................... }; 
....................  
.................... const int8 thirteenthTo18th[6][41] = { 
.................... 5062,5062,5062,5062,6085,7477,8715,9823,10389,10530,10664,10804,10941,11086,11234,11389,11552,11726,11909,12088,12263,12322,12392,12476,12577,12695,12836,13002,13201,13130,12943,12786,12653,12511,12349,12208,12090,12026,12026,12026,12026 
.................... 5959,5959,5959,5959,6753,7809,8811,9774,10631,11412,11869,11960,12055,12163,12277,12404,12541,12691,12858,13092,13324,13324,13324,13412,13526,13659,13815,13999,14215,14138,13934,13742,13557,13389,13233,13134,13097,13077,13077,13077,13077 
.................... 6633,6633,6633,6633,7332,8270,9093,9814,10516,11230,11884,12492,12893,12976,13068,13174,13308,13537,13778,14017,14251,14251,14251,14251,14251,14368,14529,14716,14934,14855,14638,14440,14260,14164,14134,14105,14081,14067,14067,14067,14067 
.................... 7181,7181,7181,7181,7817,8675,9433,10102,10682,11190,11739,12418,13008,13397,13716,13926,14148,14385,14635,14881,15122,15122,15122,15122,15122,15122,15122,15081,15031,15049,15102,15124,15117,15107,15092,15078,15065,15058,15058,15058,15058 
.................... 7657,7657,7657,7657,8250,9053,9766,10396,10967,11518,12042,12545,13051,13578,14074,14550,14971,15220,15483,15742,15995,15995,15995,15995,15995,15831,15615,15377,15111,15209,15483,15740,15980,16095,16096,16096,16095,16094,16094,16094,16094 
.................... 8095,8095,8095,8095,8660,9427,10119,10767,11368,11931,12467,12982,13480,13970,14464,14969,15453,15927,16375,16652,16924,16924,16924,16773,16598,16410,16203,15973,15716,15827,16119,16391,16642,16874,17090,17216,17228,17234,17234,17234 
.................... }; 
....................  
.................... const int8 nineteenthTo24th[6][41] = { 
.................... 8524,8524,8524,8524,9070,9836,10549,11213,11828,12405,12955,13484,13996,14503,15009,15518,16032,16536,17030,17495,17934,17796,17653,17501,17340,17169,16981,16773,16540,16668,16974,17270,17559,17818,18040,18246,18433,18548,18548,18548,18548 
.................... 8957,8957,8957,8957,9523,10314,11048,11730,12361,12952,13517,14060,14588,15114,15641,16172,16715,17275,17849,18347,18817,18695,18571,18442,18309,18170,18020,17856,17676,17829,18145,18452,18758,19062,19368,19633,19812,19918,19918,19918,19918 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... }; 
....................  
.................... const int8 twentyfifthTo30th[6][41] = { 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... }; 
....................  
.................... const int8 thirtyfirstTo36th[6][41] = { 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... }; 
....................  
.................... const int8 thirtyseventhTo42nd[5][41] = { 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... 9420,9420,9420,9420,10004,10818,11571,12268,12913,13517,14095,14651,15195,15740,16286,16841,17409,17998,18613,19262,19955,19861,19771,19684,19600,19521,19443,19369,19298,19487,19801,20113,20431,20753,21087,21431,21779,22011,22011,22011,22011 
.................... }; 
....................  
....................  
....................  
....................  
.................... const int8 temperatureArray[41] = { 
.................... 40,41,42,43,44,45,46,47,48,49,50,51,52,53,54, 
.................... 55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80 
.................... }; 
....................  
.................... const int8 loadArray[41] = { 
.................... 20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39, 
.................... 40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60 
.................... }; 
....................  
.................... signed int8 * SelectMatrixAndRowAndColumn(float _temperature, float _load) 
*
074F:  BSF    03.1
0750:  MOVF   3D,W
0751:  MOVWF  73
0752:  MOVF   3C,W
0753:  MOVWF  72
0754:  MOVF   3B,W
0755:  MOVWF  71
0756:  MOVF   3A,W
0757:  MOVWF  70
0758:  CLRF   7E
0759:  CLRF   7D
075A:  MOVLW  20
075B:  MOVWF  7C
075C:  MOVLW  84
075D:  MOVWF  7B
075E:  BSF    0A.3
075F:  CALL   000
0760:  BCF    0A.3
0761:  MOVF   7A,W
0762:  MOVWF  6B
0763:  MOVF   79,W
0764:  MOVWF  6A
0765:  MOVF   78,W
0766:  MOVWF  69
0767:  MOVF   77,W
0768:  MOVWF  68
0769:  CALL   71B
076A:  MOVF   78,W
076B:  MOVWF  46
076C:  MOVLW  06
076D:  MOVWF  47
076E:  CALL   73A
076F:  MOVF   78,W
0770:  MOVWF  42
0771:  BSF    03.1
0772:  MOVF   3D,W
0773:  MOVWF  73
0774:  MOVF   3C,W
0775:  MOVWF  72
0776:  MOVF   3B,W
0777:  MOVWF  71
0778:  MOVF   3A,W
0779:  MOVWF  70
077A:  CLRF   7E
077B:  CLRF   7D
077C:  MOVLW  20
077D:  MOVWF  7C
077E:  MOVLW  84
077F:  MOVWF  7B
0780:  BSF    0A.3
0781:  CALL   000
0782:  BCF    0A.3
0783:  MOVF   7A,W
0784:  MOVWF  6B
0785:  MOVF   79,W
0786:  MOVWF  6A
0787:  MOVF   78,W
0788:  MOVWF  69
0789:  MOVF   77,W
078A:  MOVWF  68
078B:  CALL   71B
078C:  MOVF   78,W
078D:  MOVWF  46
078E:  MOVLW  06
078F:  MOVWF  47
0790:  CALL   73A
0791:  MOVF   77,W
0792:  MOVWF  43
0793:  BSF    03.1
0794:  MOVF   41,W
0795:  MOVWF  73
0796:  MOVF   40,W
0797:  MOVWF  72
0798:  MOVF   3F,W
0799:  MOVWF  71
079A:  MOVF   3E,W
079B:  MOVWF  70
079C:  CLRF   7E
079D:  CLRF   7D
079E:  MOVLW  20
079F:  MOVWF  7C
07A0:  MOVLW  83
07A1:  MOVWF  7B
07A2:  BSF    0A.3
07A3:  CALL   000
07A4:  BCF    0A.3
07A5:  MOVF   7A,W
07A6:  MOVWF  6B
07A7:  MOVF   79,W
07A8:  MOVWF  6A
07A9:  MOVF   78,W
07AA:  MOVWF  69
07AB:  MOVF   77,W
07AC:  MOVWF  68
07AD:  CALL   71B
07AE:  MOVLW  01
07AF:  ADDWF  78,W
07B0:  MOVWF  44
.................... { 
....................    static int8 matrixAndRowAndColumn[3] = {0,0,0}; 
*
1174:  BCF    03.5
1175:  CLRF   2C
1176:  CLRF   2D
1177:  CLRF   2E
....................    // Select Matrix 
....................    int8 matrixNumber = ((int8)(_temperature - temperatureArray[0]))/6; 
....................    // Select Row 
....................    int8 rowNumber = ((int8)(_temperature - temperatureArray[0]))%6; 
....................    // Select Column 
....................    int8 columnNumber = ((int8)(_load - loadArray[0])+1); 
....................     
....................    matrixAndRowAndColumn[0] = matrixNumber+1; 
*
07B1:  MOVLW  01
07B2:  ADDWF  42,W
07B3:  MOVWF  2C
....................    matrixAndRowAndColumn[1] = rowNumber; 
07B4:  MOVF   43,W
07B5:  MOVWF  2D
....................    matrixAndRowAndColumn[2] = columnNumber; 
07B6:  MOVF   44,W
07B7:  MOVWF  2E
....................     
....................    Return(matrixAndRowAndColumn); 
07B8:  MOVLW  2C
07B9:  MOVWF  78
07BA:  MOVLW  00
07BB:  MOVWF  79
07BC:  BCF    0A.3
07BD:  BSF    0A.4
07BE:  GOTO   26F (RETURN)
.................... } 
....................  
.................... float GetDataAndInterpolate(int8 _matrix, int8 _row, int8 _column, float _temperature, float _load) 
.................... { 
....................    // data1  data2 
....................    // data3  data4 
....................    int8 data1, data2, data3, data4; 
....................    float interpolatedData; 
....................  
....................    switch(_matrix) 
*
0A1C:  MOVF   3D,W
0A1D:  XORLW  01
0A1E:  BTFSC  03.2
0A1F:  GOTO   230
0A20:  XORLW  03
0A21:  BTFSC  03.2
0A22:  GOTO   285
0A23:  XORLW  01
0A24:  BTFSC  03.2
0A25:  GOTO   2DA
0A26:  XORLW  07
0A27:  BTFSC  03.2
0A28:  GOTO   32F
0A29:  XORLW  01
0A2A:  BTFSC  03.2
0A2B:  GOTO   384
0A2C:  XORLW  03
0A2D:  BTFSC  03.2
0A2E:  GOTO   3D9
0A2F:  GOTO   42E
....................    { 
....................       case 1: 
....................          data1 = oneTo6th[_row][_column-1]; 
0A30:  MOVF   3E,W
0A31:  MOVWF  6A
0A32:  MOVLW  29
0A33:  MOVWF  6B
0A34:  BCF    0A.3
0A35:  CALL   7BF
0A36:  BSF    0A.3
0A37:  MOVF   78,W
0A38:  MOVWF  68
0A39:  MOVLW  01
0A3A:  SUBWF  3F,W
0A3B:  ADDWF  78,W
0A3C:  BCF    0A.3
0A3D:  CALL   00C
0A3E:  BSF    0A.3
0A3F:  MOVWF  78
0A40:  MOVWF  48
....................          data2 = oneTo6th[_row][_column]; 
0A41:  MOVF   3E,W
0A42:  MOVWF  6A
0A43:  MOVLW  29
0A44:  MOVWF  6B
0A45:  BCF    0A.3
0A46:  CALL   7BF
0A47:  BSF    0A.3
0A48:  MOVF   3F,W
0A49:  ADDWF  78,W
0A4A:  BCF    0A.3
0A4B:  CALL   00C
0A4C:  BSF    0A.3
0A4D:  MOVWF  78
0A4E:  MOVWF  49
....................          if (_row == 5) 
0A4F:  MOVF   3E,W
0A50:  SUBLW  05
0A51:  BTFSS  03.2
0A52:  GOTO   261
....................          { 
....................             data3 = seventhTo12th[0][_column-1]; 
0A53:  MOVLW  01
0A54:  SUBWF  3F,W
0A55:  BCF    0A.3
0A56:  CALL   109
0A57:  BSF    0A.3
0A58:  MOVWF  78
0A59:  MOVWF  4A
....................             data4 = seventhTo12th[0][_column]; 
0A5A:  MOVF   3F,W
0A5B:  BCF    0A.3
0A5C:  CALL   109
0A5D:  BSF    0A.3
0A5E:  MOVWF  78
0A5F:  MOVWF  4B
....................          } 
0A60:  GOTO   284
....................          else 
....................          { 
....................             data3 = oneTo6th[_row+1][_column-1]; 
0A61:  MOVLW  01
0A62:  ADDWF  3E,W
0A63:  MOVWF  69
0A64:  MOVWF  6A
0A65:  MOVLW  29
0A66:  MOVWF  6B
0A67:  BCF    0A.3
0A68:  CALL   7BF
0A69:  BSF    0A.3
0A6A:  MOVF   78,W
0A6B:  MOVWF  68
0A6C:  MOVLW  01
0A6D:  SUBWF  3F,W
0A6E:  ADDWF  78,W
0A6F:  BCF    0A.3
0A70:  CALL   00C
0A71:  BSF    0A.3
0A72:  MOVWF  78
0A73:  MOVWF  4A
....................             data4 = oneTo6th[_row+1][_column]; 
0A74:  MOVLW  01
0A75:  ADDWF  3E,W
0A76:  MOVWF  69
0A77:  MOVWF  6A
0A78:  MOVLW  29
0A79:  MOVWF  6B
0A7A:  BCF    0A.3
0A7B:  CALL   7BF
0A7C:  BSF    0A.3
0A7D:  MOVF   3F,W
0A7E:  ADDWF  78,W
0A7F:  BCF    0A.3
0A80:  CALL   00C
0A81:  BSF    0A.3
0A82:  MOVWF  78
0A83:  MOVWF  4B
....................          } 
....................          break; 
0A84:  GOTO   470
....................       case 2: 
....................          data1 = seventhTo12th[_row][_column-1]; 
0A85:  MOVF   3E,W
0A86:  MOVWF  6A
0A87:  MOVLW  29
0A88:  MOVWF  6B
0A89:  BCF    0A.3
0A8A:  CALL   7BF
0A8B:  BSF    0A.3
0A8C:  MOVF   78,W
0A8D:  MOVWF  68
0A8E:  MOVLW  01
0A8F:  SUBWF  3F,W
0A90:  ADDWF  78,W
0A91:  BCF    0A.3
0A92:  CALL   109
0A93:  BSF    0A.3
0A94:  MOVWF  78
0A95:  MOVWF  48
....................          data2 = seventhTo12th[_row][_column]; 
0A96:  MOVF   3E,W
0A97:  MOVWF  6A
0A98:  MOVLW  29
0A99:  MOVWF  6B
0A9A:  BCF    0A.3
0A9B:  CALL   7BF
0A9C:  BSF    0A.3
0A9D:  MOVF   3F,W
0A9E:  ADDWF  78,W
0A9F:  BCF    0A.3
0AA0:  CALL   109
0AA1:  BSF    0A.3
0AA2:  MOVWF  78
0AA3:  MOVWF  49
....................          if (_row == 5) 
0AA4:  MOVF   3E,W
0AA5:  SUBLW  05
0AA6:  BTFSS  03.2
0AA7:  GOTO   2B6
....................          { 
....................             data3 = thirteenthTo18th[0][_column-1]; 
0AA8:  MOVLW  01
0AA9:  SUBWF  3F,W
0AAA:  BCF    0A.3
0AAB:  CALL   206
0AAC:  BSF    0A.3
0AAD:  MOVWF  78
0AAE:  MOVWF  4A
....................             data4 = thirteenthTo18th[0][_column]; 
0AAF:  MOVF   3F,W
0AB0:  BCF    0A.3
0AB1:  CALL   206
0AB2:  BSF    0A.3
0AB3:  MOVWF  78
0AB4:  MOVWF  4B
....................          } 
0AB5:  GOTO   2D9
....................          else 
....................          { 
....................             data3 = seventhTo12th[_row+1][_column-1]; 
0AB6:  MOVLW  01
0AB7:  ADDWF  3E,W
0AB8:  MOVWF  69
0AB9:  MOVWF  6A
0ABA:  MOVLW  29
0ABB:  MOVWF  6B
0ABC:  BCF    0A.3
0ABD:  CALL   7BF
0ABE:  BSF    0A.3
0ABF:  MOVF   78,W
0AC0:  MOVWF  68
0AC1:  MOVLW  01
0AC2:  SUBWF  3F,W
0AC3:  ADDWF  78,W
0AC4:  BCF    0A.3
0AC5:  CALL   109
0AC6:  BSF    0A.3
0AC7:  MOVWF  78
0AC8:  MOVWF  4A
....................             data4 = seventhTo12th[_row+1][_column]; 
0AC9:  MOVLW  01
0ACA:  ADDWF  3E,W
0ACB:  MOVWF  69
0ACC:  MOVWF  6A
0ACD:  MOVLW  29
0ACE:  MOVWF  6B
0ACF:  BCF    0A.3
0AD0:  CALL   7BF
0AD1:  BSF    0A.3
0AD2:  MOVF   3F,W
0AD3:  ADDWF  78,W
0AD4:  BCF    0A.3
0AD5:  CALL   109
0AD6:  BSF    0A.3
0AD7:  MOVWF  78
0AD8:  MOVWF  4B
....................          } 
....................          break; 
0AD9:  GOTO   470
....................       case 3: 
....................          data1 = thirteenthTo18th[_row][_column-1]; 
0ADA:  MOVF   3E,W
0ADB:  MOVWF  6A
0ADC:  MOVLW  29
0ADD:  MOVWF  6B
0ADE:  BCF    0A.3
0ADF:  CALL   7BF
0AE0:  BSF    0A.3
0AE1:  MOVF   78,W
0AE2:  MOVWF  68
0AE3:  MOVLW  01
0AE4:  SUBWF  3F,W
0AE5:  ADDWF  78,W
0AE6:  BCF    0A.3
0AE7:  CALL   206
0AE8:  BSF    0A.3
0AE9:  MOVWF  78
0AEA:  MOVWF  48
....................          data2 = thirteenthTo18th[_row][_column]; 
0AEB:  MOVF   3E,W
0AEC:  MOVWF  6A
0AED:  MOVLW  29
0AEE:  MOVWF  6B
0AEF:  BCF    0A.3
0AF0:  CALL   7BF
0AF1:  BSF    0A.3
0AF2:  MOVF   3F,W
0AF3:  ADDWF  78,W
0AF4:  BCF    0A.3
0AF5:  CALL   206
0AF6:  BSF    0A.3
0AF7:  MOVWF  78
0AF8:  MOVWF  49
....................          if (_row == 5) 
0AF9:  MOVF   3E,W
0AFA:  SUBLW  05
0AFB:  BTFSS  03.2
0AFC:  GOTO   30B
....................          { 
....................             data3 = nineteenthTo24th[0][_column-1]; 
0AFD:  MOVLW  01
0AFE:  SUBWF  3F,W
0AFF:  BCF    0A.3
0B00:  CALL   300
0B01:  BSF    0A.3
0B02:  MOVWF  78
0B03:  MOVWF  4A
....................             data4 = nineteenthTo24th[0][_column]; 
0B04:  MOVF   3F,W
0B05:  BCF    0A.3
0B06:  CALL   300
0B07:  BSF    0A.3
0B08:  MOVWF  78
0B09:  MOVWF  4B
....................          } 
0B0A:  GOTO   32E
....................          else 
....................          { 
....................             data3 = thirteenthTo18th[_row+1][_column-1]; 
0B0B:  MOVLW  01
0B0C:  ADDWF  3E,W
0B0D:  MOVWF  69
0B0E:  MOVWF  6A
0B0F:  MOVLW  29
0B10:  MOVWF  6B
0B11:  BCF    0A.3
0B12:  CALL   7BF
0B13:  BSF    0A.3
0B14:  MOVF   78,W
0B15:  MOVWF  68
0B16:  MOVLW  01
0B17:  SUBWF  3F,W
0B18:  ADDWF  78,W
0B19:  BCF    0A.3
0B1A:  CALL   206
0B1B:  BSF    0A.3
0B1C:  MOVWF  78
0B1D:  MOVWF  4A
....................             data4 = thirteenthTo18th[_row+1][_column]; 
0B1E:  MOVLW  01
0B1F:  ADDWF  3E,W
0B20:  MOVWF  69
0B21:  MOVWF  6A
0B22:  MOVLW  29
0B23:  MOVWF  6B
0B24:  BCF    0A.3
0B25:  CALL   7BF
0B26:  BSF    0A.3
0B27:  MOVF   3F,W
0B28:  ADDWF  78,W
0B29:  BCF    0A.3
0B2A:  CALL   206
0B2B:  BSF    0A.3
0B2C:  MOVWF  78
0B2D:  MOVWF  4B
....................          } 
....................          break; 
0B2E:  GOTO   470
....................       case 4: 
....................          data1 = nineteenthTo24th[_row][_column-1]; 
0B2F:  MOVF   3E,W
0B30:  MOVWF  6A
0B31:  MOVLW  29
0B32:  MOVWF  6B
0B33:  BCF    0A.3
0B34:  CALL   7BF
0B35:  BSF    0A.3
0B36:  MOVF   78,W
0B37:  MOVWF  68
0B38:  MOVLW  01
0B39:  SUBWF  3F,W
0B3A:  ADDWF  78,W
0B3B:  BCF    0A.3
0B3C:  CALL   300
0B3D:  BSF    0A.3
0B3E:  MOVWF  78
0B3F:  MOVWF  48
....................          data2 = nineteenthTo24th[_row][_column]; 
0B40:  MOVF   3E,W
0B41:  MOVWF  6A
0B42:  MOVLW  29
0B43:  MOVWF  6B
0B44:  BCF    0A.3
0B45:  CALL   7BF
0B46:  BSF    0A.3
0B47:  MOVF   3F,W
0B48:  ADDWF  78,W
0B49:  BCF    0A.3
0B4A:  CALL   300
0B4B:  BSF    0A.3
0B4C:  MOVWF  78
0B4D:  MOVWF  49
....................          if (_row == 5) 
0B4E:  MOVF   3E,W
0B4F:  SUBLW  05
0B50:  BTFSS  03.2
0B51:  GOTO   360
....................          { 
....................             data3 = twentyfifthTo30th[0][_column-1]; 
0B52:  MOVLW  01
0B53:  SUBWF  3F,W
0B54:  BCF    0A.3
0B55:  CALL   3FA
0B56:  BSF    0A.3
0B57:  MOVWF  78
0B58:  MOVWF  4A
....................             data4 = twentyfifthTo30th[0][_column]; 
0B59:  MOVF   3F,W
0B5A:  BCF    0A.3
0B5B:  CALL   3FA
0B5C:  BSF    0A.3
0B5D:  MOVWF  78
0B5E:  MOVWF  4B
....................          } 
0B5F:  GOTO   383
....................          else 
....................          { 
....................             data3 = nineteenthTo24th[_row+1][_column-1]; 
0B60:  MOVLW  01
0B61:  ADDWF  3E,W
0B62:  MOVWF  69
0B63:  MOVWF  6A
0B64:  MOVLW  29
0B65:  MOVWF  6B
0B66:  BCF    0A.3
0B67:  CALL   7BF
0B68:  BSF    0A.3
0B69:  MOVF   78,W
0B6A:  MOVWF  68
0B6B:  MOVLW  01
0B6C:  SUBWF  3F,W
0B6D:  ADDWF  78,W
0B6E:  BCF    0A.3
0B6F:  CALL   300
0B70:  BSF    0A.3
0B71:  MOVWF  78
0B72:  MOVWF  4A
....................             data4 = nineteenthTo24th[_row+1][_column]; 
0B73:  MOVLW  01
0B74:  ADDWF  3E,W
0B75:  MOVWF  69
0B76:  MOVWF  6A
0B77:  MOVLW  29
0B78:  MOVWF  6B
0B79:  BCF    0A.3
0B7A:  CALL   7BF
0B7B:  BSF    0A.3
0B7C:  MOVF   3F,W
0B7D:  ADDWF  78,W
0B7E:  BCF    0A.3
0B7F:  CALL   300
0B80:  BSF    0A.3
0B81:  MOVWF  78
0B82:  MOVWF  4B
....................          } 
....................          break; 
0B83:  GOTO   470
....................       case 5: 
....................          data1 = twentyfifthTo30th[_row][_column-1]; 
0B84:  MOVF   3E,W
0B85:  MOVWF  6A
0B86:  MOVLW  29
0B87:  MOVWF  6B
0B88:  BCF    0A.3
0B89:  CALL   7BF
0B8A:  BSF    0A.3
0B8B:  MOVF   78,W
0B8C:  MOVWF  68
0B8D:  MOVLW  01
0B8E:  SUBWF  3F,W
0B8F:  ADDWF  78,W
0B90:  BCF    0A.3
0B91:  CALL   3FA
0B92:  BSF    0A.3
0B93:  MOVWF  78
0B94:  MOVWF  48
....................          data2 = twentyfifthTo30th[_row][_column]; 
0B95:  MOVF   3E,W
0B96:  MOVWF  6A
0B97:  MOVLW  29
0B98:  MOVWF  6B
0B99:  BCF    0A.3
0B9A:  CALL   7BF
0B9B:  BSF    0A.3
0B9C:  MOVF   3F,W
0B9D:  ADDWF  78,W
0B9E:  BCF    0A.3
0B9F:  CALL   3FA
0BA0:  BSF    0A.3
0BA1:  MOVWF  78
0BA2:  MOVWF  49
....................          if (_row == 5) 
0BA3:  MOVF   3E,W
0BA4:  SUBLW  05
0BA5:  BTFSS  03.2
0BA6:  GOTO   3B5
....................          { 
....................             data3 = thirtyfirstTo36th[0][_column-1]; 
0BA7:  MOVLW  01
0BA8:  SUBWF  3F,W
0BA9:  BCF    0A.3
0BAA:  CALL   3FA
0BAB:  BSF    0A.3
0BAC:  MOVWF  78
0BAD:  MOVWF  4A
....................             data4 = thirtyfirstTo36th[0][_column]; 
0BAE:  MOVF   3F,W
0BAF:  BCF    0A.3
0BB0:  CALL   3FA
0BB1:  BSF    0A.3
0BB2:  MOVWF  78
0BB3:  MOVWF  4B
....................          } 
0BB4:  GOTO   3D8
....................          else 
....................          { 
....................             data3 = twentyfifthTo30th[_row+1][_column-1]; 
0BB5:  MOVLW  01
0BB6:  ADDWF  3E,W
0BB7:  MOVWF  69
0BB8:  MOVWF  6A
0BB9:  MOVLW  29
0BBA:  MOVWF  6B
0BBB:  BCF    0A.3
0BBC:  CALL   7BF
0BBD:  BSF    0A.3
0BBE:  MOVF   78,W
0BBF:  MOVWF  68
0BC0:  MOVLW  01
0BC1:  SUBWF  3F,W
0BC2:  ADDWF  78,W
0BC3:  BCF    0A.3
0BC4:  CALL   3FA
0BC5:  BSF    0A.3
0BC6:  MOVWF  78
0BC7:  MOVWF  4A
....................             data4 = twentyfifthTo30th[_row+1][_column]; 
0BC8:  MOVLW  01
0BC9:  ADDWF  3E,W
0BCA:  MOVWF  69
0BCB:  MOVWF  6A
0BCC:  MOVLW  29
0BCD:  MOVWF  6B
0BCE:  BCF    0A.3
0BCF:  CALL   7BF
0BD0:  BSF    0A.3
0BD1:  MOVF   3F,W
0BD2:  ADDWF  78,W
0BD3:  BCF    0A.3
0BD4:  CALL   3FA
0BD5:  BSF    0A.3
0BD6:  MOVWF  78
0BD7:  MOVWF  4B
....................          } 
....................          break; 
0BD8:  GOTO   470
....................       case 6: 
....................          data1 = thirtyfirstTo36th[_row][_column-1]; 
0BD9:  MOVF   3E,W
0BDA:  MOVWF  6A
0BDB:  MOVLW  29
0BDC:  MOVWF  6B
0BDD:  BCF    0A.3
0BDE:  CALL   7BF
0BDF:  BSF    0A.3
0BE0:  MOVF   78,W
0BE1:  MOVWF  68
0BE2:  MOVLW  01
0BE3:  SUBWF  3F,W
0BE4:  ADDWF  78,W
0BE5:  BCF    0A.3
0BE6:  CALL   3FA
0BE7:  BSF    0A.3
0BE8:  MOVWF  78
0BE9:  MOVWF  48
....................          data2 = thirtyfirstTo36th[_row][_column]; 
0BEA:  MOVF   3E,W
0BEB:  MOVWF  6A
0BEC:  MOVLW  29
0BED:  MOVWF  6B
0BEE:  BCF    0A.3
0BEF:  CALL   7BF
0BF0:  BSF    0A.3
0BF1:  MOVF   3F,W
0BF2:  ADDWF  78,W
0BF3:  BCF    0A.3
0BF4:  CALL   3FA
0BF5:  BSF    0A.3
0BF6:  MOVWF  78
0BF7:  MOVWF  49
....................          if (_row == 5) 
0BF8:  MOVF   3E,W
0BF9:  SUBLW  05
0BFA:  BTFSS  03.2
0BFB:  GOTO   40A
....................          { 
....................             data3 = thirtyseventhTo42nd[0][_column-1]; 
0BFC:  MOVLW  01
0BFD:  SUBWF  3F,W
0BFE:  BCF    0A.3
0BFF:  CALL   4F8
0C00:  BSF    0A.3
0C01:  MOVWF  78
0C02:  MOVWF  4A
....................             data4 = thirtyseventhTo42nd[0][_column]; 
0C03:  MOVF   3F,W
0C04:  BCF    0A.3
0C05:  CALL   4F8
0C06:  BSF    0A.3
0C07:  MOVWF  78
0C08:  MOVWF  4B
....................          } 
0C09:  GOTO   42D
....................          else 
....................          { 
....................             data3 = thirtyfirstTo36th[_row+1][_column-1]; 
0C0A:  MOVLW  01
0C0B:  ADDWF  3E,W
0C0C:  MOVWF  69
0C0D:  MOVWF  6A
0C0E:  MOVLW  29
0C0F:  MOVWF  6B
0C10:  BCF    0A.3
0C11:  CALL   7BF
0C12:  BSF    0A.3
0C13:  MOVF   78,W
0C14:  MOVWF  68
0C15:  MOVLW  01
0C16:  SUBWF  3F,W
0C17:  ADDWF  78,W
0C18:  BCF    0A.3
0C19:  CALL   3FA
0C1A:  BSF    0A.3
0C1B:  MOVWF  78
0C1C:  MOVWF  4A
....................             data4 = thirtyfirstTo36th[_row+1][_column]; 
0C1D:  MOVLW  01
0C1E:  ADDWF  3E,W
0C1F:  MOVWF  69
0C20:  MOVWF  6A
0C21:  MOVLW  29
0C22:  MOVWF  6B
0C23:  BCF    0A.3
0C24:  CALL   7BF
0C25:  BSF    0A.3
0C26:  MOVF   3F,W
0C27:  ADDWF  78,W
0C28:  BCF    0A.3
0C29:  CALL   3FA
0C2A:  BSF    0A.3
0C2B:  MOVWF  78
0C2C:  MOVWF  4B
....................          } 
....................          break; 
0C2D:  GOTO   470
....................      
....................       default: 
....................          data1 = thirtyfirstTo36th[_row][_column-1]; 
0C2E:  MOVF   3E,W
0C2F:  MOVWF  6A
0C30:  MOVLW  29
0C31:  MOVWF  6B
0C32:  BCF    0A.3
0C33:  CALL   7BF
0C34:  BSF    0A.3
0C35:  MOVF   78,W
0C36:  MOVWF  68
0C37:  MOVLW  01
0C38:  SUBWF  3F,W
0C39:  ADDWF  78,W
0C3A:  BCF    0A.3
0C3B:  CALL   3FA
0C3C:  BSF    0A.3
0C3D:  MOVWF  78
0C3E:  MOVWF  48
....................          data2 = thirtyfirstTo36th[_row][_column]; 
0C3F:  MOVF   3E,W
0C40:  MOVWF  6A
0C41:  MOVLW  29
0C42:  MOVWF  6B
0C43:  BCF    0A.3
0C44:  CALL   7BF
0C45:  BSF    0A.3
0C46:  MOVF   3F,W
0C47:  ADDWF  78,W
0C48:  BCF    0A.3
0C49:  CALL   3FA
0C4A:  BSF    0A.3
0C4B:  MOVWF  78
0C4C:  MOVWF  49
....................          data3 = thirtyfirstTo36th[_row+1][_column-1]; 
0C4D:  MOVLW  01
0C4E:  ADDWF  3E,W
0C4F:  MOVWF  69
0C50:  MOVWF  6A
0C51:  MOVLW  29
0C52:  MOVWF  6B
0C53:  BCF    0A.3
0C54:  CALL   7BF
0C55:  BSF    0A.3
0C56:  MOVF   78,W
0C57:  MOVWF  68
0C58:  MOVLW  01
0C59:  SUBWF  3F,W
0C5A:  ADDWF  78,W
0C5B:  BCF    0A.3
0C5C:  CALL   3FA
0C5D:  BSF    0A.3
0C5E:  MOVWF  78
0C5F:  MOVWF  4A
....................          data4 = thirtyfirstTo36th[_row+1][_column]; 
0C60:  MOVLW  01
0C61:  ADDWF  3E,W
0C62:  MOVWF  69
0C63:  MOVWF  6A
0C64:  MOVLW  29
0C65:  MOVWF  6B
0C66:  BCF    0A.3
0C67:  CALL   7BF
0C68:  BSF    0A.3
0C69:  MOVF   3F,W
0C6A:  ADDWF  78,W
0C6B:  BCF    0A.3
0C6C:  CALL   3FA
0C6D:  BSF    0A.3
0C6E:  MOVWF  78
0C6F:  MOVWF  4B
....................          break;    
....................    } 
....................     
....................    // 2D INTERPOLATION 
....................    // Known Steps => can be more modular 
....................    float x1 = (float)((int8)(_load)); 
....................    float x2 = (float)((int8)(_load)+1); 
....................    float y1 = (float)((int8)(_temperature)); 
....................    float y2 = (float)((int8)(_temperature)+1); 
....................    float fx_y1 = ((x2-_load)/(x2-x1))*data1 + ((_load-x1)/(x2-x1))*data2; 
....................    float fx_y2 = ((x2-_load)/(x2-x1))*data3 + ((_load-x1)/(x2-x1))*data4; 
0C70:  MOVF   47,W
0C71:  MOVWF  6B
0C72:  MOVF   46,W
0C73:  MOVWF  6A
0C74:  MOVF   45,W
0C75:  MOVWF  69
0C76:  MOVF   44,W
0C77:  MOVWF  68
0C78:  BCF    0A.3
0C79:  CALL   71B
0C7A:  BSF    0A.3
0C7B:  CLRF   71
0C7C:  MOVF   78,W
0C7D:  MOVWF  70
0C7E:  BCF    0A.3
0C7F:  CALL   678
0C80:  BSF    0A.3
0C81:  MOVF   7A,W
0C82:  MOVWF  53
0C83:  MOVF   79,W
0C84:  MOVWF  52
0C85:  MOVF   78,W
0C86:  MOVWF  51
0C87:  MOVF   77,W
0C88:  MOVWF  50
0C89:  MOVF   47,W
0C8A:  MOVWF  6B
0C8B:  MOVF   46,W
0C8C:  MOVWF  6A
0C8D:  MOVF   45,W
0C8E:  MOVWF  69
0C8F:  MOVF   44,W
0C90:  MOVWF  68
0C91:  BCF    0A.3
0C92:  CALL   71B
0C93:  BSF    0A.3
0C94:  MOVLW  01
0C95:  ADDWF  78,W
0C96:  CLRF   71
0C97:  MOVWF  70
0C98:  BCF    0A.3
0C99:  CALL   678
0C9A:  BSF    0A.3
0C9B:  MOVF   7A,W
0C9C:  MOVWF  57
0C9D:  MOVF   79,W
0C9E:  MOVWF  56
0C9F:  MOVF   78,W
0CA0:  MOVWF  55
0CA1:  MOVF   77,W
0CA2:  MOVWF  54
0CA3:  MOVF   43,W
0CA4:  MOVWF  6B
0CA5:  MOVF   42,W
0CA6:  MOVWF  6A
0CA7:  MOVF   41,W
0CA8:  MOVWF  69
0CA9:  MOVF   40,W
0CAA:  MOVWF  68
0CAB:  BCF    0A.3
0CAC:  CALL   71B
0CAD:  BSF    0A.3
0CAE:  CLRF   71
0CAF:  MOVF   78,W
0CB0:  MOVWF  70
0CB1:  BCF    0A.3
0CB2:  CALL   678
0CB3:  BSF    0A.3
0CB4:  MOVF   7A,W
0CB5:  MOVWF  5B
0CB6:  MOVF   79,W
0CB7:  MOVWF  5A
0CB8:  MOVF   78,W
0CB9:  MOVWF  59
0CBA:  MOVF   77,W
0CBB:  MOVWF  58
0CBC:  MOVF   43,W
0CBD:  MOVWF  6B
0CBE:  MOVF   42,W
0CBF:  MOVWF  6A
0CC0:  MOVF   41,W
0CC1:  MOVWF  69
0CC2:  MOVF   40,W
0CC3:  MOVWF  68
0CC4:  BCF    0A.3
0CC5:  CALL   71B
0CC6:  BSF    0A.3
0CC7:  MOVLW  01
0CC8:  ADDWF  78,W
0CC9:  CLRF   71
0CCA:  MOVWF  70
0CCB:  BCF    0A.3
0CCC:  CALL   678
0CCD:  BSF    0A.3
0CCE:  MOVF   7A,W
0CCF:  MOVWF  5F
0CD0:  MOVF   79,W
0CD1:  MOVWF  5E
0CD2:  MOVF   78,W
0CD3:  MOVWF  5D
0CD4:  MOVF   77,W
0CD5:  MOVWF  5C
0CD6:  BSF    03.1
0CD7:  MOVF   57,W
0CD8:  MOVWF  73
0CD9:  MOVF   56,W
0CDA:  MOVWF  72
0CDB:  MOVF   55,W
0CDC:  MOVWF  71
0CDD:  MOVF   54,W
0CDE:  MOVWF  70
0CDF:  MOVF   47,W
0CE0:  MOVWF  7E
0CE1:  MOVF   46,W
0CE2:  MOVWF  7D
0CE3:  MOVF   45,W
0CE4:  MOVWF  7C
0CE5:  MOVF   44,W
0CE6:  MOVWF  7B
0CE7:  CALL   000
0CE8:  MOVF   7A,W
0CE9:  MOVWF  6B
0CEA:  MOVF   79,W
0CEB:  MOVWF  6A
0CEC:  MOVF   78,W
0CED:  MOVWF  69
0CEE:  MOVF   77,W
0CEF:  MOVWF  68
0CF0:  BSF    03.1
0CF1:  MOVF   57,W
0CF2:  MOVWF  73
0CF3:  MOVF   56,W
0CF4:  MOVWF  72
0CF5:  MOVF   55,W
0CF6:  MOVWF  71
0CF7:  MOVF   54,W
0CF8:  MOVWF  70
0CF9:  MOVF   53,W
0CFA:  MOVWF  7E
0CFB:  MOVF   52,W
0CFC:  MOVWF  7D
0CFD:  MOVF   51,W
0CFE:  MOVWF  7C
0CFF:  MOVF   50,W
0D00:  MOVWF  7B
0D01:  CALL   000
0D02:  MOVF   6B,W
0D03:  MOVWF  73
0D04:  MOVF   6A,W
0D05:  MOVWF  72
0D06:  MOVF   69,W
0D07:  MOVWF  71
0D08:  MOVF   68,W
0D09:  MOVWF  70
0D0A:  MOVF   7A,W
0D0B:  MOVWF  7E
0D0C:  MOVF   79,W
0D0D:  MOVWF  7D
0D0E:  MOVF   78,W
0D0F:  MOVWF  7C
0D10:  MOVF   77,W
0D11:  MOVWF  7B
0D12:  CALL   143
0D13:  MOVF   7A,W
0D14:  MOVWF  6B
0D15:  MOVF   79,W
0D16:  MOVWF  6A
0D17:  MOVF   78,W
0D18:  MOVWF  69
0D19:  MOVF   77,W
0D1A:  MOVWF  68
0D1B:  CLRF   71
0D1C:  MOVF   48,W
0D1D:  MOVWF  70
0D1E:  BCF    0A.3
0D1F:  CALL   678
0D20:  BSF    0A.3
0D21:  MOVF   6B,W
0D22:  MOVWF  73
0D23:  MOVF   6A,W
0D24:  MOVWF  72
0D25:  MOVF   69,W
0D26:  MOVWF  71
0D27:  MOVF   68,W
0D28:  MOVWF  70
0D29:  MOVF   7A,W
0D2A:  MOVWF  7E
0D2B:  MOVF   79,W
0D2C:  MOVWF  7D
0D2D:  MOVF   78,W
0D2E:  MOVWF  7C
0D2F:  MOVF   77,W
0D30:  MOVWF  7B
0D31:  BCF    0A.3
0D32:  CALL   695
0D33:  BSF    0A.3
0D34:  MOVF   7A,W
0D35:  MOVWF  6B
0D36:  MOVF   79,W
0D37:  MOVWF  6A
0D38:  MOVF   78,W
0D39:  MOVWF  69
0D3A:  MOVF   77,W
0D3B:  MOVWF  68
0D3C:  BSF    03.1
0D3D:  MOVF   47,W
0D3E:  MOVWF  73
0D3F:  MOVF   46,W
0D40:  MOVWF  72
0D41:  MOVF   45,W
0D42:  MOVWF  71
0D43:  MOVF   44,W
0D44:  MOVWF  70
0D45:  MOVF   53,W
0D46:  MOVWF  7E
0D47:  MOVF   52,W
0D48:  MOVWF  7D
0D49:  MOVF   51,W
0D4A:  MOVWF  7C
0D4B:  MOVF   50,W
0D4C:  MOVWF  7B
0D4D:  CALL   000
0D4E:  MOVF   7A,W
0D4F:  MOVWF  6F
0D50:  MOVF   79,W
0D51:  MOVWF  6E
0D52:  MOVF   78,W
0D53:  MOVWF  6D
0D54:  MOVF   77,W
0D55:  MOVWF  6C
0D56:  BSF    03.1
0D57:  MOVF   57,W
0D58:  MOVWF  73
0D59:  MOVF   56,W
0D5A:  MOVWF  72
0D5B:  MOVF   55,W
0D5C:  MOVWF  71
0D5D:  MOVF   54,W
0D5E:  MOVWF  70
0D5F:  MOVF   53,W
0D60:  MOVWF  7E
0D61:  MOVF   52,W
0D62:  MOVWF  7D
0D63:  MOVF   51,W
0D64:  MOVWF  7C
0D65:  MOVF   50,W
0D66:  MOVWF  7B
0D67:  CALL   000
0D68:  MOVF   6F,W
0D69:  MOVWF  73
0D6A:  MOVF   6E,W
0D6B:  MOVWF  72
0D6C:  MOVF   6D,W
0D6D:  MOVWF  71
0D6E:  MOVF   6C,W
0D6F:  MOVWF  70
0D70:  MOVF   7A,W
0D71:  MOVWF  7E
0D72:  MOVF   79,W
0D73:  MOVWF  7D
0D74:  MOVF   78,W
0D75:  MOVWF  7C
0D76:  MOVF   77,W
0D77:  MOVWF  7B
0D78:  CALL   143
0D79:  MOVF   7A,W
0D7A:  MOVWF  6F
0D7B:  MOVF   79,W
0D7C:  MOVWF  6E
0D7D:  MOVF   78,W
0D7E:  MOVWF  6D
0D7F:  MOVF   77,W
0D80:  MOVWF  6C
0D81:  CLRF   71
0D82:  MOVF   49,W
0D83:  MOVWF  70
0D84:  BCF    0A.3
0D85:  CALL   678
0D86:  BSF    0A.3
0D87:  MOVF   6F,W
0D88:  MOVWF  73
0D89:  MOVF   6E,W
0D8A:  MOVWF  72
0D8B:  MOVF   6D,W
0D8C:  MOVWF  71
0D8D:  MOVF   6C,W
0D8E:  MOVWF  70
0D8F:  MOVF   7A,W
0D90:  MOVWF  7E
0D91:  MOVF   79,W
0D92:  MOVWF  7D
0D93:  MOVF   78,W
0D94:  MOVWF  7C
0D95:  MOVF   77,W
0D96:  MOVWF  7B
0D97:  BCF    0A.3
0D98:  CALL   695
0D99:  BSF    0A.3
0D9A:  BCF    03.1
0D9B:  MOVF   6B,W
0D9C:  MOVWF  73
0D9D:  MOVF   6A,W
0D9E:  MOVWF  72
0D9F:  MOVF   69,W
0DA0:  MOVWF  71
0DA1:  MOVF   68,W
0DA2:  MOVWF  70
0DA3:  MOVF   7A,W
0DA4:  MOVWF  7E
0DA5:  MOVF   79,W
0DA6:  MOVWF  7D
0DA7:  MOVF   78,W
0DA8:  MOVWF  7C
0DA9:  MOVF   77,W
0DAA:  MOVWF  7B
0DAB:  CALL   000
0DAC:  MOVF   7A,W
0DAD:  MOVWF  63
0DAE:  MOVF   79,W
0DAF:  MOVWF  62
0DB0:  MOVF   78,W
0DB1:  MOVWF  61
0DB2:  MOVF   77,W
0DB3:  MOVWF  60
0DB4:  BSF    03.1
0DB5:  MOVF   57,W
0DB6:  MOVWF  73
0DB7:  MOVF   56,W
0DB8:  MOVWF  72
0DB9:  MOVF   55,W
0DBA:  MOVWF  71
0DBB:  MOVF   54,W
0DBC:  MOVWF  70
0DBD:  MOVF   47,W
0DBE:  MOVWF  7E
0DBF:  MOVF   46,W
0DC0:  MOVWF  7D
0DC1:  MOVF   45,W
0DC2:  MOVWF  7C
0DC3:  MOVF   44,W
0DC4:  MOVWF  7B
0DC5:  CALL   000
0DC6:  MOVF   7A,W
0DC7:  MOVWF  6B
0DC8:  MOVF   79,W
0DC9:  MOVWF  6A
0DCA:  MOVF   78,W
0DCB:  MOVWF  69
0DCC:  MOVF   77,W
0DCD:  MOVWF  68
0DCE:  BSF    03.1
0DCF:  MOVF   57,W
0DD0:  MOVWF  73
0DD1:  MOVF   56,W
0DD2:  MOVWF  72
0DD3:  MOVF   55,W
0DD4:  MOVWF  71
0DD5:  MOVF   54,W
0DD6:  MOVWF  70
0DD7:  MOVF   53,W
0DD8:  MOVWF  7E
0DD9:  MOVF   52,W
0DDA:  MOVWF  7D
0DDB:  MOVF   51,W
0DDC:  MOVWF  7C
0DDD:  MOVF   50,W
0DDE:  MOVWF  7B
0DDF:  CALL   000
0DE0:  MOVF   6B,W
0DE1:  MOVWF  73
0DE2:  MOVF   6A,W
0DE3:  MOVWF  72
0DE4:  MOVF   69,W
0DE5:  MOVWF  71
0DE6:  MOVF   68,W
0DE7:  MOVWF  70
0DE8:  MOVF   7A,W
0DE9:  MOVWF  7E
0DEA:  MOVF   79,W
0DEB:  MOVWF  7D
0DEC:  MOVF   78,W
0DED:  MOVWF  7C
0DEE:  MOVF   77,W
0DEF:  MOVWF  7B
0DF0:  CALL   143
0DF1:  MOVF   7A,W
0DF2:  MOVWF  6B
0DF3:  MOVF   79,W
0DF4:  MOVWF  6A
0DF5:  MOVF   78,W
0DF6:  MOVWF  69
0DF7:  MOVF   77,W
0DF8:  MOVWF  68
0DF9:  CLRF   71
0DFA:  MOVF   4A,W
0DFB:  MOVWF  70
0DFC:  BCF    0A.3
0DFD:  CALL   678
0DFE:  BSF    0A.3
0DFF:  MOVF   6B,W
0E00:  MOVWF  73
0E01:  MOVF   6A,W
0E02:  MOVWF  72
0E03:  MOVF   69,W
0E04:  MOVWF  71
0E05:  MOVF   68,W
0E06:  MOVWF  70
0E07:  MOVF   7A,W
0E08:  MOVWF  7E
0E09:  MOVF   79,W
0E0A:  MOVWF  7D
0E0B:  MOVF   78,W
0E0C:  MOVWF  7C
0E0D:  MOVF   77,W
0E0E:  MOVWF  7B
0E0F:  BCF    0A.3
0E10:  CALL   695
0E11:  BSF    0A.3
0E12:  MOVF   7A,W
0E13:  MOVWF  6B
0E14:  MOVF   79,W
0E15:  MOVWF  6A
0E16:  MOVF   78,W
0E17:  MOVWF  69
0E18:  MOVF   77,W
0E19:  MOVWF  68
0E1A:  BSF    03.1
0E1B:  MOVF   47,W
0E1C:  MOVWF  73
0E1D:  MOVF   46,W
0E1E:  MOVWF  72
0E1F:  MOVF   45,W
0E20:  MOVWF  71
0E21:  MOVF   44,W
0E22:  MOVWF  70
0E23:  MOVF   53,W
0E24:  MOVWF  7E
0E25:  MOVF   52,W
0E26:  MOVWF  7D
0E27:  MOVF   51,W
0E28:  MOVWF  7C
0E29:  MOVF   50,W
0E2A:  MOVWF  7B
0E2B:  CALL   000
0E2C:  MOVF   7A,W
0E2D:  MOVWF  6F
0E2E:  MOVF   79,W
0E2F:  MOVWF  6E
0E30:  MOVF   78,W
0E31:  MOVWF  6D
0E32:  MOVF   77,W
0E33:  MOVWF  6C
0E34:  BSF    03.1
0E35:  MOVF   57,W
0E36:  MOVWF  73
0E37:  MOVF   56,W
0E38:  MOVWF  72
0E39:  MOVF   55,W
0E3A:  MOVWF  71
0E3B:  MOVF   54,W
0E3C:  MOVWF  70
0E3D:  MOVF   53,W
0E3E:  MOVWF  7E
0E3F:  MOVF   52,W
0E40:  MOVWF  7D
0E41:  MOVF   51,W
0E42:  MOVWF  7C
0E43:  MOVF   50,W
0E44:  MOVWF  7B
0E45:  CALL   000
0E46:  MOVF   6F,W
0E47:  MOVWF  73
0E48:  MOVF   6E,W
0E49:  MOVWF  72
0E4A:  MOVF   6D,W
0E4B:  MOVWF  71
0E4C:  MOVF   6C,W
0E4D:  MOVWF  70
0E4E:  MOVF   7A,W
0E4F:  MOVWF  7E
0E50:  MOVF   79,W
0E51:  MOVWF  7D
0E52:  MOVF   78,W
0E53:  MOVWF  7C
0E54:  MOVF   77,W
0E55:  MOVWF  7B
0E56:  CALL   143
0E57:  MOVF   7A,W
0E58:  MOVWF  6F
0E59:  MOVF   79,W
0E5A:  MOVWF  6E
0E5B:  MOVF   78,W
0E5C:  MOVWF  6D
0E5D:  MOVF   77,W
0E5E:  MOVWF  6C
0E5F:  CLRF   71
0E60:  MOVF   4B,W
0E61:  MOVWF  70
0E62:  BCF    0A.3
0E63:  CALL   678
0E64:  BSF    0A.3
0E65:  MOVF   6F,W
0E66:  MOVWF  73
0E67:  MOVF   6E,W
0E68:  MOVWF  72
0E69:  MOVF   6D,W
0E6A:  MOVWF  71
0E6B:  MOVF   6C,W
0E6C:  MOVWF  70
0E6D:  MOVF   7A,W
0E6E:  MOVWF  7E
0E6F:  MOVF   79,W
0E70:  MOVWF  7D
0E71:  MOVF   78,W
0E72:  MOVWF  7C
0E73:  MOVF   77,W
0E74:  MOVWF  7B
0E75:  BCF    0A.3
0E76:  CALL   695
0E77:  BSF    0A.3
0E78:  BCF    03.1
0E79:  MOVF   6B,W
0E7A:  MOVWF  73
0E7B:  MOVF   6A,W
0E7C:  MOVWF  72
0E7D:  MOVF   69,W
0E7E:  MOVWF  71
0E7F:  MOVF   68,W
0E80:  MOVWF  70
0E81:  MOVF   7A,W
0E82:  MOVWF  7E
0E83:  MOVF   79,W
0E84:  MOVWF  7D
0E85:  MOVF   78,W
0E86:  MOVWF  7C
0E87:  MOVF   77,W
0E88:  MOVWF  7B
0E89:  CALL   000
0E8A:  MOVF   7A,W
0E8B:  MOVWF  67
0E8C:  MOVF   79,W
0E8D:  MOVWF  66
0E8E:  MOVF   78,W
0E8F:  MOVWF  65
0E90:  MOVF   77,W
0E91:  MOVWF  64
....................    interpolatedData = ((y2-_temperature)/(y2-y1))*fx_y1 + ((_temperature-y1)/(y2-y1))*fx_y2; 
0E92:  BSF    03.1
0E93:  MOVF   5F,W
0E94:  MOVWF  73
0E95:  MOVF   5E,W
0E96:  MOVWF  72
0E97:  MOVF   5D,W
0E98:  MOVWF  71
0E99:  MOVF   5C,W
0E9A:  MOVWF  70
0E9B:  MOVF   43,W
0E9C:  MOVWF  7E
0E9D:  MOVF   42,W
0E9E:  MOVWF  7D
0E9F:  MOVF   41,W
0EA0:  MOVWF  7C
0EA1:  MOVF   40,W
0EA2:  MOVWF  7B
0EA3:  CALL   000
0EA4:  MOVF   7A,W
0EA5:  MOVWF  6B
0EA6:  MOVF   79,W
0EA7:  MOVWF  6A
0EA8:  MOVF   78,W
0EA9:  MOVWF  69
0EAA:  MOVF   77,W
0EAB:  MOVWF  68
0EAC:  BSF    03.1
0EAD:  MOVF   5F,W
0EAE:  MOVWF  73
0EAF:  MOVF   5E,W
0EB0:  MOVWF  72
0EB1:  MOVF   5D,W
0EB2:  MOVWF  71
0EB3:  MOVF   5C,W
0EB4:  MOVWF  70
0EB5:  MOVF   5B,W
0EB6:  MOVWF  7E
0EB7:  MOVF   5A,W
0EB8:  MOVWF  7D
0EB9:  MOVF   59,W
0EBA:  MOVWF  7C
0EBB:  MOVF   58,W
0EBC:  MOVWF  7B
0EBD:  CALL   000
0EBE:  MOVF   6B,W
0EBF:  MOVWF  73
0EC0:  MOVF   6A,W
0EC1:  MOVWF  72
0EC2:  MOVF   69,W
0EC3:  MOVWF  71
0EC4:  MOVF   68,W
0EC5:  MOVWF  70
0EC6:  MOVF   7A,W
0EC7:  MOVWF  7E
0EC8:  MOVF   79,W
0EC9:  MOVWF  7D
0ECA:  MOVF   78,W
0ECB:  MOVWF  7C
0ECC:  MOVF   77,W
0ECD:  MOVWF  7B
0ECE:  CALL   143
0ECF:  MOVF   7A,W
0ED0:  MOVWF  6B
0ED1:  MOVF   79,W
0ED2:  MOVWF  6A
0ED3:  MOVF   78,W
0ED4:  MOVWF  69
0ED5:  MOVF   77,W
0ED6:  MOVWF  68
0ED7:  MOVF   7A,W
0ED8:  MOVWF  73
0ED9:  MOVF   79,W
0EDA:  MOVWF  72
0EDB:  MOVF   78,W
0EDC:  MOVWF  71
0EDD:  MOVF   77,W
0EDE:  MOVWF  70
0EDF:  MOVF   63,W
0EE0:  MOVWF  7E
0EE1:  MOVF   62,W
0EE2:  MOVWF  7D
0EE3:  MOVF   61,W
0EE4:  MOVWF  7C
0EE5:  MOVF   60,W
0EE6:  MOVWF  7B
0EE7:  BCF    0A.3
0EE8:  CALL   695
0EE9:  BSF    0A.3
0EEA:  MOVF   7A,W
0EEB:  MOVWF  6B
0EEC:  MOVF   79,W
0EED:  MOVWF  6A
0EEE:  MOVF   78,W
0EEF:  MOVWF  69
0EF0:  MOVF   77,W
0EF1:  MOVWF  68
0EF2:  BSF    03.1
0EF3:  MOVF   43,W
0EF4:  MOVWF  73
0EF5:  MOVF   42,W
0EF6:  MOVWF  72
0EF7:  MOVF   41,W
0EF8:  MOVWF  71
0EF9:  MOVF   40,W
0EFA:  MOVWF  70
0EFB:  MOVF   5B,W
0EFC:  MOVWF  7E
0EFD:  MOVF   5A,W
0EFE:  MOVWF  7D
0EFF:  MOVF   59,W
0F00:  MOVWF  7C
0F01:  MOVF   58,W
0F02:  MOVWF  7B
0F03:  CALL   000
0F04:  MOVF   7A,W
0F05:  MOVWF  6F
0F06:  MOVF   79,W
0F07:  MOVWF  6E
0F08:  MOVF   78,W
0F09:  MOVWF  6D
0F0A:  MOVF   77,W
0F0B:  MOVWF  6C
0F0C:  BSF    03.1
0F0D:  MOVF   5F,W
0F0E:  MOVWF  73
0F0F:  MOVF   5E,W
0F10:  MOVWF  72
0F11:  MOVF   5D,W
0F12:  MOVWF  71
0F13:  MOVF   5C,W
0F14:  MOVWF  70
0F15:  MOVF   5B,W
0F16:  MOVWF  7E
0F17:  MOVF   5A,W
0F18:  MOVWF  7D
0F19:  MOVF   59,W
0F1A:  MOVWF  7C
0F1B:  MOVF   58,W
0F1C:  MOVWF  7B
0F1D:  CALL   000
0F1E:  MOVF   6F,W
0F1F:  MOVWF  73
0F20:  MOVF   6E,W
0F21:  MOVWF  72
0F22:  MOVF   6D,W
0F23:  MOVWF  71
0F24:  MOVF   6C,W
0F25:  MOVWF  70
0F26:  MOVF   7A,W
0F27:  MOVWF  7E
0F28:  MOVF   79,W
0F29:  MOVWF  7D
0F2A:  MOVF   78,W
0F2B:  MOVWF  7C
0F2C:  MOVF   77,W
0F2D:  MOVWF  7B
0F2E:  CALL   143
0F2F:  MOVF   7A,W
0F30:  MOVWF  6F
0F31:  MOVF   79,W
0F32:  MOVWF  6E
0F33:  MOVF   78,W
0F34:  MOVWF  6D
0F35:  MOVF   77,W
0F36:  MOVWF  6C
0F37:  MOVF   7A,W
0F38:  MOVWF  73
0F39:  MOVF   79,W
0F3A:  MOVWF  72
0F3B:  MOVF   78,W
0F3C:  MOVWF  71
0F3D:  MOVF   77,W
0F3E:  MOVWF  70
0F3F:  MOVF   67,W
0F40:  MOVWF  7E
0F41:  MOVF   66,W
0F42:  MOVWF  7D
0F43:  MOVF   65,W
0F44:  MOVWF  7C
0F45:  MOVF   64,W
0F46:  MOVWF  7B
0F47:  BCF    0A.3
0F48:  CALL   695
0F49:  BSF    0A.3
0F4A:  BCF    03.1
0F4B:  MOVF   6B,W
0F4C:  MOVWF  73
0F4D:  MOVF   6A,W
0F4E:  MOVWF  72
0F4F:  MOVF   69,W
0F50:  MOVWF  71
0F51:  MOVF   68,W
0F52:  MOVWF  70
0F53:  MOVF   7A,W
0F54:  MOVWF  7E
0F55:  MOVF   79,W
0F56:  MOVWF  7D
0F57:  MOVF   78,W
0F58:  MOVWF  7C
0F59:  MOVF   77,W
0F5A:  MOVWF  7B
0F5B:  CALL   000
0F5C:  MOVF   7A,W
0F5D:  MOVWF  4F
0F5E:  MOVF   79,W
0F5F:  MOVWF  4E
0F60:  MOVF   78,W
0F61:  MOVWF  4D
0F62:  MOVF   77,W
0F63:  MOVWF  4C
....................     
....................    return interpolatedData; 
0F64:  MOVF   4C,W
0F65:  MOVWF  77
0F66:  MOVF   4D,W
0F67:  MOVWF  78
0F68:  MOVF   4E,W
0F69:  MOVWF  79
0F6A:  MOVF   4F,W
0F6B:  MOVWF  7A
0F6C:  BCF    0A.3
0F6D:  BSF    0A.4
0F6E:  GOTO   2A4 (RETURN)
.................... } 
....................  
.................... void main() 
*
1158:  MOVLW  81
1159:  BSF    03.5
115A:  MOVWF  19
115B:  MOVLW  A6
115C:  MOVWF  18
115D:  MOVLW  90
115E:  BCF    03.5
115F:  MOVWF  18
1160:  CLRF   23
1161:  CLRF   22
1162:  CLRF   21
1163:  CLRF   20
1164:  CLRF   27
1165:  CLRF   26
1166:  CLRF   25
1167:  CLRF   24
1168:  MOVLW  FF
1169:  MOVWF  2F
116A:  BSF    03.5
116B:  BSF    1F.0
116C:  BSF    1F.1
116D:  BSF    1F.2
116E:  BCF    1F.3
116F:  MOVLW  07
1170:  MOVWF  1C
1171:  BCF    03.7
1172:  MOVLW  1F
1173:  ANDWF  03,F
.................... { 
....................    lcd_init(); 
*
1178:  BCF    0A.4
1179:  GOTO   645
117A:  BSF    0A.4
....................    setup_psp(PSP_DISABLED); 
117B:  BSF    03.5
117C:  BCF    09.4
....................    setup_timer_1(T1_DISABLED); 
117D:  BCF    03.5
117E:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
117F:  MOVLW  00
1180:  MOVWF  78
1181:  MOVWF  12
1182:  MOVLW  00
1183:  BSF    03.5
1184:  MOVWF  12
....................    setup_ccp1(CCP_PWM); //4kHz PWM signal output at CCP1 pin 17 
1185:  BCF    03.5
1186:  BCF    2F.2
1187:  MOVF   2F,W
1188:  BSF    03.5
1189:  MOVWF  07
118A:  BCF    03.5
118B:  BCF    07.2
118C:  MOVLW  0C
118D:  MOVWF  17
....................    setup_CCP2(CCP_OFF); 
118E:  MOVLW  F0
118F:  ANDWF  1D,F
....................    setup_timer_2(T2_DIV_BY_16, 255, 1); 
1190:  MOVLW  00
1191:  MOVWF  78
1192:  IORLW  06
1193:  MOVWF  12
1194:  MOVLW  FF
1195:  BSF    03.5
1196:  MOVWF  12
....................    delay_ms(10); 
1197:  MOVLW  0A
1198:  BCF    03.5
1199:  MOVWF  48
119A:  BCF    0A.4
119B:  CALL   5D8
119C:  BSF    0A.4
....................    setup_adc_ports(AN0_AN1_AN3); //A0 A1 A3 are configured for analog input pin 
119D:  BSF    03.5
119E:  BCF    1F.0
119F:  BCF    1F.1
11A0:  BSF    1F.2
11A1:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); //enable ADC and set clock for ADC 
11A2:  BCF    1F.6
11A3:  BCF    03.5
11A4:  BCF    1F.6
11A5:  BSF    1F.7
11A6:  BSF    03.5
11A7:  BSF    1F.7
11A8:  BCF    03.5
11A9:  BSF    1F.0
....................     
....................    set_tris_c(0x00); //set all portc pins as output 
11AA:  MOVLW  00
11AB:  BSF    03.5
11AC:  MOVWF  07
11AD:  BCF    03.5
11AE:  MOVWF  2F
....................  
....................    while(1) 
....................    { 
....................       set_adc_channel(0); // next analog reading will be from channel 0 
11AF:  MOVLW  00
11B0:  MOVWF  78
11B1:  MOVF   1F,W
11B2:  ANDLW  C7
11B3:  IORWF  78,W
11B4:  MOVWF  1F
....................       delay_us(10); //allow time after channel selection and reading 
11B5:  MOVLW  10
11B6:  MOVWF  77
11B7:  DECFSZ 77,F
11B8:  GOTO   1B7
11B9:  NOP
....................       result_1 = read_adc(); //start and read A/D 
11BA:  BSF    1F.2
11BB:  BTFSC  1F.2
11BC:  GOTO   1BB
11BD:  BSF    03.5
11BE:  MOVF   1E,W
11BF:  BCF    03.5
11C0:  MOVWF  28
11C1:  MOVF   1E,W
11C2:  MOVWF  29
....................       delay_us(10); //allow time after channel selection and reading 
11C3:  MOVLW  10
11C4:  MOVWF  77
11C5:  DECFSZ 77,F
11C6:  GOTO   1C5
11C7:  NOP
....................       set_adc_channel(1); // next analog reading will be from channel 1 
11C8:  MOVLW  08
11C9:  MOVWF  78
11CA:  MOVF   1F,W
11CB:  ANDLW  C7
11CC:  IORWF  78,W
11CD:  MOVWF  1F
....................       delay_us(10); //allow time after channel selection and reading 
11CE:  MOVLW  10
11CF:  MOVWF  77
11D0:  DECFSZ 77,F
11D1:  GOTO   1D0
11D2:  NOP
....................       result_2 = read_adc(); //start and read A/D 
11D3:  BSF    1F.2
11D4:  BTFSC  1F.2
11D5:  GOTO   1D4
11D6:  BSF    03.5
11D7:  MOVF   1E,W
11D8:  BCF    03.5
11D9:  MOVWF  2A
11DA:  MOVF   1E,W
11DB:  MOVWF  2B
....................       delay_us(10); //allow time after channel selection and reading 
11DC:  MOVLW  10
11DD:  MOVWF  77
11DE:  DECFSZ 77,F
11DF:  GOTO   1DE
11E0:  NOP
....................       temperature = 0.0391*result_1+40; 
11E1:  MOVF   29,W
11E2:  MOVWF  71
11E3:  MOVF   28,W
11E4:  MOVWF  70
11E5:  BCF    0A.4
11E6:  CALL   678
11E7:  BSF    0A.4
11E8:  MOVLW  52
11E9:  MOVWF  73
11EA:  MOVLW  27
11EB:  MOVWF  72
11EC:  MOVLW  20
11ED:  MOVWF  71
11EE:  MOVLW  7A
11EF:  MOVWF  70
11F0:  MOVF   7A,W
11F1:  MOVWF  7E
11F2:  MOVF   79,W
11F3:  MOVWF  7D
11F4:  MOVF   78,W
11F5:  MOVWF  7C
11F6:  MOVF   77,W
11F7:  MOVWF  7B
11F8:  BCF    0A.4
11F9:  CALL   695
11FA:  BSF    0A.4
11FB:  MOVF   7A,W
11FC:  MOVWF  3D
11FD:  MOVF   79,W
11FE:  MOVWF  3C
11FF:  MOVF   78,W
1200:  MOVWF  3B
1201:  MOVF   77,W
1202:  MOVWF  3A
1203:  BCF    03.1
1204:  MOVF   7A,W
1205:  MOVWF  73
1206:  MOVF   79,W
1207:  MOVWF  72
1208:  MOVF   78,W
1209:  MOVWF  71
120A:  MOVF   77,W
120B:  MOVWF  70
120C:  CLRF   7E
120D:  CLRF   7D
120E:  MOVLW  20
120F:  MOVWF  7C
1210:  MOVLW  84
1211:  MOVWF  7B
1212:  BCF    0A.4
1213:  BSF    0A.3
1214:  CALL   000
1215:  BSF    0A.4
1216:  BCF    0A.3
1217:  MOVF   7A,W
1218:  MOVWF  23
1219:  MOVF   79,W
121A:  MOVWF  22
121B:  MOVF   78,W
121C:  MOVWF  21
121D:  MOVF   77,W
121E:  MOVWF  20
....................       load = 0.0587*result_2-30; 
121F:  MOVF   2B,W
1220:  MOVWF  71
1221:  MOVF   2A,W
1222:  MOVWF  70
1223:  BCF    0A.4
1224:  CALL   678
1225:  BSF    0A.4
1226:  MOVLW  69
1227:  MOVWF  73
1228:  MOVLW  6F
1229:  MOVWF  72
122A:  MOVLW  70
122B:  MOVWF  71
122C:  MOVLW  7A
122D:  MOVWF  70
122E:  MOVF   7A,W
122F:  MOVWF  7E
1230:  MOVF   79,W
1231:  MOVWF  7D
1232:  MOVF   78,W
1233:  MOVWF  7C
1234:  MOVF   77,W
1235:  MOVWF  7B
1236:  BCF    0A.4
1237:  CALL   695
1238:  BSF    0A.4
1239:  MOVF   7A,W
123A:  MOVWF  3D
123B:  MOVF   79,W
123C:  MOVWF  3C
123D:  MOVF   78,W
123E:  MOVWF  3B
123F:  MOVF   77,W
1240:  MOVWF  3A
1241:  BSF    03.1
1242:  MOVF   7A,W
1243:  MOVWF  73
1244:  MOVF   79,W
1245:  MOVWF  72
1246:  MOVF   78,W
1247:  MOVWF  71
1248:  MOVF   77,W
1249:  MOVWF  70
124A:  CLRF   7E
124B:  CLRF   7D
124C:  MOVLW  70
124D:  MOVWF  7C
124E:  MOVLW  83
124F:  MOVWF  7B
1250:  BCF    0A.4
1251:  BSF    0A.3
1252:  CALL   000
1253:  BSF    0A.4
1254:  BCF    0A.3
1255:  MOVF   7A,W
1256:  MOVWF  27
1257:  MOVF   79,W
1258:  MOVWF  26
1259:  MOVF   78,W
125A:  MOVWF  25
125B:  MOVF   77,W
125C:  MOVWF  24
....................       int8 * MatrixAndRowAndColumn; 
....................       MatrixAndRowAndColumn=SelectMatrixAndRowAndColumn(temperature, load); 
125D:  MOVF   23,W
125E:  MOVWF  3D
125F:  MOVF   22,W
1260:  MOVWF  3C
1261:  MOVF   21,W
1262:  MOVWF  3B
1263:  MOVF   20,W
1264:  MOVWF  3A
1265:  MOVF   27,W
1266:  MOVWF  41
1267:  MOVF   26,W
1268:  MOVWF  40
1269:  MOVF   25,W
126A:  MOVWF  3F
126B:  MOVF   24,W
126C:  MOVWF  3E
126D:  BCF    0A.4
126E:  GOTO   74F
126F:  BSF    0A.4
1270:  MOVF   79,W
1271:  MOVWF  31
1272:  MOVF   78,W
1273:  MOVWF  30
....................       float fuzzyOut = GetDataAndInterpolate(MatrixAndRowAndColumn[0], MatrixAndRowAndColumn[1], MatrixAndRowAndColumn[2], temperature, load); 
....................       //unsigned int mypwm = (unsigned int)(fuzzyOut/100.0); 
....................       float mypwm = (float)(fuzzyOut/100.0); 
1274:  MOVF   30,W
1275:  MOVWF  04
1276:  BCF    03.7
1277:  BTFSC  31.0
1278:  BSF    03.7
1279:  MOVF   00,W
127A:  MOVWF  3A
127B:  MOVLW  01
127C:  ADDWF  30,W
127D:  MOVWF  04
127E:  BCF    03.7
127F:  BTFSC  31.0
1280:  BSF    03.7
1281:  MOVF   00,W
1282:  MOVWF  3B
1283:  MOVLW  02
1284:  ADDWF  30,W
1285:  MOVWF  04
1286:  BCF    03.7
1287:  BTFSC  31.0
1288:  BSF    03.7
1289:  MOVF   00,W
128A:  MOVWF  3C
128B:  MOVF   3A,W
128C:  MOVWF  3D
128D:  MOVF   3B,W
128E:  MOVWF  3E
128F:  MOVF   3C,W
1290:  MOVWF  3F
1291:  MOVF   23,W
1292:  MOVWF  43
1293:  MOVF   22,W
1294:  MOVWF  42
1295:  MOVF   21,W
1296:  MOVWF  41
1297:  MOVF   20,W
1298:  MOVWF  40
1299:  MOVF   27,W
129A:  MOVWF  47
129B:  MOVF   26,W
129C:  MOVWF  46
129D:  MOVF   25,W
129E:  MOVWF  45
129F:  MOVF   24,W
12A0:  MOVWF  44
12A1:  BCF    0A.4
12A2:  BSF    0A.3
12A3:  GOTO   21C
12A4:  BSF    0A.4
12A5:  BCF    0A.3
12A6:  MOVF   7A,W
12A7:  MOVWF  35
12A8:  MOVF   79,W
12A9:  MOVWF  34
12AA:  MOVF   78,W
12AB:  MOVWF  33
12AC:  MOVF   77,W
12AD:  MOVWF  32
12AE:  MOVF   35,W
12AF:  MOVWF  73
12B0:  MOVF   34,W
12B1:  MOVWF  72
12B2:  MOVF   33,W
12B3:  MOVWF  71
12B4:  MOVF   32,W
12B5:  MOVWF  70
12B6:  CLRF   7E
12B7:  CLRF   7D
12B8:  MOVLW  48
12B9:  MOVWF  7C
12BA:  MOVLW  85
12BB:  MOVWF  7B
12BC:  BCF    0A.4
12BD:  BSF    0A.3
12BE:  CALL   143
12BF:  BSF    0A.4
12C0:  BCF    0A.3
12C1:  MOVF   7A,W
12C2:  MOVWF  39
12C3:  MOVF   79,W
12C4:  MOVWF  38
12C5:  MOVF   78,W
12C6:  MOVWF  37
12C7:  MOVF   77,W
12C8:  MOVWF  36
....................       printf(lcd_putc,"\fT:%f,l:%f\nout:%f",temperature,load,mypwm); 
12C9:  MOVLW  0C
12CA:  MOVWF  47
12CB:  BCF    0A.4
12CC:  BSF    0A.3
12CD:  CALL   76F
12CE:  BSF    0A.4
12CF:  BCF    0A.3
12D0:  MOVLW  54
12D1:  MOVWF  47
12D2:  BCF    0A.4
12D3:  BSF    0A.3
12D4:  CALL   76F
12D5:  BSF    0A.4
12D6:  BCF    0A.3
12D7:  MOVLW  3A
12D8:  MOVWF  47
12D9:  BCF    0A.4
12DA:  BSF    0A.3
12DB:  CALL   76F
12DC:  BSF    0A.4
12DD:  BCF    0A.3
12DE:  MOVLW  89
12DF:  MOVWF  04
12E0:  MOVF   23,W
12E1:  MOVWF  3D
12E2:  MOVF   22,W
12E3:  MOVWF  3C
12E4:  MOVF   21,W
12E5:  MOVWF  3B
12E6:  MOVF   20,W
12E7:  MOVWF  3A
12E8:  MOVLW  02
12E9:  MOVWF  3E
12EA:  CALL   000
12EB:  MOVLW  2C
12EC:  MOVWF  47
12ED:  BCF    0A.4
12EE:  BSF    0A.3
12EF:  CALL   76F
12F0:  BSF    0A.4
12F1:  BCF    0A.3
12F2:  MOVLW  6C
12F3:  MOVWF  47
12F4:  BCF    0A.4
12F5:  BSF    0A.3
12F6:  CALL   76F
12F7:  BSF    0A.4
12F8:  BCF    0A.3
12F9:  MOVLW  3A
12FA:  MOVWF  47
12FB:  BCF    0A.4
12FC:  BSF    0A.3
12FD:  CALL   76F
12FE:  BSF    0A.4
12FF:  BCF    0A.3
1300:  MOVLW  89
1301:  MOVWF  04
1302:  MOVF   27,W
1303:  MOVWF  3D
1304:  MOVF   26,W
1305:  MOVWF  3C
1306:  MOVF   25,W
1307:  MOVWF  3B
1308:  MOVF   24,W
1309:  MOVWF  3A
130A:  MOVLW  02
130B:  MOVWF  3E
130C:  CALL   000
130D:  MOVLW  D4
130E:  BSF    03.6
130F:  MOVWF  0D
1310:  MOVLW  05
1311:  MOVWF  0F
1312:  BCF    03.0
1313:  MOVLW  05
1314:  BCF    03.6
1315:  MOVWF  3A
1316:  GOTO   0FA
1317:  MOVLW  89
1318:  MOVWF  04
1319:  MOVF   39,W
131A:  MOVWF  3D
131B:  MOVF   38,W
131C:  MOVWF  3C
131D:  MOVF   37,W
131E:  MOVWF  3B
131F:  MOVF   36,W
1320:  MOVWF  3A
1321:  MOVLW  02
1322:  MOVWF  3E
1323:  CALL   000
....................       //set_pwm1_duty(mypwm); 
....................       delay_ms(100); 
1324:  MOVLW  64
1325:  MOVWF  48
1326:  BCF    0A.4
1327:  CALL   5D8
1328:  BSF    0A.4
1329:  GOTO   1AF
....................    } 
.................... } 
132A:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
